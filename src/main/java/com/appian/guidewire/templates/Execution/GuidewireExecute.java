package com.appian.guidewire.templates.Execution;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicBoolean;

import org.apache.commons.io.IOUtils;

import com.appian.connectedsystems.simplified.sdk.configuration.SimpleConfiguration;
import com.appian.connectedsystems.templateframework.sdk.ExecutionContext;
import com.appian.connectedsystems.templateframework.sdk.IntegrationError;
import com.appian.connectedsystems.templateframework.sdk.IntegrationResponse;
import com.appian.connectedsystems.templateframework.sdk.configuration.Document;
import com.appian.connectedsystems.templateframework.sdk.configuration.PropertyState;
import com.appian.guidewire.templates.integrationTemplates.GuidewireIntegrationTemplate;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import std.Util;

public class GuidewireExecute extends Execute {

  public GuidewireExecute(
      GuidewireIntegrationTemplate simpleIntegrationTemplate,
      SimpleConfiguration integrationConfiguration,
      SimpleConfiguration connectedSystemConfiguration,
      ExecutionContext executionContext) throws JsonProcessingException {
    super(simpleIntegrationTemplate, integrationConfiguration, connectedSystemConfiguration, executionContext);
  }

  @Override
  public IntegrationResponse buildExecution() throws IOException {
    try {
      switch (restOperation) {
        case GET:
          executeGet();
          break;
        case DELETE:
          executeDelete();
          break;
        case POST:
          executePost();
          break;
        case PATCH:
          executePatch();
          break;
      }
    } catch (IOException e) {
      return Util.buildError(e.getCause().toString(), e.getMessage(), "");
    }

    // If autogenerated 'text' property is submitted, null value submitted, or other errors created, return error
    if (getError() != null) {
      IntegrationError error = getError().build();
      return IntegrationResponse.forError(error)
          .withDiagnostic(getDiagnosticsUI())
          .build();
    }
    return IntegrationResponse
        .forSuccess(getHTTPResponse().getCombinedResponse())
        .withDiagnostic(getDiagnosticsUI())
        .build();
  }

  @Override
  public void executeGet() throws IOException {

    pathNameModified += "?";
    // Pagination
    // TODO: pagination with next parameter
    String pageSize = integrationConfiguration.getValue(PAGESIZE);
    if (pageSize != null) {
      if (Util.isInteger(pageSize) && Integer.parseInt(pageSize) > 0) { // Pagesize is just a number
        pathNameModified = pathNameModified + "pageSize=" + pageSize + "&";
      } else { // pagesize is a link to next/prev href
        // merge next/prev link into pathName
        String nextOrPrevPagination = Util.mergeStrings(pathNameModified, pageSize);
        setHTTPResponse(httpService.get(nextOrPrevPagination));
        return;
      }
    }

    // Included Resources exist and have been selected by user
    String includedResourcesKey = Util.removeSpecialCharactersFromPathName(pathNameUnmodified) + INCLUDED_RESOURCES;
    Map<String,PropertyState> includedMap = integrationConfiguration.getValue(includedResourcesKey);
    boolean includedPropertiesSelected = Optional.ofNullable(includedMap)
        .filter(m -> !m.isEmpty())
        .map(m -> m.values().stream().anyMatch(val -> Boolean.parseBoolean(val.getValue().toString())))
        .orElse(false);
    if (includedPropertiesSelected) {
      AtomicBoolean firstIncluded = new AtomicBoolean(true);
      includedMap.entrySet().forEach(entry -> {
        if (entry.getValue().getValue().equals(true)) {
          pathNameModified += firstIncluded.get() ? "include=" + entry.getKey() + "," : entry.getKey() + ",";
          firstIncluded.set(false);
        }
      });
      pathNameModified = Util.removeLastChar(pathNameModified) + "&";
    }

    // Sorting
    String sortField = integrationConfiguration.getValue(SORT);
    String sortOrder = integrationConfiguration.getValue(SORT_ORDER);
    if (sortField != null && sortOrder != null) {
      pathNameModified += sortOrder.equals("-") ?
          "sort=-" + sortField + "&" :
          "sort=" + sortField + "&";
    }

    // Filtering
    String filterField = Util.filterRules(integrationConfiguration.getValue(FILTER_FIELD));
    String filterOperator = Util.filterRules(integrationConfiguration.getValue(FILTER_OPERATOR));
    String filterValue = Util.filterRules(integrationConfiguration.getValue(FILTER_VALUE));
    if (filterField != null && filterOperator  != null && filterValue != null) {
      pathNameModified += "filter=" + filterField + ":" + filterOperator + ":" + filterValue + "&";
    }

    // Include Total
    pathNameModified = integrationConfiguration.getProperty(INCLUDE_TOTAL) != null && integrationConfiguration.getValue(INCLUDE_TOTAL).equals(true) ?
        pathNameModified + "includeTotal=true" :
        pathNameModified;

    // If none of the above options were set or if options have been set and there are no more edits required to the pathName
    String lastChar = pathNameModified.substring(pathNameModified.length() - 1);
    if (lastChar.equals("&") || lastChar.equals("?")) {
      pathNameModified = Util.removeLastChar(pathNameModified);
    }

    setHTTPResponse(httpService.get(pathNameModified));
  }

  public RequestBody getCompletedRequestBody() throws IOException {
    // If not request body is needed for the post request
    if (integrationConfiguration.getProperty(NO_REQ_BODY) != null) {
      return RequestBody.create(new byte[0]);
    }

    // PropertyState to JSON map of request body
    buildRequestBodyJSON(integrationConfiguration.getValue(reqBodyKey));

    Map<String, Object> attributesWrapper = new HashMap<>();
    attributesWrapper.put("attributes", builtRequestBody);

    // Add checksum to request body if it exists
    if (integrationConfiguration.getValue(CHECKSUM_IN_REQ_BODY) != null) {
      attributesWrapper.put(CHECKSUM_IN_REQ_BODY, integrationConfiguration.getValue(CHECKSUM_IN_REQ_BODY).toString());
    }
    Map<String, Object> dataWrapper = Collections.singletonMap("data", attributesWrapper);

    Document doc = integrationConfiguration.getValue(DOCUMENT);
    if (doc != null) {

      // Create a temporary file and copy the InputStream into it
      String fileName = doc.getFileName();
      String fileNameWithoutExtension = fileName.substring(0, doc.getFileName().lastIndexOf("."));
      File tempFile = File.createTempFile(fileNameWithoutExtension, "." + doc.getExtension());
      tempFile.deleteOnExit();
      FileOutputStream out = new FileOutputStream(tempFile);
      IOUtils.copy(doc.getInputStream(), out);

      // Create MultipartBody
      String jsonString = new ObjectMapper().writeValueAsString(dataWrapper);
      // Determine media type based on file extension
      String contentType = Files.probeContentType(tempFile.toPath());
      if (contentType == null) {
        contentType = "application/octet-stream";  // Default to octet stream if type is unknown
      }
      RequestBody fileBody = RequestBody.create(tempFile, MediaType.parse(contentType));
      return new MultipartBody.Builder()
          .setType(MultipartBody.FORM)
          .addFormDataPart("content", fileName, fileBody)
          .addFormDataPart("metadata", null, RequestBody.create(jsonString, MediaType.parse("application/json")))
          .build();
    }

    String jsonString = new ObjectMapper().writeValueAsString(dataWrapper);
/*    System.out.println(jsonString);*/
    return RequestBody.create(jsonString, MediaType.get("application/json; charset=utf-8"));
  }

  @Override
  public void executePost() throws IOException {
      setHTTPResponse(httpService.post(pathNameModified, getCompletedRequestBody()));
  }

  @Override
  public void executePatch() throws IOException {
    setHTTPResponse(httpService.patch(pathNameModified, getCompletedRequestBody()));
  }

  @Override
  public void executeDelete() throws IOException {
    setHTTPResponse(httpService.delete(pathNameModified));
  }
}
