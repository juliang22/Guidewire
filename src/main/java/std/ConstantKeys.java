package std;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import com.appian.connectedsystems.templateframework.sdk.configuration.TextPropertyDescriptor;

public interface ConstantKeys {

  // Basic Auth
  String USERNAME = "username";
  String PASSWORD = "password";
  String ROOT_URL = "rootUrl";
  String VERSION = "version";

  // Service Auth
  String AUTH_SERVER_URL = "authServerUrl";
  String CLIENT_ID = "clientId";
  String CLIENT_SECRET = "clientSecret";
  String SCOPES = "scopes";
  String PLANET_CLASS = "planetClass";
  String TENANT = "tenant";
  String PROD = "prod";
  String PRE_PROD = "preProd";
  String LOWER = "lower";
  String ACCESS_TOKEN = "access_token";
  String TOKEN_TYPE = "token_type";
  String USER_CONTEXT_USERNAME = "userContextUsername";

  // Authentication types
  String AUTH_TYPE = "authType";
  String BASIC_AUTH = "basicAuth";
  String STANDALONE_SERVICE = "standaloneService";
  String SERVICE_ACCOUNT_MAPPING = "serviceAccountMapping";
  String SERVICE_USER_CONTEXT = "serviceUserContext";



  String ENDPOINTS_FOR_SEARCH = "endpointsForSearch";

  String CHOSEN_ENDPOINT = "chosenEndpoint";

  // API Types
  String API_TYPE = "apiType";
  String SUB_API_TYPE = "subApiType";
  String CLAIMS = "claimCenter";
  String POLICIES = "policyCenter";
  String BILLING = "billingCenter";
  String API_VERSION = "apiVersion";

  // Sub API Types
  String SUB_API_KEY = "subApiKey";
  // OpenAPI Parsing Constants
  String PARAMETERS = "parameters";
  String PATHS = "paths";
  String REQUEST_BODY = "requestBody";
  String CONTENT = "content";
  String CONTENTS = "contents";
  String APPLICATION_JSON = "application/json";
  String MULTIPART_FORM_DATA = "multipart/form-data";
  String SCHEMAS = "schemas";
  String SCHEMA = "schema";
  String PROPERTIES = "properties";
  String FORMAT = "format";
  String DATA = "data";
  String ITEMS = "items";
  String ATTRIBUTES = "attributes";
  String ONE_OF = "oneOf";
  String REQUIRED = "required";
  String NAME = "name";
  String DESCRIPTION = "description";
  String REF = "$ref";
  String RESPONSES = "responses";
  String TYPE = "type";
  String METADATA = "metadata";
  String DEPRECATED = "deprecated";
  String SUMMARY = "summary";
  String REQUIRED_FOR_CREATE = "x-gw-requiredForCreate";




  //Rest call types
  String GET = "get";

  String POST = "post";
  String PATCH = "patch";
  String DELETE = "delete";

  // Default Errors
  String AUTOGENERATED_ERROR_TITLE = "Autogenerated property with value 'text' must be removed before sending request";
  String AUTOGENERATED_ERROR_MESSAGE = "Please remove all autogenerated properties from request body before executing request.";
  String AUTOGENERATED_ERROR_DETAIL = "Autogenerated properties are marked 'text', 'true', '100', and '3.14' for string, boolean, integer, " +
      "and double properties, respectively. Make sure to update or remove these autogenerated properties before making " +
      "the request.";

  String FILE_SAVING_ERROR_TITLE = "Could not save file received from api. ";
  String FOLDER_LOCATION_ERROR_MESSAGE = "Set desired folder location to save the incoming file.";
  String FILE_NAME_ERROR_MESSAGE = "Set desired file name save the incoming file.";

  Set<String> PATHS_TO_REMOVE = new HashSet<>(Arrays.asList("/swagger.json", "/openapi.json", "/batch", "/graph-schema"));

  // folder/filename setting
  String FOLDER = "folder";
  String SAVED_FILENAME = "savedFileName";

  String NO_REQ_BODY = "noReqBody";

  TextPropertyDescriptor NO_REQ_BODY_UI = new TextPropertyDescriptor.TextPropertyDescriptorBuilder()
      .key(NO_REQ_BODY)
      .isReadOnly(true)
      .instructionText("No Request Body is required to execute this POST")
      .build();
  String INCLUDED_RESOURCES = "includedResources";
  String INCLUDE_TOTAL = "includeTotal";
  Set<String> NOT_NESTED_SET = new HashSet<>(Arrays.asList("STRING", "INTEGER", "BOOLEAN", "DOUBLE", "PARAGRAPH"));
  String REQ_BODY_PROPERTIES = "reqBodyProperties";
  String DOCUMENT = "document";
  String PAGESIZE = "pagesize";
  String SORT = "sort";
  String SORT_ORDER = "sortOrder";
  String FILTER_FIELD = "filterField";
  String FILTER_OPERATOR = "filterOperator";
  String FILTER_VALUE = "filterComparator";
  Map<String, String> FILTERING_OPTIONS = new HashMap<String, String>() {{
    put("=", "eq");
    put("≠", "ne");
    put("<", "lt");
    put(">", "gt");
    put("≤", "le");
    put("≥", "ge");
    put("In", "in");
    put("Not In", "ni");
    put("Starts With", "sw");
    put("Contains", "cn");
  }};
  String SEARCH = "search";

  String CHECKSUM_IN_REQ_BODY = "checksum";
  String CHECKSUM_IN_HEADER = "GW-Checksum";

  public static TextPropertyDescriptor getChecksumUI(String checksumInReqBodyOrHeader) {
    return new TextPropertyDescriptor.TextPropertyDescriptorBuilder()
        .key(checksumInReqBodyOrHeader)
        .label("Checksum")
        .placeholder("7a0d9677f11e246bbe3c124889219c50")
        .instructionText("Use checksum property to verify that a resource has not been changed since you last interacted with " +
            "it. Use a GET call for the resource being modified to get the checksum value.")
        .description(
            "If the values match, Guidewire determines the resource has not been changed since the caller application last " +
                "acquired the data and the request is executed. If the values do not match, Guidewire determines the resource" +
                " has changed since the caller application last acquired the data and the request is not executed, returning " +
                "an error. Refer to the documentation for more information: " +
                "https://docs.guidewire.com/cloud/cc/202302/cloudapibf/cloudAPI/topics/102-Optim/05-checksums/c_checksums.html")
        .isExpressionable(true)
        .build();
  }

}
