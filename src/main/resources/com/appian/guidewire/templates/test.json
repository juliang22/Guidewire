{
  "components": {
    "parameters": {
      "accommodationId": {
        "description": "The identifier for the trip tripaccommodation (Since 1.5.0)",
        "in": "path",
        "name": "accommodationId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.5.0"
      },
      "assessmentContentItemId": {
        "description": "The REST identifier for the assessment content item (Since 1.4.0)",
        "in": "path",
        "name": "assessmentContentItemId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.4.0"
      },
      "assessmentSummaryId": {
        "description": "The REST identifier for the assessment summary (Since 1.4.0)",
        "in": "path",
        "name": "assessmentSummaryId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.4.0"
      },
      "checkId": {
        "description": "The identifier for the check (Since 1.3.0)",
        "in": "path",
        "name": "checkId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.3.0"
      },
      "checkSetId": {
        "description": "The identifier for the check set (Since 1.3.0)",
        "in": "path",
        "name": "checkSetId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.3.0"
      },
      "claimId": {
        "description": "The identifier for the claim",
        "in": "path",
        "name": "claimId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "claimInfoId": {
        "description": "The identifier for the claim info (Since 1.3.1)",
        "in": "path",
        "name": "claimInfoId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.3.1"
      },
      "contactId": {
        "description": "The identifier for the contact",
        "in": "path",
        "name": "contactId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "contactRoleId": {
        "description": "The identifier for the contact role",
        "in": "path",
        "name": "contactRoleId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "coverageId": {
        "description": "The identifier for the coverage",
        "in": "path",
        "name": "coverageId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "documentId": {
        "description": "The identifier for the document",
        "in": "path",
        "name": "documentId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "enablePolymorphism": {
        "description": "Whether or not to use the `discriminator`/`oneOf` pattern to output schemas in cases where the valid set of fields can vary based on some attribute of the data such as the country or subtype.  Defaults to `true`. See the documentation for more information.",
        "in": "query",
        "name": "enablePolymorphism",
        "schema": {
          "default": true,
          "type": "boolean"
        }
      },
      "endorsementId": {
        "description": "The identifier for policy endorsement",
        "in": "path",
        "name": "endorsementId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "exposureId": {
        "description": "The identifier for the exposure",
        "in": "path",
        "name": "exposureId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "fields": {
        "description": "Allows the caller to specify the set of fields that should be included on the response. This can be used to limit the set of fields returned as well as to include optional fields that otherwise wouldn't normally be returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field list>`, where `<field list>` consists of a comma-separated list of field or field set names. See the documentation for more information.",
        "explode": true,
        "in": "query",
        "name": "fields",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form",
        "x-gw-allowForCompositeApi": true
      },
      "filter": {
        "description": "Filters the list of results based on the specified field, operator, and value. The parameter is either of the form `filter=<field>:<operator>:<value>` or `filter=<include>:<field>:<operator>:<value>`. See the documentation for more information.",
        "explode": true,
        "in": "query",
        "name": "filter",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form",
        "x-gw-allowForCompositeApi": true
      },
      "filterByUser": {
        "description": "Whether or not to filter endpoints and schema properties by the authorization of the caller. Defaults to `false`.",
        "in": "query",
        "name": "filterByUser",
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "gwLanguageHeader": {
        "description": "If specified, this header will set the language used when processing the request",
        "in": "header",
        "name": "GW-Language",
        "schema": {
          "type": "string"
        }
      },
      "gwLocaleHeader": {
        "description": "If specified, this header will set the locale used when processing the request",
        "in": "header",
        "name": "GW-Locale",
        "schema": {
          "type": "string"
        }
      },
      "gwSchemaProperty": {
        "description": "If specified and the operation returns json with a defined schema, this will add a property, '$GW-Schema',  with the fully qualified name of the object's schema.",
        "in": "header",
        "name": "GW-IncludeSchemaProperty",
        "schema": {
          "type": "boolean"
        }
      },
      "gwTraceability": {
        "description": "This header permits a customer to trace a request from its initial reception through all of the subsequent applications that were invoked to handle that request. The actual traceability id present in the MDC and logs (and returned in the response), is dependent on the implementation of TraceabilityIDPlugin. The default implementation uses this value, if specified, or a generated UID.  However, another implementation may always generate a unique id and just log  the relationship between these incoming values and the generated UID. Note: that this header can be repeated, but the resulting string will just be the comma separated values.",
        "in": "header",
        "name": "X-Correlation-ID",
        "schema": {
          "type": "string"
        }
      },
      "gwTransactionID": {
        "description": "If specified and this operation results in a database commit, this header's value must not have been submitted before.  This value must be globally unique across all clients, apis and webservices. It is used for those transaction that are not idempotent. Unless this is explicitly referenced for an operation it is not required.",
        "in": "header",
        "name": "GW-DBTransaction-ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "gwUnknownPropertyHeader": {
        "description": "If specified, this header will drive the behavior for unknown property handling",
        "in": "header",
        "name": "GW-UnknownPropertyHandling",
        "schema": {
          "enum": [
            "log",
            "reject",
            "ignore"
          ],
          "type": "string"
        }
      },
      "gwUnknownQueryParameterHeader": {
        "description": "If specified, this header will drive the behavior for unknown query parameter handling.  Default is to reject them.",
        "in": "header",
        "name": "GW-UnknownQueryParamHandling",
        "schema": {
          "enum": [
            "log",
            "reject",
            "ignore"
          ],
          "type": "string"
        }
      },
      "gwValidateResponseHandling": {
        "description": "If specified, this header permits the client to override the behavior around validating response",
        "in": "header",
        "name": "GW-ValidateResponseHandling",
        "schema": {
          "type": "boolean"
        }
      },
      "incidentId": {
        "description": "The identifier for the incident",
        "in": "path",
        "name": "incidentId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "include": {
        "description": "Used to request that additional resources be returned with the API response in the `included` section of the responses. The `include` parameter can appear multiple times, and is a comma-separated list of additional resources to include. See the documentation for more information.",
        "explode": true,
        "in": "query",
        "name": "include",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "includeTotal": {
        "description": "Used to request that results should include a count of the total number of results available, which may be more than the total number of results currently being returned. This parameter is of the form `includeTotal=<true|false>` or `includeTotal=<include>:<true|false>`. If not specified, the default is considered to be `false`. See the documentation for more information about response pagination.",
        "explode": true,
        "in": "query",
        "name": "includeTotal",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form",
        "x-gw-allowForCompositeApi": true
      },
      "interactionId": {
        "description": "The intake interaction identifier (Since 1.3.0)",
        "in": "path",
        "name": "interactionId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.3.0"
      },
      "invoiceId": {
        "description": "The identifier for the invoice",
        "in": "path",
        "name": "invoiceId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "locationBasedRiskUnitId": {
        "description": "The identifier for the location based risk unit",
        "in": "path",
        "name": "locationBasedRiskUnitId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "locationId": {
        "description": "The identifier for the location",
        "in": "path",
        "name": "locationId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "matterId": {
        "description": "The identifier for the matter (Since 1.6.0)",
        "in": "path",
        "name": "matterId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.6.0"
      },
      "messageId": {
        "description": "The service request message identifier",
        "in": "path",
        "name": "messageId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "omitInclusions": {
        "description": "Whether or not to omit the `included` properties on request and response schemas.  Defaults to `false`. See the documentation for more information. (Since 1.4.0)",
        "in": "query",
        "name": "omitInclusions",
        "schema": {
          "default": false,
          "type": "boolean"
        },
        "x-gw-sinceVersion": "1.4.0"
      },
      "pageOffset": {
        "description": "The offset of the first result to fetch when fetching a paginated set of results. The parameter is of the form `pageOffset=<number>` where the first result has an offset of 0. For example, `pageOffset=25` will skip the first 25 results in sorted order. If not specified, the default value is 0. See the documentation for more information about response pagination.",
        "in": "query",
        "name": "pageOffset",
        "schema": {
          "type": "string"
        },
        "x-gw-allowForCompositeApi": true
      },
      "pageSize": {
        "description": "The maximum number of results to return in the response. The parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`. The maximum allowed `pageSize` and the default `pageSize` both depend on the specific API endpoint the request is made to. See the documentation for more information about response pagination.",
        "explode": true,
        "in": "query",
        "name": "pageSize",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form",
        "x-gw-allowForCompositeApi": true
      },
      "policyId": {
        "description": "The identifier for the policy (Since 1.2.0)",
        "in": "path",
        "name": "policyId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.2.0"
      },
      "prettyPrintSchema": {
        "description": "Whether or not to pretty-print the returned schema, making it larger but more human readable.  Defaults to `false`.",
        "in": "query",
        "name": "prettyPrint",
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "propertyContentsIncidentId": {
        "description": "The REST identifier for the property contents incident (Since 1.4.0)",
        "in": "path",
        "name": "propertyContentsIncidentId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.4.0"
      },
      "recoveryReserveSetId": {
        "description": "The identifier for the recovery reserve set (Since 1.3.0)",
        "in": "path",
        "name": "recoveryReserveSetId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.3.0"
      },
      "recoverySetId": {
        "description": "The identifier for the recovery set (Since 1.3.0)",
        "in": "path",
        "name": "recoverySetId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.3.0"
      },
      "reserveSetId": {
        "description": "The identifier for the reserve set (Since 1.3.0)",
        "in": "path",
        "name": "reserveSetId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.3.0"
      },
      "segmentId": {
        "description": "The identifier for the trip segment (Since 1.5.0)",
        "in": "path",
        "name": "segmentId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.5.0"
      },
      "serviceRequestId": {
        "description": "The service request identifier",
        "in": "path",
        "name": "serviceRequestId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "sort": {
        "description": "Controls the sorting of elements within a response. The sort parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where `<fields>` represents a comma-separated list of field names to sort on. Field names can be prefixed with `-` to request a descending sort, otherwise the sort will be ascending. See the documentation for more information.",
        "explode": true,
        "in": "query",
        "name": "sort",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form",
        "x-gw-allowForCompositeApi": true
      },
      "transactionId": {
        "description": "The identifier for the transaction (Since 1.3.0)",
        "in": "path",
        "name": "transactionId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.3.0"
      },
      "tripRiskUnitId": {
        "description": "The identifier for the trip risk unit (Since 1.5.0)",
        "in": "path",
        "name": "tripRiskUnitId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.5.0"
      },
      "vehicleRiskUnitId": {
        "description": "The identifier for the vehicle risk unit",
        "in": "path",
        "name": "vehicleRiskUnitId",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "Activity": {
        "description": "An `Activity` is an assignable item that represents a task to be done, a decision to be made, or information to be aware of",
        "properties": {
          "activityPattern": {
            "description": "The code of the `ActivityPattern` used to create this activity and set its initial values",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Activity pattern",
            "type": "string",
            "x-gw-createOnly": true
          },
          "activityType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of this activity, such as `general` or `approval`",
            "readOnly": true,
            "title": "Activity type",
            "x-gw-typelist": "ActivityType"
          },
          "approvalIssue": {
            "description": "The reason approval is needed. Only applicable to activities with an `activityType` of `approval`.",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Approval issue",
            "type": "string"
          },
          "approvalRationale": {
            "description": "Rationale for approving or rejecting this activity. Only applicable to activities with an `activityType` of `approval`.",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Approval rationale",
            "type": "string"
          },
          "approved": {
            "description": "This field is `true` if this activity has been approved, `false` if this activity has been rejected, and omitted otherwise. Only applicable to activities with an `activityType` of `approval`.",
            "readOnly": true,
            "title": "Approved",
            "type": "boolean"
          },
          "assignedByUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` who last assigned or re-assigned this activity",
            "readOnly": true,
            "title": "Assigned by user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "assignedGroup": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `Group` that this activity is currently assigned to",
            "readOnly": true,
            "title": "Assigned group"
          },
          "assignedQueue": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `Queue` that this activity is currently assigned to",
            "readOnly": true,
            "title": "Assigned queue"
          },
          "assignedUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` that this activity is currently assigned to",
            "readOnly": true,
            "title": "Assigned user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "assignmentStatus": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The current assignment status of this activity, such as `assigned` or `unassigned`",
            "readOnly": true,
            "title": "Assignment status",
            "x-gw-typelist": "AssignmentStatus"
          },
          "autopilotHandlingDecision": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Record of the decision made around how to handle this activity. Only intended for use if Claims Autopilot is enabled. (Since 1.2.0)",
            "nullable": true,
            "title": "Autopilot handling decision",
            "x-gw-defaultViews": [
              "none"
            ],
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AutopilotHandlingDecision"
          },
          "autopilotId": {
            "description": "Unique identifier assigned to this activity by the Claims Autopilot system. Only intended for use by the Claims Autopilot system. (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Autopilot ID",
            "type": "string",
            "x-gw-defaultViews": [
              "none"
            ],
            "x-gw-sinceVersion": "1.2.0"
          },
          "autopilotPurpose": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Activity purpose set by the Claims Autopilot system. Only intended for use by the Claims Autopilot system. (Since 1.2.0)",
            "nullable": true,
            "title": "Autopilot purpose",
            "x-gw-defaultViews": [
              "none"
            ],
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AutopilotPurpose"
          },
          "closeDate": {
            "description": "The date and time when this activity was completed, skipped, approved, or rejected",
            "format": "date-time",
            "readOnly": true,
            "title": "Close date",
            "type": "string"
          },
          "closeUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` that completed, skipped, approved, or rejected this activity",
            "readOnly": true,
            "title": "Close user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "coverageIssues": {
            "description": "A list of possible issues with coverage for the associated claim (Since 1.2.0)",
            "items": {
              "$ref": "#/components/schemas/CoverageIssue"
            },
            "title": "Coverage issues",
            "type": "array",
            "x-gw-createOnly": true,
            "x-gw-sinceVersion": "1.2.0"
          },
          "createTime": {
            "description": "The date and time when this `Activity` was created (Since 1.1.0)",
            "format": "date-time",
            "readOnly": true,
            "title": "Create time",
            "type": "string",
            "x-gw-sinceVersion": "1.1.0"
          },
          "description": {
            "description": "The description of this activity",
            "maxLength": 1333,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "dueDate": {
            "description": "Date and time by which a person should complete the activity. If not completed by this time, the activity is considered overdue. Not applicable to activities that represent events rather than tasks.",
            "format": "date-time",
            "nullable": true,
            "title": "Due date",
            "type": "string"
          },
          "endDate": {
            "description": "Date and time at which the activity is expected to end. Only applicable to activities that represent events.",
            "format": "date-time",
            "nullable": true,
            "title": "End date",
            "type": "string"
          },
          "escalated": {
            "description": "A `true` value for this field indicates that the activity has been escalated",
            "readOnly": true,
            "title": "Escalated",
            "type": "boolean"
          },
          "escalationDate": {
            "description": "Date and time at which this activity will be escalated if it has not yet been completed",
            "format": "date-time",
            "nullable": true,
            "title": "Escalation date",
            "type": "string"
          },
          "externallyOwned": {
            "description": "A `true` value for this field indicates that the activity is owned by a user or group outside of the insurer",
            "title": "Externally owned",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of this `Activity`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "importance": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Level of importance of the activity",
            "title": "Importance",
            "x-gw-typelist": "ImportanceLevel"
          },
          "initialAssignment": {
            "$ref": "#/components/schemas/Assignee",
            "description": "The `Assignee` that this activity should be assigned to when it is first created",
            "title": "Initial assignment",
            "x-gw-createOnly": true
          },
          "mandatory": {
            "description": "A `true` value for this field indicates that the activity is mandatory and cannot be skipped",
            "title": "Mandatory",
            "type": "boolean"
          },
          "priority": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The priority of this activity",
            "title": "Priority",
            "x-gw-typelist": "Priority"
          },
          "recurring": {
            "description": "A `true` value indicates that this activity is recurring",
            "title": "Recurring",
            "type": "boolean"
          },
          "relatedTo": {
            "$ref": "#/components/schemas/GenericRelation",
            "description": "A reference to the primary element that the activity is related to (Since 1.3.0)",
            "title": "Related to",
            "x-gw-sinceVersion": "1.3.0"
          },
          "startDate": {
            "description": "Date and time at which the activity is scheduled to begin. Only applicable to activities that represent events.",
            "format": "date-time",
            "nullable": true,
            "title": "Start date",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The status of this activity, such as `open` or `complete`",
            "readOnly": true,
            "title": "Status",
            "x-gw-typelist": "ActivityStatus"
          },
          "subject": {
            "description": "A brief title for the activity",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Subject",
            "type": "string"
          }
        },
        "title": "Activity",
        "type": "object",
        "x-gw-filterable": [
          "autopilotHandlingDecision",
          "autopilotId",
          "autopilotPurpose",
          "closeDate",
          "dueDate",
          "escalated",
          "externallyOwned",
          "priority",
          "status",
          "subject"
        ],
        "x-gw-sortable": [
          "assignedUser",
          "dueDate",
          "escalated",
          "priority",
          "status",
          "subject"
        ]
      },
      "ActivityData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Activity"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ActivityList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ActivityData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ActivityResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ActivityPattern": {
        "description": "An `ActivityPattern` is a template for an activity, and is used to create a new activity and set defaults for some of its fields",
        "properties": {
          "activityClass": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The class of activity that this activity pattern creates, such as `task` or `event`",
            "title": "Activity class",
            "x-gw-typelist": "ActivityClass"
          },
          "activityType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of activity that this activity pattern creates, such as `general` or `approval`",
            "title": "Activity type",
            "x-gw-typelist": "ActivityType"
          },
          "availableForClosedClaims": {
            "description": "A `true` value for this field indicates that this activity pattern can be used to create activities on closed claims",
            "title": "Available for closed claims",
            "type": "boolean"
          },
          "category": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The category of the activity pattern. Used to help organize `ActivityPatterns` when presenting them to a user.",
            "title": "Category",
            "x-gw-filterBy": [
              "activityType"
            ],
            "x-gw-typelist": "ActivityCategory"
          },
          "claimLossType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "A claim loss type for this pattern. Used to allow filtering activity patterns based on the loss type of the associated claim.",
            "title": "Claim loss type",
            "x-gw-typelist": "LossType"
          },
          "code": {
            "description": "The code that uniquely identifies this `ActivityPattern`",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Code",
            "type": "string",
            "x-gw-createOnly": true
          },
          "description": {
            "description": "The default `description` for activities created from this activity pattern",
            "maxLength": 1333,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "dueDate": {
            "description": "The default `dueDate` for activities created from this activity pattern, calculated based on the current date and time",
            "format": "date-time",
            "title": "Due date",
            "type": "string"
          },
          "escalationDate": {
            "description": "The default `escalationDate` for activities created from this activity pattern, calculated based on the current date and time",
            "format": "date-time",
            "title": "Escalation date",
            "type": "string"
          },
          "externallyOwned": {
            "description": "The default `externallyOwned` value for activities created from this activity pattern",
            "title": "Externally owned",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of this `ActivityPattern`",
            "title": "ID",
            "type": "string"
          },
          "importance": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The default `importance` value for activities created from this activity pattern",
            "title": "Importance",
            "x-gw-typelist": "ImportanceLevel"
          },
          "mandatory": {
            "description": "The default `mandatory` value for activities created from this activity pattern",
            "title": "Mandatory",
            "type": "boolean"
          },
          "priority": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The default `priority` for activities created from this activity pattern",
            "title": "Priority",
            "x-gw-typelist": "Priority"
          },
          "recurring": {
            "description": "The default `recurring` value for activities created from this activity pattern",
            "title": "Recurring",
            "type": "boolean"
          },
          "subject": {
            "description": "The default `subject` for activities created from this activity pattern",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Subject",
            "type": "string"
          }
        },
        "title": "Activity pattern",
        "type": "object",
        "x-gw-filterable": [
          "activityClass",
          "activityType",
          "category"
        ],
        "x-gw-sortable": [
          "category",
          "code",
          "priority"
        ]
      },
      "ActivityPatternData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ActivityPattern"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ActivityPatternList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ActivityPatternData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ActivityResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ActivityRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ActivityData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ActivityResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ActivityData"
          },
          "included": {
            "$ref": "#/components/schemas/ActivityResponseInclusions"
          }
        },
        "type": "object"
      },
      "ActivityResponseInclusions": {
        "properties": {
          "Assignee": {
            "items": {
              "$ref": "#/components/schemas/AssigneeData"
            },
            "type": "array"
          },
          "Note": {
            "items": {
              "$ref": "#/components/schemas/NoteData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AdditionalInfo": {
        "description": "A name and value that defines an additional property of a contact role constraint, such as what loss types the constraint applies to",
        "properties": {
          "propertyName": {
            "description": "The name of the property",
            "readOnly": true,
            "title": "Property name",
            "type": "string"
          },
          "value": {
            "description": "The value of the property",
            "readOnly": true,
            "title": "Value",
            "type": "string"
          }
        },
        "title": "Additional info",
        "type": "object"
      },
      "Address": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "discriminator": {
          "mapping": {
            "AD": "#/components/schemas/Address_Group0",
            "AE": "#/components/schemas/Address_AE",
            "AF": "#/components/schemas/Address_Group0",
            "AG": "#/components/schemas/Address_AG",
            "AI": "#/components/schemas/Address_Group0",
            "AL": "#/components/schemas/Address_Group0",
            "AM": "#/components/schemas/Address_Group3",
            "AO": "#/components/schemas/Address_Group2",
            "AQ": "#/components/schemas/Address_Group2",
            "AR": "#/components/schemas/Address_Group3",
            "AS": "#/components/schemas/Address_Group1",
            "AT": "#/components/schemas/Address_Group4",
            "AU": "#/components/schemas/Address_Group1",
            "AW": "#/components/schemas/Address_Group2",
            "AZ": "#/components/schemas/Address_Group0",
            "BA": "#/components/schemas/Address_Group0",
            "BB": "#/components/schemas/Address_BB",
            "BD": "#/components/schemas/Address_Group0",
            "BE": "#/components/schemas/Address_Group4",
            "BF": "#/components/schemas/Address_Group6",
            "BG": "#/components/schemas/Address_Group0",
            "BH": "#/components/schemas/Address_Group0",
            "BI": "#/components/schemas/Address_Group2",
            "BJ": "#/components/schemas/Address_Group2",
            "BL": "#/components/schemas/Address_Group8",
            "BM": "#/components/schemas/Address_Group0",
            "BN": "#/components/schemas/Address_Group0",
            "BO": "#/components/schemas/Address_Group2",
            "BR": "#/components/schemas/Address_BR",
            "BS": "#/components/schemas/Address_Group5",
            "BT": "#/components/schemas/Address_Group0",
            "BV": "#/components/schemas/Address_Group2",
            "BW": "#/components/schemas/Address_Group2",
            "BY": "#/components/schemas/Address_Group3",
            "BZ": "#/components/schemas/Address_Group2",
            "CA": "#/components/schemas/Address_CA",
            "CC": "#/components/schemas/Address_Group3",
            "CD": "#/components/schemas/Address_Group2",
            "CF": "#/components/schemas/Address_Group2",
            "CG": "#/components/schemas/Address_Group2",
            "CH": "#/components/schemas/Address_Group4",
            "CI": "#/components/schemas/Address_Group6",
            "CK": "#/components/schemas/Address_Group2",
            "CL": "#/components/schemas/Address_Group3",
            "CM": "#/components/schemas/Address_Group2",
            "CN": "#/components/schemas/Address_CN",
            "CO": "#/components/schemas/Address_CO",
            "CR": "#/components/schemas/Address_Group7",
            "CV": "#/components/schemas/Address_CV",
            "CX": "#/components/schemas/Address_Group3",
            "CY": "#/components/schemas/Address_Group0",
            "CZ": "#/components/schemas/Address_Group0",
            "DE": "#/components/schemas/Address_Group4",
            "DJ": "#/components/schemas/Address_Group2",
            "DK": "#/components/schemas/Address_Group4",
            "DM": "#/components/schemas/Address_Group2",
            "DO": "#/components/schemas/Address_Group0",
            "DZ": "#/components/schemas/Address_Group0",
            "EC": "#/components/schemas/Address_Group0",
            "EE": "#/components/schemas/Address_Group0",
            "EG": "#/components/schemas/Address_Group3",
            "EH": "#/components/schemas/Address_Group0",
            "ER": "#/components/schemas/Address_Group2",
            "ES": "#/components/schemas/Address_Group10",
            "ET": "#/components/schemas/Address_Group0",
            "FI": "#/components/schemas/Address_Group4",
            "FJ": "#/components/schemas/Address_Group2",
            "FK": "#/components/schemas/Address_Group4",
            "FM": "#/components/schemas/Address_Group1",
            "FO": "#/components/schemas/Address_Group0",
            "FR": "#/components/schemas/Address_FR",
            "GA": "#/components/schemas/Address_Group2",
            "GB": "#/components/schemas/Address_Group4",
            "GD": "#/components/schemas/Address_Group2",
            "GE": "#/components/schemas/Address_Group0",
            "GF": "#/components/schemas/Address_Group8",
            "GH": "#/components/schemas/Address_Group2",
            "GI": "#/components/schemas/Address_GI",
            "GL": "#/components/schemas/Address_Group4",
            "GM": "#/components/schemas/Address_Group2",
            "GN": "#/components/schemas/Address_Group0",
            "GP": "#/components/schemas/Address_Group8",
            "GQ": "#/components/schemas/Address_Group2",
            "GR": "#/components/schemas/Address_Group4",
            "GS": "#/components/schemas/Address_Group4",
            "GT": "#/components/schemas/Address_Group0",
            "GU": "#/components/schemas/Address_Group1",
            "GW": "#/components/schemas/Address_Group0",
            "GY": "#/components/schemas/Address_Group2",
            "HK": "#/components/schemas/Address_HK",
            "HM": "#/components/schemas/Address_Group3",
            "HN": "#/components/schemas/Address_Group7",
            "HR": "#/components/schemas/Address_Group0",
            "HT": "#/components/schemas/Address_Group0",
            "HU": "#/components/schemas/Address_Group4",
            "ID": "#/components/schemas/Address_ID",
            "IE": "#/components/schemas/Address_IE",
            "IL": "#/components/schemas/Address_Group0",
            "IN": "#/components/schemas/Address_Group1",
            "IO": "#/components/schemas/Address_Group4",
            "IQ": "#/components/schemas/Address_Group7",
            "IR": "#/components/schemas/Address_Group9",
            "IS": "#/components/schemas/Address_Group0",
            "IT": "#/components/schemas/Address_Group10",
            "JM": "#/components/schemas/Address_JM",
            "JO": "#/components/schemas/Address_Group0",
            "JP": "#/components/schemas/Address_JP",
            "KE": "#/components/schemas/Address_Group0",
            "KG": "#/components/schemas/Address_Group0",
            "KH": "#/components/schemas/Address_Group0",
            "KI": "#/components/schemas/Address_Group5",
            "KM": "#/components/schemas/Address_Group2",
            "KN": "#/components/schemas/Address_KN",
            "KR": "#/components/schemas/Address_KR",
            "KW": "#/components/schemas/Address_Group0",
            "KY": "#/components/schemas/Address_KY",
            "KZ": "#/components/schemas/Address_Group3",
            "LA": "#/components/schemas/Address_Group0",
            "LB": "#/components/schemas/Address_Group0",
            "LC": "#/components/schemas/Address_Group2",
            "LI": "#/components/schemas/Address_Group4",
            "LK": "#/components/schemas/Address_Group0",
            "LR": "#/components/schemas/Address_Group0",
            "LS": "#/components/schemas/Address_Group0",
            "LT": "#/components/schemas/Address_Group0",
            "LU": "#/components/schemas/Address_Group4",
            "LV": "#/components/schemas/Address_Group0",
            "LY": "#/components/schemas/Address_Group2",
            "MA": "#/components/schemas/Address_Group0",
            "MC": "#/components/schemas/Address_MC",
            "MD": "#/components/schemas/Address_Group0",
            "ME": "#/components/schemas/Address_Group0",
            "MF": "#/components/schemas/Address_Group8",
            "MG": "#/components/schemas/Address_Group0",
            "MH": "#/components/schemas/Address_Group1",
            "MK": "#/components/schemas/Address_Group0",
            "ML": "#/components/schemas/Address_Group2",
            "MM": "#/components/schemas/Address_Group0",
            "MN": "#/components/schemas/Address_Group3",
            "MO": "#/components/schemas/Address_MO",
            "MP": "#/components/schemas/Address_Group1",
            "MQ": "#/components/schemas/Address_Group8",
            "MR": "#/components/schemas/Address_Group2",
            "MS": "#/components/schemas/Address_Group2",
            "MT": "#/components/schemas/Address_Group0",
            "MU": "#/components/schemas/Address_Group0",
            "MV": "#/components/schemas/Address_Group0",
            "MW": "#/components/schemas/Address_Group6",
            "MX": "#/components/schemas/Address_Group11",
            "MY": "#/components/schemas/Address_Group11",
            "MZ": "#/components/schemas/Address_Group0",
            "NA": "#/components/schemas/Address_Group2",
            "NC": "#/components/schemas/Address_Group8",
            "NE": "#/components/schemas/Address_Group0",
            "NF": "#/components/schemas/Address_Group3",
            "NG": "#/components/schemas/Address_NG",
            "NI": "#/components/schemas/Address_NI",
            "NL": "#/components/schemas/Address_Group4",
            "NO": "#/components/schemas/Address_Group4",
            "NP": "#/components/schemas/Address_Group0",
            "NR": "#/components/schemas/Address_NR",
            "NU": "#/components/schemas/Address_Group2",
            "NZ": "#/components/schemas/Address_Group12",
            "OM": "#/components/schemas/Address_Group0",
            "PA": "#/components/schemas/Address_Group13",
            "PE": "#/components/schemas/Address_Group3",
            "PF": "#/components/schemas/Address_PF",
            "PG": "#/components/schemas/Address_Group7",
            "PH": "#/components/schemas/Address_Group9",
            "PK": "#/components/schemas/Address_Group0",
            "PL": "#/components/schemas/Address_Group4",
            "PM": "#/components/schemas/Address_Group8",
            "PN": "#/components/schemas/Address_Group4",
            "PR": "#/components/schemas/Address_Group4",
            "PS": "#/components/schemas/Address_Group2",
            "PT": "#/components/schemas/Address_Group4",
            "PW": "#/components/schemas/Address_Group1",
            "PY": "#/components/schemas/Address_Group0",
            "QA": "#/components/schemas/Address_Group2",
            "RE": "#/components/schemas/Address_Group8",
            "RO": "#/components/schemas/Address_Group0",
            "RS": "#/components/schemas/Address_Group0",
            "RU": "#/components/schemas/Address_Group14",
            "RW": "#/components/schemas/Address_Group2",
            "SA": "#/components/schemas/Address_Group0",
            "SB": "#/components/schemas/Address_Group2",
            "SC": "#/components/schemas/Address_Group5",
            "SE": "#/components/schemas/Address_Group4",
            "SG": "#/components/schemas/Address_SG",
            "SH": "#/components/schemas/Address_Group4",
            "SI": "#/components/schemas/Address_Group0",
            "SJ": "#/components/schemas/Address_Group4",
            "SK": "#/components/schemas/Address_Group0",
            "SL": "#/components/schemas/Address_Group2",
            "SM": "#/components/schemas/Address_SM",
            "SN": "#/components/schemas/Address_Group0",
            "SO": "#/components/schemas/Address_Group7",
            "SR": "#/components/schemas/Address_Group13",
            "ST": "#/components/schemas/Address_Group2",
            "SV": "#/components/schemas/Address_Group7",
            "SZ": "#/components/schemas/Address_Group0",
            "TC": "#/components/schemas/Address_Group4",
            "TD": "#/components/schemas/Address_Group2",
            "TF": "#/components/schemas/Address_Group2",
            "TG": "#/components/schemas/Address_Group2",
            "TH": "#/components/schemas/Address_Group9",
            "TJ": "#/components/schemas/Address_Group0",
            "TK": "#/components/schemas/Address_Group2",
            "TL": "#/components/schemas/Address_Group2",
            "TM": "#/components/schemas/Address_Group0",
            "TN": "#/components/schemas/Address_Group0",
            "TO": "#/components/schemas/Address_Group2",
            "TR": "#/components/schemas/Address_TR",
            "TT": "#/components/schemas/Address_Group2",
            "TV": "#/components/schemas/Address_Group5",
            "TW": "#/components/schemas/Address_TW",
            "TZ": "#/components/schemas/Address_Group0",
            "UA": "#/components/schemas/Address_Group14",
            "UG": "#/components/schemas/Address_Group2",
            "UM": "#/components/schemas/Address_Group15",
            "US": "#/components/schemas/Address_US",
            "UY": "#/components/schemas/Address_Group3",
            "UZ": "#/components/schemas/Address_Group3",
            "VA": "#/components/schemas/Address_Group0",
            "VC": "#/components/schemas/Address_Group0",
            "VE": "#/components/schemas/Address_Group15",
            "VG": "#/components/schemas/Address_VG",
            "VI": "#/components/schemas/Address_Group1",
            "VN": "#/components/schemas/Address_Group3",
            "VU": "#/components/schemas/Address_Group2",
            "WF": "#/components/schemas/Address_Group8",
            "WS": "#/components/schemas/Address_Group2",
            "YE": "#/components/schemas/Address_Group2",
            "YT": "#/components/schemas/Address_Group8",
            "ZA": "#/components/schemas/Address_Group12",
            "ZM": "#/components/schemas/Address_Group0",
            "ZW": "#/components/schemas/Address_Group2"
          },
          "propertyName": "country"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/Address_AE"
          },
          {
            "$ref": "#/components/schemas/Address_AG"
          },
          {
            "$ref": "#/components/schemas/Address_BB"
          },
          {
            "$ref": "#/components/schemas/Address_BR"
          },
          {
            "$ref": "#/components/schemas/Address_CA"
          },
          {
            "$ref": "#/components/schemas/Address_CN"
          },
          {
            "$ref": "#/components/schemas/Address_CO"
          },
          {
            "$ref": "#/components/schemas/Address_CV"
          },
          {
            "$ref": "#/components/schemas/Address_FR"
          },
          {
            "$ref": "#/components/schemas/Address_GI"
          },
          {
            "$ref": "#/components/schemas/Address_Group0"
          },
          {
            "$ref": "#/components/schemas/Address_Group1"
          },
          {
            "$ref": "#/components/schemas/Address_Group10"
          },
          {
            "$ref": "#/components/schemas/Address_Group11"
          },
          {
            "$ref": "#/components/schemas/Address_Group12"
          },
          {
            "$ref": "#/components/schemas/Address_Group13"
          },
          {
            "$ref": "#/components/schemas/Address_Group14"
          },
          {
            "$ref": "#/components/schemas/Address_Group15"
          },
          {
            "$ref": "#/components/schemas/Address_Group2"
          },
          {
            "$ref": "#/components/schemas/Address_Group3"
          },
          {
            "$ref": "#/components/schemas/Address_Group4"
          },
          {
            "$ref": "#/components/schemas/Address_Group5"
          },
          {
            "$ref": "#/components/schemas/Address_Group6"
          },
          {
            "$ref": "#/components/schemas/Address_Group7"
          },
          {
            "$ref": "#/components/schemas/Address_Group8"
          },
          {
            "$ref": "#/components/schemas/Address_Group9"
          },
          {
            "$ref": "#/components/schemas/Address_HK"
          },
          {
            "$ref": "#/components/schemas/Address_ID"
          },
          {
            "$ref": "#/components/schemas/Address_IE"
          },
          {
            "$ref": "#/components/schemas/Address_JM"
          },
          {
            "$ref": "#/components/schemas/Address_JP"
          },
          {
            "$ref": "#/components/schemas/Address_KN"
          },
          {
            "$ref": "#/components/schemas/Address_KR"
          },
          {
            "$ref": "#/components/schemas/Address_KY"
          },
          {
            "$ref": "#/components/schemas/Address_MC"
          },
          {
            "$ref": "#/components/schemas/Address_MO"
          },
          {
            "$ref": "#/components/schemas/Address_NG"
          },
          {
            "$ref": "#/components/schemas/Address_NI"
          },
          {
            "$ref": "#/components/schemas/Address_NR"
          },
          {
            "$ref": "#/components/schemas/Address_PF"
          },
          {
            "$ref": "#/components/schemas/Address_SG"
          },
          {
            "$ref": "#/components/schemas/Address_SM"
          },
          {
            "$ref": "#/components/schemas/Address_TR"
          },
          {
            "$ref": "#/components/schemas/Address_TW"
          },
          {
            "$ref": "#/components/schemas/Address_US"
          },
          {
            "$ref": "#/components/schemas/Address_VG"
          }
        ],
        "title": "Address"
      },
      "Address_AE": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "AE"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "emirate": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The emirate of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Emirate",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "emirate"
        ]
      },
      "Address_AG": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "AG"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1"
        ]
      },
      "Address_BB": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "BB"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "parish": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The parish of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Parish",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "Address_BR": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "BR"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The state of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "State",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode",
          "state"
        ]
      },
      "Address_CA": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "CA"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "county": {
            "description": "The county of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "County",
            "type": "string"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode",
          "province"
        ]
      },
      "Address_CN": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "CN"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode",
          "province"
        ]
      },
      "Address_CO": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "CO"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "department": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The department of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Department",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "department"
        ]
      },
      "Address_CV": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "CV"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "island": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The island of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Island",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "Address_FR": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "CEDEX": {
            "description": "The CEDEX bureau of the address. Only applicable in certain countries.",
            "maxLength": 2,
            "nullable": true,
            "title": "CEDEX",
            "type": "string"
          },
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "FR"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode"
        ]
      },
      "Address_GI": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "GI"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1"
        ]
      },
      "Address_Group0": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "AD",
              "AF",
              "AI",
              "AL",
              "AZ",
              "BA",
              "BD",
              "BG",
              "BH",
              "BM",
              "BN",
              "BT",
              "CY",
              "CZ",
              "DO",
              "DZ",
              "EC",
              "EE",
              "EH",
              "ET",
              "FO",
              "GE",
              "GN",
              "GT",
              "GW",
              "HR",
              "HT",
              "IL",
              "IS",
              "JO",
              "KE",
              "KG",
              "KH",
              "KW",
              "LA",
              "LB",
              "LK",
              "LR",
              "LS",
              "LT",
              "LV",
              "MA",
              "MD",
              "ME",
              "MG",
              "MK",
              "MM",
              "MT",
              "MU",
              "MV",
              "MZ",
              "NE",
              "NP",
              "OM",
              "PK",
              "PY",
              "RO",
              "RS",
              "SA",
              "SI",
              "SK",
              "SN",
              "SZ",
              "TJ",
              "TM",
              "TN",
              "TZ",
              "VA",
              "VC",
              "ZM"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "Address_Group1": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "AS",
              "AU",
              "FM",
              "GU",
              "IN",
              "MH",
              "MP",
              "PW",
              "VI"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The state of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "State",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode",
          "state"
        ]
      },
      "Address_Group10": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "ES",
              "IT"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode",
          "province"
        ]
      },
      "Address_Group11": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "MX",
              "MY"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The state of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "State",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode"
        ]
      },
      "Address_Group12": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "NZ",
              "ZA"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode"
        ]
      },
      "Address_Group13": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "PA",
              "SR"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "Address_Group14": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "RU",
              "UA"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "oblast": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The oblast of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Oblast",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "oblast",
          "postalCode"
        ]
      },
      "Address_Group15": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "UM",
              "VE"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The state of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "State",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "state"
        ]
      },
      "Address_Group2": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "AO",
              "AQ",
              "AW",
              "BI",
              "BJ",
              "BO",
              "BV",
              "BW",
              "BZ",
              "CD",
              "CF",
              "CG",
              "CK",
              "CM",
              "DJ",
              "DM",
              "ER",
              "FJ",
              "GA",
              "GD",
              "GH",
              "GM",
              "GQ",
              "GY",
              "KM",
              "LC",
              "LY",
              "ML",
              "MR",
              "MS",
              "NA",
              "NU",
              "PS",
              "QA",
              "RW",
              "SB",
              "SL",
              "ST",
              "TD",
              "TF",
              "TG",
              "TK",
              "TL",
              "TO",
              "TT",
              "UG",
              "VU",
              "WS",
              "YE",
              "ZW"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "Address_Group3": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "AM",
              "AR",
              "BY",
              "CC",
              "CL",
              "CX",
              "EG",
              "HM",
              "KZ",
              "MN",
              "NF",
              "PE",
              "UY",
              "UZ",
              "VN"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "Address_Group4": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "AT",
              "BE",
              "CH",
              "DE",
              "DK",
              "FI",
              "FK",
              "GB",
              "GL",
              "GR",
              "GS",
              "HU",
              "IO",
              "LI",
              "LU",
              "NL",
              "NO",
              "PL",
              "PN",
              "PR",
              "PT",
              "SE",
              "SH",
              "SJ",
              "TC"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode"
        ]
      },
      "Address_Group5": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "BS",
              "KI",
              "SC",
              "TV"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "island": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The island of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Island",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "Address_Group6": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "BF",
              "CI",
              "MW"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "Address_Group7": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "CR",
              "HN",
              "IQ",
              "PG",
              "SO",
              "SV"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "province"
        ]
      },
      "Address_Group8": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "BL",
              "GF",
              "GP",
              "MF",
              "MQ",
              "NC",
              "PM",
              "RE",
              "WF",
              "YT"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode"
        ]
      },
      "Address_Group9": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "IR",
              "PH",
              "TH"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "Address_HK": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "area": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The area of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Area",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "HK"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "area"
        ]
      },
      "Address_ID": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "ID"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "province"
        ]
      },
      "Address_IE": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "IE"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "county": {
            "description": "The county of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "County",
            "type": "string"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "Address_JM": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "JM"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "parish": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The parish of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Parish",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "parish"
        ]
      },
      "Address_JP": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine1Kanji": {
            "description": "The kanji version of the first line of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1 kanji",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine2Kanji": {
            "description": "The kanji version of the second line of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2 kanji",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "cityKanji": {
            "description": "The kanji version of the city of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City kanji",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "JP"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "prefecture": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The prefecture of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Prefecture",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode",
          "prefecture"
        ]
      },
      "Address_KN": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "KN"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "island": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The island of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Island",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "island"
        ]
      },
      "Address_KR": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "KR"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "do_si",
          "postalCode"
        ]
      },
      "Address_KY": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "KY"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "island": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The island of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Island",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "island"
        ]
      },
      "Address_MC": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "CEDEX": {
            "description": "The CEDEX bureau of the address. Only applicable in certain countries.",
            "maxLength": 2,
            "nullable": true,
            "title": "CEDEX",
            "type": "string"
          },
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "MC"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "Address_MO": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "MO"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1"
        ]
      },
      "Address_NG": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "NG"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The state of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "State",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "Address_NI": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "NI"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "department": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The department of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Department",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "Address_NR": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "NR"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "district"
        ]
      },
      "Address_PF": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "PF"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "island": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The island of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Island",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "island",
          "postalCode"
        ]
      },
      "Address_SG": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "SG"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "postalCode"
        ]
      },
      "Address_SM": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "SM"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "postalCode"
        ]
      },
      "Address_TR": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "TR"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode"
        ]
      },
      "Address_TW": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "TW"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "county": {
            "description": "The county of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "County",
            "type": "string"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "county",
          "postalCode"
        ]
      },
      "Address_US": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "US"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "county": {
            "description": "The county of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "County",
            "type": "string"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The state of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "State",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode",
          "state"
        ]
      },
      "Address_VG": {
        "description": "An `Address` represents a postal address. The fields available on an `Address` will depend upon the `country` value for the `Address`.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "addressType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the address (Since 1.2.0)",
            "nullable": true,
            "title": "Address type",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "AddressType"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `Address` are applicable.",
            "enum": [
              "VG"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.2.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `Address`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this `Address`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "spatialPoint": {
            "$ref": "#/components/schemas/SpatialPoint",
            "description": "The latitude and longitude of this address, if it has been geocoded (Since 1.2.0)",
            "nullable": true,
            "title": "Spatial point",
            "x-gw-sinceVersion": "1.2.0"
          },
          "validUntil": {
            "description": "The date and time that the address is valid until (Since 1.2.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Valid until",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1"
        ]
      },
      "AssessmentContentItem": {
        "description": "Assessment content item (Since 1.4.0)",
        "properties": {
          "amountAfterLimit": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The amount payable on the item(s)",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "Amount after limit"
          },
          "contentCategory": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Assessment category for property",
            "nullable": true,
            "title": "Content category",
            "x-gw-filterBy": [
              "contentSchedule"
            ],
            "x-gw-typelist": "ContentLineItemCategory"
          },
          "contentSchedule": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Assessment schedule for property",
            "nullable": true,
            "title": "Content schedule",
            "x-gw-typelist": "ContentLineItemSchedule"
          },
          "dateAcquired": {
            "description": "Date when this item was acquired",
            "format": "date-time",
            "nullable": true,
            "title": "Date acquired",
            "type": "string"
          },
          "depreciationPercentage": {
            "description": "Depreciation percentage, per year",
            "format": "gw-bigdecimal",
            "nullable": true,
            "title": "Depreciation percentage",
            "type": "string"
          },
          "description": {
            "description": "Assessment line",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "incidentOrder": {
            "description": "Order of the item on the Incident",
            "nullable": true,
            "title": "Incident order",
            "type": "integer"
          },
          "itemComment": {
            "description": "Assessment item comment",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Item comment",
            "type": "string"
          },
          "numberOfItems": {
            "description": "Number of items",
            "nullable": true,
            "title": "Number of items",
            "type": "integer"
          },
          "purchaseCost": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "Purchase cost",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "Purchase cost"
          },
          "replacementValue": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "Estimated cost of replacing item(s)",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "Replacement value"
          }
        },
        "title": "Assessment content item",
        "type": "object",
        "x-gw-filterable": [
          "amountAfterLimit",
          "contentCategory",
          "contentSchedule",
          "dateAcquired",
          "numberOfItems",
          "purchaseCost",
          "replacementValue"
        ],
        "x-gw-sinceVersion": "1.4.0",
        "x-gw-sortable": [
          "amountAfterLimit",
          "contentCategory",
          "contentSchedule",
          "dateAcquired",
          "depreciationPercentage",
          "description",
          "incidentOrder",
          "itemComment",
          "numberOfItems",
          "purchaseCost",
          "replacementValue"
        ]
      },
      "AssessmentContentItemData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/AssessmentContentItem"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "AssessmentContentItemList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/AssessmentContentItemData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AssessmentContentItemRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AssessmentContentItemData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "AssessmentContentItemResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AssessmentContentItemData"
          }
        },
        "type": "object"
      },
      "AssessmentSummary": {
        "description": "Assessment summary (Since 1.4.0)",
        "properties": {
          "category": {
            "description": "The categorization of the score. For example, a fraud system may use low_risk, medium_risk, high_risk. A total loss evaluation system may use repairable, total_loss.",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Category",
            "type": "string",
            "x-gw-createOnly": true
          },
          "exposure": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `Exposure` that this assessment summary is associated with",
            "nullable": true,
            "title": "Exposure",
            "x-gw-createOnly": true,
            "x-gw-reference-schema": "Exposure",
            "x-gw-referenceType": "Exposure"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "normalizedScore": {
            "description": "The raw score mapped into the range 0-100. For example, a raw score of 320 out of 400 could map on a normalized score of 80.",
            "format": "gw-bigdecimal",
            "nullable": true,
            "title": "Normalized score",
            "type": "string",
            "x-gw-createOnly": true
          },
          "rawAssessmentReferenceId": {
            "description": "Reference ID to the raw assessment response",
            "maxLength": 256,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Raw assessment reference ID",
            "type": "string",
            "x-gw-createOnly": true
          },
          "recommendedActionCode": {
            "description": "A code corresponding to the recommended action, such as \"request_witness_statement\", \"block_payment\", \"initiate_recovery\", \"offer_cash_settlement\". This code could be used in business rules.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Recommended action code",
            "type": "string",
            "x-gw-createOnly": true
          },
          "recommendedActionDescription": {
            "description": "A human readable description of the recommended action, such as \"Take a recorded statement from the witness\"",
            "maxLength": 256,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Recommended action description",
            "type": "string",
            "x-gw-createOnly": true
          },
          "score": {
            "description": "The score of the `Claim` or `Exposure`",
            "format": "gw-bigdecimal",
            "nullable": true,
            "title": "Score",
            "type": "string",
            "x-gw-createOnly": true
          },
          "scoreDate": {
            "description": "The date and time the external system scored the `Claim` or `Exposure`",
            "format": "date-time",
            "title": "Score date",
            "type": "string",
            "x-gw-createOnly": true
          },
          "scorePercentile": {
            "description": "A value corresponding to where the score lies in the distribution of scores, as determined by the external system",
            "format": "gw-bigdecimal",
            "nullable": true,
            "title": "score percentile",
            "type": "string",
            "x-gw-createOnly": true
          },
          "tapId": {
            "description": "The assessment provider name",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "\\S",
            "title": "TAP ID",
            "type": "string",
            "x-gw-createOnly": true
          },
          "tapSubtypeId": {
            "description": "Designation to differentiate between distinct types of assessments. For example, line.",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "\\S",
            "title": "TAP subtype ID",
            "type": "string",
            "x-gw-createOnly": true
          }
        },
        "title": "Assessment summary",
        "type": "object",
        "x-gw-filterable": [
          "category",
          "normalizedScore",
          "rawAssessmentReferenceId",
          "recommendedActionCode",
          "score",
          "scoreDate",
          "scorePercentile",
          "tapId",
          "tapSubtypeId"
        ],
        "x-gw-requiredForCreate": [
          "category",
          "scoreDate",
          "tapId",
          "tapSubtypeId"
        ],
        "x-gw-sinceVersion": "1.4.0",
        "x-gw-sortable": [
          "category",
          "normalizedScore",
          "rawAssessmentReferenceId",
          "recommendedActionCode",
          "score",
          "scoreDate",
          "scorePercentile",
          "tapId",
          "tapSubtypeId"
        ]
      },
      "AssessmentSummaryData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/AssessmentSummary"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "AssessmentSummaryList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/AssessmentSummaryData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/AssessmentSummaryResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AssessmentSummaryRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AssessmentSummaryData"
          },
          "included": {
            "$ref": "#/components/schemas/AssessmentSummaryRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "AssessmentSummaryRequestInclusions": {
        "properties": {
          "Exposure": {
            "items": {
              "$ref": "#/components/schemas/ExposureData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AssessmentSummaryResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AssessmentSummaryData"
          },
          "included": {
            "$ref": "#/components/schemas/AssessmentSummaryResponseInclusions"
          }
        },
        "type": "object"
      },
      "AssessmentSummaryResponseInclusions": {
        "properties": {
          "Exposure": {
            "items": {
              "$ref": "#/components/schemas/ExposureData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Assignee": {
        "description": "An `Assignee` represents the target of an assignment action, such as a user/group combination, assignment queue, or automatic rule-based assignment",
        "properties": {
          "assigneeId": {
            "description": "Unique ID to reference this `Assignee` for includes (Since 1.4.0)",
            "readOnly": true,
            "title": "Assignee ID",
            "type": "string",
            "x-gw-sinceVersion": "1.4.0"
          },
          "autoAssign": {
            "description": "Set to `true` to indicate the assignment should be done automatically by the system. Cannot be combined with any other fields.",
            "title": "Auto assign",
            "type": "boolean"
          },
          "claimOwner": {
            "description": "Set to `true` to indicate that the element should be assigned to the same user and group that own the element's claim",
            "title": "Claim owner",
            "type": "boolean"
          },
          "groupId": {
            "description": "The ID of the `Group` that the resource should be assigned to. If specified without the `userId` field, the `User` within the `Group` is selected by assignment rules. If specified along with the `userId` field, that specific `User` is assigned the element.",
            "title": "Group ID",
            "type": "string"
          },
          "name": {
            "description": "A human-readable name for the type of assignment that this `Assignee` represents",
            "readOnly": true,
            "title": "Name",
            "type": "string"
          },
          "queueId": {
            "description": "The ID of the `Queue` that the resource should be assigned to. Cannot be combined with any other fields.",
            "title": "Queue ID",
            "type": "string"
          },
          "userId": {
            "description": "The ID of the `User` that the resource should be assigned to. The `groupId` field must also be specified if the `userId` field is specified, and the `User` must be a member of that `Group` and have permission to be assigned the element.",
            "title": "User ID",
            "type": "string"
          }
        },
        "title": "Assignee",
        "type": "object"
      },
      "AssigneeData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Assignee"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "AssigneeList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/AssigneeData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ActivityResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BaggageIncident": {
        "description": "Baggage incident (Since 1.5.0)",
        "properties": {
          "baggageMissingFrom": {
            "description": "The date/time the baggage was discovered to be missing",
            "format": "date-time",
            "nullable": true,
            "title": "Baggage missing from",
            "type": "string"
          },
          "baggageRecoveredOn": {
            "description": "The date/time the baggage was recovered",
            "format": "date-time",
            "nullable": true,
            "title": "Baggage recovered on",
            "type": "string"
          },
          "baggageType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of baggage",
            "nullable": true,
            "title": "Loss party",
            "x-gw-typelist": "BaggageType"
          },
          "carrierCompensated": {
            "description": "A `true` value indicates that the carrier compensated the claimant for the baggage loss or delay",
            "nullable": true,
            "title": "Carrier compensated",
            "type": "boolean"
          },
          "carrierCompensatedAmount": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The amount the carrier compensated for the baggage loss or delay",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "Carrier compensated amount"
          },
          "delayOnly": {
            "description": "A `true` value indicates that the incident is a delay only",
            "nullable": true,
            "title": "Delay only",
            "type": "boolean"
          },
          "description": {
            "description": "General description of the incident",
            "maxLength": 1333,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "lossParty": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of loss party, generally either the insured or a third-party",
            "nullable": true,
            "title": "Loss party",
            "x-gw-typelist": "LossPartyType"
          },
          "relatedTripRiskUnit": {
            "$ref": "#/components/schemas/PolicyObjectReference",
            "description": "The related trip risk unit",
            "nullable": true,
            "title": "Related trip risk unit",
            "x-gw-reference-schema": "TripRiskUnit",
            "x-gw-referenceType": "TripRiskUnit"
          },
          "severity": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The severity of the loss",
            "nullable": true,
            "title": "Severity",
            "x-gw-typelist": "SeverityType"
          }
        },
        "title": "Baggage incident",
        "type": "object",
        "x-gw-filterable": [
          "baggageMissingFrom",
          "baggageRecoveredOn",
          "baggageType",
          "carrierCompensated",
          "carrierCompensatedAmount",
          "delayOnly",
          "lossParty",
          "severity"
        ],
        "x-gw-sinceVersion": "1.5.0",
        "x-gw-sortable": [
          "baggageMissingFrom",
          "baggageRecoveredOn",
          "baggageType",
          "carrierCompensated",
          "carrierCompensatedAmount",
          "delayOnly",
          "description",
          "lossParty",
          "severity"
        ]
      },
      "BaggageIncidentData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/BaggageIncident"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "BaggageIncidentList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/BaggageIncidentData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BaggageIncidentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BaggageIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "BaggageIncidentResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BaggageIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "BatchRequest": {
        "description": "The body of a batch request",
        "properties": {
          "requests": {
            "description": "The array of subrequests",
            "items": {
              "$ref": "#/components/schemas/BatchSubRequest"
            },
            "title": "Requests",
            "type": "array"
          }
        },
        "required": [
          "requests"
        ],
        "title": "Batch request",
        "type": "object"
      },
      "BatchResponse": {
        "description": "The body of a response to a batch request. The `responses` field will have one element for every entry in the `requests` field on the request, and responses will appear in the same order.",
        "properties": {
          "responses": {
            "description": "The list of subresponses, appearing in the same order as the elements in the `requests` field of the request",
            "items": {
              "$ref": "#/components/schemas/BatchSubResponse"
            },
            "title": "Responses",
            "type": "array"
          }
        },
        "title": "Batch response",
        "type": "object"
      },
      "BatchSubRequest": {
        "description": "An individual subrequest within a batch request",
        "properties": {
          "body": {
            "description": "The body of the subrequest",
            "title": "Body",
            "type": "object"
          },
          "headers": {
            "description": "Headers that will be included as part of the subrequest. Any headers defined using this field will override header values inherited from the main request. Any headers present on the main request that are not defined in this list will be inherited when the subrequest is made, with the exception of the `GW-Checksum` header.",
            "items": {
              "$ref": "#/components/schemas/Header"
            },
            "title": "Headers",
            "type": "array"
          },
          "method": {
            "description": "The HTTP method for the subrequest",
            "enum": [
              "delete",
              "head",
              "get",
              "options",
              "patch",
              "post",
              "put"
            ],
            "title": "Method",
            "type": "string"
          },
          "onFail": {
            "description": "Controls whether or not subsequent subrequests are processed if this subrequest fails. The default behavior is to continue processing subrequests. The `abort` option specifies that all subsequent subrequests will be skipped.",
            "enum": [
              "abort",
              "continue"
            ],
            "title": "On fail",
            "type": "string"
          },
          "path": {
            "description": "The path for the subrequest. This path is relative to the root of the API hosting the batch endpoint. For example, if the batch endpoint is `<servlet>/rest/common/v1/batch`, then a path of `/activities` will mean a request against `<servlet>/rest/common/v1/activities`. The path must start with `/` and cannot contain whitespace.",
            "minLength": 1,
            "pattern": "^/[\\S]*$",
            "title": "Path",
            "type": "string"
          },
          "query": {
            "description": "The query string to use for the subrequest",
            "title": "Query",
            "type": "string"
          }
        },
        "required": [
          "method",
          "path"
        ],
        "title": "Batch subrequest",
        "type": "object"
      },
      "BatchSubResponse": {
        "description": "A subresponse to a batch subrequest",
        "properties": {
          "body": {
            "description": "The body of the subresponse",
            "title": "Body",
            "type": "object"
          },
          "code": {
            "description": "The HTTP status code for the subresponse",
            "title": "Code",
            "type": "integer"
          },
          "headers": {
            "description": "The headers returned for the subresponse",
            "items": {
              "$ref": "#/components/schemas/Header"
            },
            "title": "Headers",
            "type": "array"
          },
          "skipped": {
            "description": "A `true` value indicates that the corresponding subrequest was not processed due to a prior failed request that specified the `onFail` field with the `abort` option",
            "title": "Skipped",
            "type": "boolean"
          }
        },
        "title": "Batch subresponse",
        "type": "object"
      },
      "Building": {
        "description": "A building on a policy or claim",
        "properties": {
          "buildingNumber": {
            "description": "The alphanumeric number assigned to this building",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Building number",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "notes": {
            "description": "Any comments regarding this building",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Notes",
            "type": "string"
          },
          "policySystemId": {
            "description": "The unique identifier of this element within the policy system",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "\\S",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          }
        },
        "title": "Building",
        "type": "object"
      },
      "Check": {
        "description": "A paper check or electronic funds transfer issued to a particular payee to deliver one or more payments (Since 1.3.0)",
        "properties": {
          "bankAccount": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of bank account that will be used as the source for the check",
            "nullable": true,
            "title": "Bank account",
            "x-gw-defaultViews": [
              "detail"
            ],
            "x-gw-typelist": "BankAccount"
          },
          "checkBatching": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "How the check should be batched for sending",
            "nullable": true,
            "title": "Check batching",
            "x-gw-defaultViews": [
              "detail"
            ],
            "x-gw-typelist": "CheckBatching"
          },
          "checkInstructions": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Special handling instructions for the check",
            "nullable": true,
            "title": "Check instructions",
            "x-gw-defaultViews": [
              "detail"
            ],
            "x-gw-typelist": "CheckHandlingInstructions"
          },
          "checkNumber": {
            "description": "The identifier for the check or the electronic funds transfer",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Check number",
            "type": "string"
          },
          "checkType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Indicates if the check is the primary or secondary check within a check group",
            "readOnly": true,
            "title": "Check type",
            "x-gw-defaultViews": [
              "detail"
            ],
            "x-gw-typelist": "CheckType"
          },
          "claimContact": {
            "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
            "description": "A reference to the `ClaimContact` that represents the claimant the check is being written to",
            "nullable": true,
            "title": "Claim contact",
            "x-gw-defaultViews": [
              "detail"
            ],
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact"
          },
          "comments": {
            "description": "Comments about the check",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Comments",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "dateOfService": {
            "description": "The date and time the service being paid for was performed, if the check is for a service",
            "format": "date-time",
            "nullable": true,
            "title": "Date of service",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "deductionType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of deduction for a secondary check. Only applicable if `checkType` is `secondary`.",
            "nullable": true,
            "title": "Deduction type",
            "x-gw-defaultViews": [
              "detail"
            ],
            "x-gw-typelist": "DeductionType"
          },
          "deliveryMethod": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The requested delivery method for the check",
            "nullable": true,
            "title": "Delivery method",
            "x-gw-defaultViews": [
              "detail"
            ],
            "x-gw-typelist": "DeliveryMethod"
          },
          "enteredTime": {
            "description": "The date and time that the check was actually created. Note that this is not necessarily the same as the time that the `Check` element was created in the claims system.",
            "format": "date-time",
            "nullable": true,
            "title": "Entered time",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "grossAmount": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The gross amount of the check, before any deductions",
            "readOnly": true,
            "title": "Gross amount"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "invoiceNumber": {
            "description": "The invoice number associated with this check",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Invoice number",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "issueDate": {
            "description": "The date and time that the check was issued",
            "format": "date-time",
            "nullable": true,
            "title": "Issue date",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "mailTo": {
            "description": "The name of the person or company that the check is mailed to",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Mail to",
            "type": "string"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "The address of the person or company that the check is mailed to",
            "nullable": true,
            "title": "Mailing address"
          },
          "memo": {
            "description": "The memo to include on the check",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Memo",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "payTo": {
            "description": "The person or company the check is made out to",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Pay to",
            "type": "string"
          },
          "payees": {
            "description": "The list of recipients of the check",
            "items": {
              "$ref": "#/components/schemas/Payee"
            },
            "minItems": 1,
            "title": "Payees",
            "type": "array"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The requested payment method for the check",
            "nullable": true,
            "title": "Payment method",
            "x-gw-defaultViews": [
              "detail"
            ],
            "x-gw-typelist": "PaymentMethod"
          },
          "payments": {
            "description": "The list of `Transaction` elements that detail the payments included with this check",
            "items": {
              "$ref": "#/components/schemas/SimpleReference",
              "x-gw-reference-schema": "Transaction",
              "x-gw-referenceType": "Payment"
            },
            "readOnly": true,
            "title": "Payments",
            "type": "array",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "paymentsToWrite": {
            "description": "The list of `Payments` used to populate a check during creation or edit",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "minItems": 1,
            "title": "Payments to create",
            "type": "array",
            "x-gw-createOnly": true
          },
          "portion": {
            "$ref": "#/components/schemas/CheckPortion",
            "description": "The amount of the primary payment that is allocated to this secondary check. Only applicable if `checkType` is `secondary`.",
            "nullable": true,
            "title": "Portion",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "reportability": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Indicates whether the check should be reported as income to the appropriate tax agency. Only applicable if `checkType` is `primary`.",
            "nullable": true,
            "title": "Reportability",
            "x-gw-defaultViews": [
              "detail"
            ],
            "x-gw-typelist": "ReportabilityType"
          },
          "reportableAmount": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The amount of the check that should be reported as income to the appropriate tax agency, if the check is considered to be reportable",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": -1.0E16,
            "readOnly": true,
            "title": "Reportable amount",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "scheduledSendDate": {
            "description": "The date that the check is scheduled to be sent. The scheduled send date begins at the start of this date in the server's timezone.",
            "format": "date",
            "nullable": true,
            "title": "Scheduled send date",
            "type": "string"
          },
          "scheduledSendDateTime": {
            "description": "The date and time that the check is scheduled to be sent. This is an instant that occurs at midnight in the server's time zone.",
            "format": "date-time",
            "readOnly": true,
            "title": "Scheduled send date and time",
            "type": "string"
          },
          "servicePdEnd": {
            "description": "The end date and time of the service period for the check",
            "format": "date-time",
            "nullable": true,
            "title": "Service period end",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "servicePdStart": {
            "description": "The start date and time of the service period for the check",
            "format": "date-time",
            "nullable": true,
            "title": "Service period start",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The status of the check",
            "readOnly": true,
            "title": "Status",
            "x-gw-typelist": "TransactionStatus"
          }
        },
        "title": "Check",
        "type": "object",
        "x-gw-filterable": [
          "bankAccount",
          "checkBatching",
          "checkInstructions",
          "checkNumber",
          "checkType",
          "deductionType",
          "deliveryMethod",
          "enteredTime",
          "invoiceNumber",
          "issueDate",
          "mailTo",
          "memo",
          "payTo",
          "paymentMethod",
          "reportability",
          "reportableAmount",
          "scheduledSendDate",
          "scheduledSendDateTime",
          "servicePdEnd",
          "servicePdStart",
          "status"
        ],
        "x-gw-requiredForCreate": [
          "payees"
        ],
        "x-gw-sinceVersion": "1.3.0",
        "x-gw-sortable": [
          "bankAccount",
          "checkBatching",
          "checkInstructions",
          "checkNumber",
          "checkType",
          "deductionType",
          "deliveryMethod",
          "enteredTime",
          "invoiceNumber",
          "issueDate",
          "mailTo",
          "memo",
          "payTo",
          "paymentMethod",
          "reportability",
          "reportableAmount",
          "scheduledSendDate",
          "scheduledSendDateTime",
          "servicePdEnd",
          "servicePdStart",
          "status"
        ]
      },
      "CheckData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Check"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "CheckList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/CheckData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CheckPortion": {
        "description": "The amount of multi-payee check that is allocated to particular secondary `Check` (Since 1.3.0)",
        "properties": {
          "fixedAmount": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The fixed amount to allocate to this check. Setting this value will null out the value of the `percentage` field.",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": -1.0E16,
            "title": "Fixed amount"
          },
          "percentage": {
            "description": "The percentage of the overall amount to allocate to this check. Setting this value will null out the value of the `fixedAmount` field.",
            "format": "gw-bigdecimal",
            "title": "Percentage",
            "type": "string"
          }
        },
        "title": "Check portion",
        "type": "object",
        "x-gw-sinceVersion": "1.3.0"
      },
      "CheckRecurrence": {
        "description": "Defines the recurrence schedule for a `Check` (Since 1.3.0)",
        "properties": {
          "firstDueDate": {
            "description": "The due date and time of the first check in the recurrence",
            "format": "date-time",
            "title": "First due date",
            "type": "string"
          },
          "issuanceDateOffset": {
            "description": "The number of days before the due date that a check should be issued",
            "title": "Issuance date offset",
            "type": "integer"
          },
          "monthlyFrequency": {
            "description": "The number of months between recurring checks. For example, a value of `1` will create a check every month, and a value of `3` will create a check every three months. Only applicable if `subtype` is `MonthlyCheckRecurrence`.",
            "exclusiveMinimum": true,
            "minimum": 0,
            "title": "Monthly frequency",
            "type": "integer"
          },
          "numChecks": {
            "description": "The number of checks in the recurrence",
            "exclusiveMinimum": true,
            "minimum": 0,
            "title": "Number of checks",
            "type": "integer"
          },
          "recurrenceDate": {
            "description": "The day of the month on which the check is due. For example, a value of `15` would result in recurring checks being due on the 15th day of the month. Only applicable if `subtype` is `MonthlyCheckRecurrence`. If `recurrenceDate` is set, `recurrenceDay` and `recurrenceWeek` should not be set.",
            "nullable": true,
            "title": "Recurrence date",
            "type": "integer"
          },
          "recurrenceDay": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The day of the week on which the check is due",
            "title": "Recurrence day",
            "x-gw-typelist": "RecurrenceDay"
          },
          "recurrenceWeek": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The week of the month on which the check is due. Only applicable if `subtype` is `MonthlyCheckRecurrence`.",
            "nullable": true,
            "title": "Recurrence week",
            "x-gw-typelist": "RecurrenceWeek"
          },
          "subtype": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of recurrence",
            "title": "Subtype",
            "x-gw-typelist": "CheckRecurrence"
          },
          "weeklyFrequency": {
            "description": "The number of weeks between recurring checks. For example, a value of `1` will create a check every week, and a value of `4` will create a check every four weeks. Only applicable if `subtype` is `WeeklyCheckRecurrence`.",
            "exclusiveMinimum": true,
            "minimum": 0,
            "title": "Weekly frequency",
            "type": "integer"
          }
        },
        "title": "Check recurrence",
        "type": "object",
        "x-gw-requiredForCreate": [
          "firstDueDate",
          "numChecks",
          "subtype"
        ],
        "x-gw-sinceVersion": "1.3.0"
      },
      "CheckRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CheckData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "CheckResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CheckData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "CheckSet": {
        "description": "A set of related checks that are submitted together for approval (Since 1.3.0)",
        "properties": {
          "approvalDate": {
            "description": "The date and time when this check set was approved or rejected",
            "format": "date-time",
            "readOnly": true,
            "title": "Approval date",
            "type": "string"
          },
          "approvalStatus": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Whether this check set has been approved, rejected, or is still awaiting approval",
            "readOnly": true,
            "title": "Approval status",
            "x-gw-typelist": "ApprovalStatus"
          },
          "checks": {
            "description": "A list of references to `Check` elements that were created as part of this check set",
            "items": {
              "$ref": "#/components/schemas/SimpleReference",
              "x-gw-reference-schema": "Check",
              "x-gw-referenceType": "Check"
            },
            "readOnly": true,
            "title": "Checks",
            "type": "array"
          },
          "createTime": {
            "description": "The date and time when this `CheckSet` was created",
            "format": "date-time",
            "readOnly": true,
            "title": "Create time",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "primaryCheckToWrite": {
            "$ref": "#/components/schemas/Check",
            "description": "When creating a new `CheckSet`, this represents the primary check in the check set. After creation, this will be the primary check with the earliest scheduled send date, if this check set defines a recurrence.",
            "title": "First primary check"
          },
          "recurrence": {
            "$ref": "#/components/schemas/CheckRecurrence",
            "description": "Details of the recurrence schedule, if this set of checks should recur",
            "nullable": true,
            "title": "Recurrence"
          },
          "requestingUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` that represents the caller that submitted this check set for approval",
            "readOnly": true,
            "title": "Requesting user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "secondaryChecksToWrite": {
            "description": "When creating a new `CheckSet`, this represents the list of secondary checks in the check set. After creation, this will be the secondary checks with the earliest scheduled send date, if this check set defines a recurrence.",
            "items": {
              "$ref": "#/components/schemas/Check"
            },
            "title": "First secondary checks",
            "type": "array"
          }
        },
        "title": "Check set",
        "type": "object",
        "x-gw-filterable": [
          "approvalStatus"
        ],
        "x-gw-requiredForCreate": [
          "primaryCheckToWrite"
        ],
        "x-gw-sinceVersion": "1.3.0",
        "x-gw-sortable": [
          "approvalDate",
          "approvalStatus",
          "createTime"
        ]
      },
      "CheckSetData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/CheckSet"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "CheckSetList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/CheckSetData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CheckSetRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CheckSetData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "CheckSetResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CheckSetData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "Claim": {
        "description": "An insurance claim",
        "properties": {
          "allValidationLevelsReached": {
            "description": "The list of all the validation levels that this claim has passed (Since 1.3.0)",
            "items": {
              "$ref": "#/components/schemas/TypeKeyReference",
              "x-gw-typelist": "ValidationLevel"
            },
            "readOnly": true,
            "title": "All validation levels reached",
            "type": "array",
            "x-gw-sinceVersion": "1.3.0"
          },
          "arson": {
            "description": "A `true` value indicates that this claim involves arson",
            "nullable": true,
            "title": "Arson",
            "type": "boolean"
          },
          "assignedByUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` who last assigned or re-assigned this claim",
            "readOnly": true,
            "title": "Assigned by user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "assignedGroup": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `Group` that this claim is currently assigned to",
            "readOnly": true,
            "title": "Assigned group",
            "x-gw-reference-schema": "Group",
            "x-gw-referenceType": "Group"
          },
          "assignedQueue": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `AssignableQueue` that this claim is currently assigned to",
            "readOnly": true,
            "title": "Assigned queue",
            "x-gw-reference-schema": "AssignableQueue",
            "x-gw-referenceType": "AssignableQueue"
          },
          "assignedUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` that this claim is currently assigned to",
            "readOnly": true,
            "title": "Assigned user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "assignmentStatus": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The current assignment status of this claim, such as `assigned` or `unassigned`",
            "readOnly": true,
            "title": "Assignment status",
            "x-gw-typelist": "AssignmentStatus"
          },
          "claimNumber": {
            "description": "The claim number assigned to this claim",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Claim number",
            "type": "string"
          },
          "closeDate": {
            "description": "The date and time when this claim was closed",
            "format": "date-time",
            "readOnly": true,
            "title": "Close date",
            "type": "string"
          },
          "closedOutcome": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The outcome reached when closing this claim",
            "readOnly": true,
            "title": "Closed outcome",
            "x-gw-typelist": "ClaimClosedOutcomeType"
          },
          "coverageInQuestion": {
            "description": "A `true` value indicates that the claim might not be covered by the insured's policy (Since 1.2.0)",
            "title": "Coverage in question",
            "type": "boolean",
            "x-gw-sinceVersion": "1.2.0"
          },
          "description": {
            "description": "A description of the accident or loss",
            "maxLength": 1333,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "faultRating": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "A determination of who is considered to be at fault",
            "title": "Fault rating",
            "x-gw-typelist": "FaultRating"
          },
          "filterPropertyRiskUnits": {
            "description": "A list of `policySystemId` values for property risk units to include when retrieving the policy",
            "items": {
              "type": "string"
            },
            "title": "Filter property risk units",
            "type": "array",
            "x-gw-createOnly": true
          },
          "filterVehicleRiskUnits": {
            "description": "A list of `policySystemId` values for vehicle risk units to include when retrieving the policy",
            "items": {
              "type": "string"
            },
            "title": "Filter vehicle risk units",
            "type": "array",
            "x-gw-createOnly": true
          },
          "fireDepartmentResponded": {
            "description": "A `true` value indicates that the fire department responded to the damage",
            "nullable": true,
            "title": "Fire department responded",
            "type": "boolean"
          },
          "fireSource": {
            "description": "A description of the source of the fire that caused this claim",
            "maxLength": 250,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Fire source",
            "type": "string"
          },
          "flagged": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Whether this claim has been flagged",
            "title": "Flagged",
            "x-gw-typelist": "FlaggedType"
          },
          "hasWaterBeenTurnedOff": {
            "description": "A `true` value indicates that the water to the house or room affected by water damage has been turned off",
            "nullable": true,
            "title": "Has the water been turned off",
            "type": "boolean"
          },
          "howReported": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "How the claim was reported",
            "nullable": true,
            "title": "How reported",
            "x-gw-typelist": "HowReportedType"
          },
          "howWasFireDiscovered": {
            "description": "A description of how the fire that caused this claim was discovered",
            "maxLength": 250,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "How was fire discovered",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "incidentOnly": {
            "description": "A `true` value indicates that this claim represents an incident report only and should not be processed further",
            "title": "Incident only",
            "type": "boolean"
          },
          "insured": {
            "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
            "description": "A reference to the `ClaimContact` that represents the insured",
            "readOnly": true,
            "title": "Insured",
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact"
          },
          "isAnyoneInjured": {
            "description": "A `true` value indicates that someone was injured as a result of the loss",
            "nullable": true,
            "title": "Is anyone injured",
            "type": "boolean"
          },
          "isHomeHabitable": {
            "description": "A `true` value indicates that the home is still habitable. Used only for claims involving damage to the insured's home.",
            "nullable": true,
            "title": "Is the home habitable",
            "type": "boolean"
          },
          "isHomeSecure": {
            "description": "A `true` value indicates that the home is still secure. Used only for claims involving damage to the insured's home.",
            "nullable": true,
            "title": "Is the home secure",
            "type": "boolean"
          },
          "isRoofProtected": {
            "description": "A `true` value indicates that water damage to the roof is covered",
            "nullable": true,
            "title": "Is the roof protected",
            "type": "boolean"
          },
          "jurisdiction": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The jurisdiction that covers this loss. This jurisdiction may differ from the jurisdiction in which the loss occurred.",
            "title": "Jurisdiction",
            "x-gw-typelist": "Jurisdiction"
          },
          "lobCode": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The line of business code for the policy line this claim is made against. If the policy only contains a single line of business, this will be set automatically when the claim is created, otherwise it must be specified manually.",
            "title": "Line of business code",
            "x-gw-createOnly": true,
            "x-gw-filterBy": [
              "lossType"
            ],
            "x-gw-typelist": "LOBCode"
          },
          "lossCause": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The cause of the loss",
            "nullable": true,
            "title": "Loss cause",
            "x-gw-filterBy": [
              "lossType"
            ],
            "x-gw-typelist": "LossCause"
          },
          "lossDate": {
            "description": "The date and time when the loss occurred",
            "format": "date-time",
            "title": "Loss date",
            "type": "string",
            "x-gw-before": "now",
            "x-gw-createOnly": true
          },
          "lossLocation": {
            "$ref": "#/components/schemas/ClaimAddress",
            "description": "The location of the loss",
            "title": "Loss location",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "lossLocationCode": {
            "description": "Location code for the loss location (Since 1.5.0)",
            "maxLength": 5,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Loss location code",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ],
            "x-gw-sinceVersion": "1.5.0"
          },
          "lossType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of loss represented by this claim",
            "readOnly": true,
            "title": "Loss type",
            "x-gw-typelist": "LossType"
          },
          "mainContact": {
            "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
            "description": "A reference to the `ClaimContact` that represents the main contact for this claim",
            "title": "Main contact",
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact"
          },
          "policyAddresses": {
            "description": "A list of addresses from the policy, which can then be used to set values of other fields such as the `lossLocation`",
            "items": {
              "$ref": "#/components/schemas/ClaimAddress"
            },
            "readOnly": true,
            "title": "Policy addresses",
            "type": "array",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "policyNumber": {
            "description": "The policy number of the insurance policy this claim is filed against",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Policy number",
            "type": "string",
            "x-gw-createOnly": true
          },
          "reopenDate": {
            "description": "The date and time when this claim was reopened (Since 1.6.0)",
            "format": "date-time",
            "readOnly": true,
            "title": "Reopen date",
            "type": "string",
            "x-gw-sinceVersion": "1.6.0"
          },
          "reopenedReason": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The reason for reopening this claim (Since 1.6.0)",
            "readOnly": true,
            "title": "Reopened reason",
            "x-gw-sinceVersion": "1.6.0",
            "x-gw-typelist": "ClaimReopenedReason"
          },
          "reportedByType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The relation between the insured party and the claim reporter",
            "nullable": true,
            "title": "Reported by type",
            "x-gw-typelist": "PersonRelationType"
          },
          "reportedDate": {
            "description": "The date and time when the claim was reported",
            "format": "date-time",
            "nullable": true,
            "title": "Reported date",
            "type": "string",
            "x-gw-before": "now"
          },
          "reporter": {
            "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
            "description": "A reference to the `ClaimContact` that represents the person who reported this claim",
            "nullable": true,
            "title": "Main contact",
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact"
          },
          "segment": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The segment assigned to this claim",
            "readOnly": true,
            "title": "Segment",
            "x-gw-typelist": "ClaimSegment"
          },
          "siuStatus": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The special investigation unit status of this claim (Since 1.2.0)",
            "readOnly": true,
            "title": "SIU status",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "SIUStatus"
          },
          "smokeDamageOnly": {
            "description": "A `true` value indicates that damage was caused only by smoke and not by fire",
            "nullable": true,
            "title": "Smoke damage only",
            "type": "boolean"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The status of the claim, such as `open` or `closed`",
            "readOnly": true,
            "title": "State",
            "x-gw-typelist": "ClaimState"
          },
          "strategy": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The strategy assigned to this claim",
            "readOnly": true,
            "title": "Strategy",
            "x-gw-typelist": "ClaimStrategy"
          },
          "validationLevel": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The validation level of this claim. If the claim `state` is `open`, edits to this claim must continue to pass this validation rules at this level and all lower validation levels.",
            "readOnly": true,
            "title": "Validation level",
            "x-gw-typelist": "ValidationLevel"
          },
          "waterSource": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The source of the water that is entering the damaged property",
            "nullable": true,
            "title": "Water source",
            "x-gw-typelist": "WaterSource"
          },
          "witnesses": {
            "description": "A list of witnesses relevant to this claim",
            "items": {
              "$ref": "#/components/schemas/Witness"
            },
            "title": "Witnesses",
            "type": "array"
          }
        },
        "title": "Claim",
        "type": "object",
        "x-gw-filterable": [
          "claimNumber",
          "lossDate",
          "state"
        ],
        "x-gw-requiredForCreate": [
          "lossDate",
          "policyNumber"
        ],
        "x-gw-sortable": [
          "assignedUser",
          "claimNumber",
          "lossDate"
        ]
      },
      "ClaimAddress": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "discriminator": {
          "mapping": {
            "AD": "#/components/schemas/ClaimAddress_Group0",
            "AE": "#/components/schemas/ClaimAddress_AE",
            "AF": "#/components/schemas/ClaimAddress_Group0",
            "AG": "#/components/schemas/ClaimAddress_AG",
            "AI": "#/components/schemas/ClaimAddress_Group0",
            "AL": "#/components/schemas/ClaimAddress_Group0",
            "AM": "#/components/schemas/ClaimAddress_Group3",
            "AO": "#/components/schemas/ClaimAddress_Group2",
            "AQ": "#/components/schemas/ClaimAddress_Group2",
            "AR": "#/components/schemas/ClaimAddress_Group3",
            "AS": "#/components/schemas/ClaimAddress_Group1",
            "AT": "#/components/schemas/ClaimAddress_Group4",
            "AU": "#/components/schemas/ClaimAddress_Group1",
            "AW": "#/components/schemas/ClaimAddress_Group2",
            "AZ": "#/components/schemas/ClaimAddress_Group0",
            "BA": "#/components/schemas/ClaimAddress_Group0",
            "BB": "#/components/schemas/ClaimAddress_BB",
            "BD": "#/components/schemas/ClaimAddress_Group0",
            "BE": "#/components/schemas/ClaimAddress_Group4",
            "BF": "#/components/schemas/ClaimAddress_Group6",
            "BG": "#/components/schemas/ClaimAddress_Group0",
            "BH": "#/components/schemas/ClaimAddress_Group0",
            "BI": "#/components/schemas/ClaimAddress_Group2",
            "BJ": "#/components/schemas/ClaimAddress_Group2",
            "BL": "#/components/schemas/ClaimAddress_Group8",
            "BM": "#/components/schemas/ClaimAddress_Group0",
            "BN": "#/components/schemas/ClaimAddress_Group0",
            "BO": "#/components/schemas/ClaimAddress_Group2",
            "BR": "#/components/schemas/ClaimAddress_BR",
            "BS": "#/components/schemas/ClaimAddress_Group5",
            "BT": "#/components/schemas/ClaimAddress_Group0",
            "BV": "#/components/schemas/ClaimAddress_Group2",
            "BW": "#/components/schemas/ClaimAddress_Group2",
            "BY": "#/components/schemas/ClaimAddress_Group3",
            "BZ": "#/components/schemas/ClaimAddress_Group2",
            "CA": "#/components/schemas/ClaimAddress_CA",
            "CC": "#/components/schemas/ClaimAddress_Group3",
            "CD": "#/components/schemas/ClaimAddress_Group2",
            "CF": "#/components/schemas/ClaimAddress_Group2",
            "CG": "#/components/schemas/ClaimAddress_Group2",
            "CH": "#/components/schemas/ClaimAddress_Group4",
            "CI": "#/components/schemas/ClaimAddress_Group6",
            "CK": "#/components/schemas/ClaimAddress_Group2",
            "CL": "#/components/schemas/ClaimAddress_Group3",
            "CM": "#/components/schemas/ClaimAddress_Group2",
            "CN": "#/components/schemas/ClaimAddress_CN",
            "CO": "#/components/schemas/ClaimAddress_CO",
            "CR": "#/components/schemas/ClaimAddress_Group7",
            "CV": "#/components/schemas/ClaimAddress_CV",
            "CX": "#/components/schemas/ClaimAddress_Group3",
            "CY": "#/components/schemas/ClaimAddress_Group0",
            "CZ": "#/components/schemas/ClaimAddress_Group0",
            "DE": "#/components/schemas/ClaimAddress_Group4",
            "DJ": "#/components/schemas/ClaimAddress_Group2",
            "DK": "#/components/schemas/ClaimAddress_Group4",
            "DM": "#/components/schemas/ClaimAddress_Group2",
            "DO": "#/components/schemas/ClaimAddress_Group0",
            "DZ": "#/components/schemas/ClaimAddress_Group0",
            "EC": "#/components/schemas/ClaimAddress_Group0",
            "EE": "#/components/schemas/ClaimAddress_Group0",
            "EG": "#/components/schemas/ClaimAddress_Group3",
            "EH": "#/components/schemas/ClaimAddress_Group0",
            "ER": "#/components/schemas/ClaimAddress_Group2",
            "ES": "#/components/schemas/ClaimAddress_Group10",
            "ET": "#/components/schemas/ClaimAddress_Group0",
            "FI": "#/components/schemas/ClaimAddress_Group4",
            "FJ": "#/components/schemas/ClaimAddress_Group2",
            "FK": "#/components/schemas/ClaimAddress_Group4",
            "FM": "#/components/schemas/ClaimAddress_Group1",
            "FO": "#/components/schemas/ClaimAddress_Group0",
            "FR": "#/components/schemas/ClaimAddress_FR",
            "GA": "#/components/schemas/ClaimAddress_Group2",
            "GB": "#/components/schemas/ClaimAddress_Group4",
            "GD": "#/components/schemas/ClaimAddress_Group2",
            "GE": "#/components/schemas/ClaimAddress_Group0",
            "GF": "#/components/schemas/ClaimAddress_Group8",
            "GH": "#/components/schemas/ClaimAddress_Group2",
            "GI": "#/components/schemas/ClaimAddress_GI",
            "GL": "#/components/schemas/ClaimAddress_Group4",
            "GM": "#/components/schemas/ClaimAddress_Group2",
            "GN": "#/components/schemas/ClaimAddress_Group0",
            "GP": "#/components/schemas/ClaimAddress_Group8",
            "GQ": "#/components/schemas/ClaimAddress_Group2",
            "GR": "#/components/schemas/ClaimAddress_Group4",
            "GS": "#/components/schemas/ClaimAddress_Group4",
            "GT": "#/components/schemas/ClaimAddress_Group0",
            "GU": "#/components/schemas/ClaimAddress_Group1",
            "GW": "#/components/schemas/ClaimAddress_Group0",
            "GY": "#/components/schemas/ClaimAddress_Group2",
            "HK": "#/components/schemas/ClaimAddress_HK",
            "HM": "#/components/schemas/ClaimAddress_Group3",
            "HN": "#/components/schemas/ClaimAddress_Group7",
            "HR": "#/components/schemas/ClaimAddress_Group0",
            "HT": "#/components/schemas/ClaimAddress_Group0",
            "HU": "#/components/schemas/ClaimAddress_Group4",
            "ID": "#/components/schemas/ClaimAddress_ID",
            "IE": "#/components/schemas/ClaimAddress_IE",
            "IL": "#/components/schemas/ClaimAddress_Group0",
            "IN": "#/components/schemas/ClaimAddress_Group1",
            "IO": "#/components/schemas/ClaimAddress_Group4",
            "IQ": "#/components/schemas/ClaimAddress_Group7",
            "IR": "#/components/schemas/ClaimAddress_Group9",
            "IS": "#/components/schemas/ClaimAddress_Group0",
            "IT": "#/components/schemas/ClaimAddress_Group10",
            "JM": "#/components/schemas/ClaimAddress_JM",
            "JO": "#/components/schemas/ClaimAddress_Group0",
            "JP": "#/components/schemas/ClaimAddress_JP",
            "KE": "#/components/schemas/ClaimAddress_Group0",
            "KG": "#/components/schemas/ClaimAddress_Group0",
            "KH": "#/components/schemas/ClaimAddress_Group0",
            "KI": "#/components/schemas/ClaimAddress_Group5",
            "KM": "#/components/schemas/ClaimAddress_Group2",
            "KN": "#/components/schemas/ClaimAddress_KN",
            "KR": "#/components/schemas/ClaimAddress_KR",
            "KW": "#/components/schemas/ClaimAddress_Group0",
            "KY": "#/components/schemas/ClaimAddress_KY",
            "KZ": "#/components/schemas/ClaimAddress_Group3",
            "LA": "#/components/schemas/ClaimAddress_Group0",
            "LB": "#/components/schemas/ClaimAddress_Group0",
            "LC": "#/components/schemas/ClaimAddress_Group2",
            "LI": "#/components/schemas/ClaimAddress_Group4",
            "LK": "#/components/schemas/ClaimAddress_Group0",
            "LR": "#/components/schemas/ClaimAddress_Group0",
            "LS": "#/components/schemas/ClaimAddress_Group0",
            "LT": "#/components/schemas/ClaimAddress_Group0",
            "LU": "#/components/schemas/ClaimAddress_Group4",
            "LV": "#/components/schemas/ClaimAddress_Group0",
            "LY": "#/components/schemas/ClaimAddress_Group2",
            "MA": "#/components/schemas/ClaimAddress_Group0",
            "MC": "#/components/schemas/ClaimAddress_MC",
            "MD": "#/components/schemas/ClaimAddress_Group0",
            "ME": "#/components/schemas/ClaimAddress_Group0",
            "MF": "#/components/schemas/ClaimAddress_Group8",
            "MG": "#/components/schemas/ClaimAddress_Group0",
            "MH": "#/components/schemas/ClaimAddress_Group1",
            "MK": "#/components/schemas/ClaimAddress_Group0",
            "ML": "#/components/schemas/ClaimAddress_Group2",
            "MM": "#/components/schemas/ClaimAddress_Group0",
            "MN": "#/components/schemas/ClaimAddress_Group3",
            "MO": "#/components/schemas/ClaimAddress_MO",
            "MP": "#/components/schemas/ClaimAddress_Group1",
            "MQ": "#/components/schemas/ClaimAddress_Group8",
            "MR": "#/components/schemas/ClaimAddress_Group2",
            "MS": "#/components/schemas/ClaimAddress_Group2",
            "MT": "#/components/schemas/ClaimAddress_Group0",
            "MU": "#/components/schemas/ClaimAddress_Group0",
            "MV": "#/components/schemas/ClaimAddress_Group0",
            "MW": "#/components/schemas/ClaimAddress_Group6",
            "MX": "#/components/schemas/ClaimAddress_Group11",
            "MY": "#/components/schemas/ClaimAddress_Group11",
            "MZ": "#/components/schemas/ClaimAddress_Group0",
            "NA": "#/components/schemas/ClaimAddress_Group2",
            "NC": "#/components/schemas/ClaimAddress_Group8",
            "NE": "#/components/schemas/ClaimAddress_Group0",
            "NF": "#/components/schemas/ClaimAddress_Group3",
            "NG": "#/components/schemas/ClaimAddress_NG",
            "NI": "#/components/schemas/ClaimAddress_NI",
            "NL": "#/components/schemas/ClaimAddress_Group4",
            "NO": "#/components/schemas/ClaimAddress_Group4",
            "NP": "#/components/schemas/ClaimAddress_Group0",
            "NR": "#/components/schemas/ClaimAddress_NR",
            "NU": "#/components/schemas/ClaimAddress_Group2",
            "NZ": "#/components/schemas/ClaimAddress_Group12",
            "OM": "#/components/schemas/ClaimAddress_Group0",
            "PA": "#/components/schemas/ClaimAddress_Group13",
            "PE": "#/components/schemas/ClaimAddress_Group3",
            "PF": "#/components/schemas/ClaimAddress_PF",
            "PG": "#/components/schemas/ClaimAddress_Group7",
            "PH": "#/components/schemas/ClaimAddress_Group9",
            "PK": "#/components/schemas/ClaimAddress_Group0",
            "PL": "#/components/schemas/ClaimAddress_Group4",
            "PM": "#/components/schemas/ClaimAddress_Group8",
            "PN": "#/components/schemas/ClaimAddress_Group4",
            "PR": "#/components/schemas/ClaimAddress_Group4",
            "PS": "#/components/schemas/ClaimAddress_Group2",
            "PT": "#/components/schemas/ClaimAddress_Group4",
            "PW": "#/components/schemas/ClaimAddress_Group1",
            "PY": "#/components/schemas/ClaimAddress_Group0",
            "QA": "#/components/schemas/ClaimAddress_Group2",
            "RE": "#/components/schemas/ClaimAddress_Group8",
            "RO": "#/components/schemas/ClaimAddress_Group0",
            "RS": "#/components/schemas/ClaimAddress_Group0",
            "RU": "#/components/schemas/ClaimAddress_Group14",
            "RW": "#/components/schemas/ClaimAddress_Group2",
            "SA": "#/components/schemas/ClaimAddress_Group0",
            "SB": "#/components/schemas/ClaimAddress_Group2",
            "SC": "#/components/schemas/ClaimAddress_Group5",
            "SE": "#/components/schemas/ClaimAddress_Group4",
            "SG": "#/components/schemas/ClaimAddress_SG",
            "SH": "#/components/schemas/ClaimAddress_Group4",
            "SI": "#/components/schemas/ClaimAddress_Group0",
            "SJ": "#/components/schemas/ClaimAddress_Group4",
            "SK": "#/components/schemas/ClaimAddress_Group0",
            "SL": "#/components/schemas/ClaimAddress_Group2",
            "SM": "#/components/schemas/ClaimAddress_SM",
            "SN": "#/components/schemas/ClaimAddress_Group0",
            "SO": "#/components/schemas/ClaimAddress_Group7",
            "SR": "#/components/schemas/ClaimAddress_Group13",
            "ST": "#/components/schemas/ClaimAddress_Group2",
            "SV": "#/components/schemas/ClaimAddress_Group7",
            "SZ": "#/components/schemas/ClaimAddress_Group0",
            "TC": "#/components/schemas/ClaimAddress_Group4",
            "TD": "#/components/schemas/ClaimAddress_Group2",
            "TF": "#/components/schemas/ClaimAddress_Group2",
            "TG": "#/components/schemas/ClaimAddress_Group2",
            "TH": "#/components/schemas/ClaimAddress_Group9",
            "TJ": "#/components/schemas/ClaimAddress_Group0",
            "TK": "#/components/schemas/ClaimAddress_Group2",
            "TL": "#/components/schemas/ClaimAddress_Group2",
            "TM": "#/components/schemas/ClaimAddress_Group0",
            "TN": "#/components/schemas/ClaimAddress_Group0",
            "TO": "#/components/schemas/ClaimAddress_Group2",
            "TR": "#/components/schemas/ClaimAddress_TR",
            "TT": "#/components/schemas/ClaimAddress_Group2",
            "TV": "#/components/schemas/ClaimAddress_Group5",
            "TW": "#/components/schemas/ClaimAddress_TW",
            "TZ": "#/components/schemas/ClaimAddress_Group0",
            "UA": "#/components/schemas/ClaimAddress_Group14",
            "UG": "#/components/schemas/ClaimAddress_Group2",
            "UM": "#/components/schemas/ClaimAddress_Group15",
            "US": "#/components/schemas/ClaimAddress_US",
            "UY": "#/components/schemas/ClaimAddress_Group3",
            "UZ": "#/components/schemas/ClaimAddress_Group3",
            "VA": "#/components/schemas/ClaimAddress_Group0",
            "VC": "#/components/schemas/ClaimAddress_Group0",
            "VE": "#/components/schemas/ClaimAddress_Group15",
            "VG": "#/components/schemas/ClaimAddress_VG",
            "VI": "#/components/schemas/ClaimAddress_Group1",
            "VN": "#/components/schemas/ClaimAddress_Group3",
            "VU": "#/components/schemas/ClaimAddress_Group2",
            "WF": "#/components/schemas/ClaimAddress_Group8",
            "WS": "#/components/schemas/ClaimAddress_Group2",
            "YE": "#/components/schemas/ClaimAddress_Group2",
            "YT": "#/components/schemas/ClaimAddress_Group8",
            "ZA": "#/components/schemas/ClaimAddress_Group12",
            "ZM": "#/components/schemas/ClaimAddress_Group0",
            "ZW": "#/components/schemas/ClaimAddress_Group2"
          },
          "propertyName": "country"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ClaimAddress_AE"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_AG"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_BB"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_BR"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_CA"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_CN"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_CO"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_CV"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_FR"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_GI"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group0"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group1"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group10"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group11"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group12"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group13"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group14"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group15"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group2"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group3"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group4"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group5"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group6"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group7"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group8"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_Group9"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_HK"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_ID"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_IE"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_JM"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_JP"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_KN"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_KR"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_KY"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_MC"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_MO"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_NG"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_NI"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_NR"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_PF"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_SG"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_SM"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_TR"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_TW"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_US"
          },
          {
            "$ref": "#/components/schemas/ClaimAddress_VG"
          }
        ],
        "title": "Claim address"
      },
      "ClaimAddress_AE": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "AE"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "emirate": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The emirate of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Emirate",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "emirate"
        ]
      },
      "ClaimAddress_AG": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "AG"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1"
        ]
      },
      "ClaimAddress_BB": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "BB"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "parish": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The parish of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Parish",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "ClaimAddress_BR": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "BR"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The state of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "State",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode",
          "state"
        ]
      },
      "ClaimAddress_CA": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "CA"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "county": {
            "description": "The county of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "County",
            "type": "string"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode",
          "province"
        ]
      },
      "ClaimAddress_CN": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "CN"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode",
          "province"
        ]
      },
      "ClaimAddress_CO": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "CO"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "department": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The department of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Department",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "department"
        ]
      },
      "ClaimAddress_CV": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "CV"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "island": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The island of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Island",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "ClaimAddress_FR": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "CEDEX": {
            "description": "The CEDEX bureau of the address. Only applicable in certain countries. (Since 1.5.0)",
            "maxLength": 2,
            "nullable": true,
            "title": "CEDEX",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "FR"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode"
        ]
      },
      "ClaimAddress_GI": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "GI"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1"
        ]
      },
      "ClaimAddress_Group0": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "AD",
              "AF",
              "AI",
              "AL",
              "AZ",
              "BA",
              "BD",
              "BG",
              "BH",
              "BM",
              "BN",
              "BT",
              "CY",
              "CZ",
              "DO",
              "DZ",
              "EC",
              "EE",
              "EH",
              "ET",
              "FO",
              "GE",
              "GN",
              "GT",
              "GW",
              "HR",
              "HT",
              "IL",
              "IS",
              "JO",
              "KE",
              "KG",
              "KH",
              "KW",
              "LA",
              "LB",
              "LK",
              "LR",
              "LS",
              "LT",
              "LV",
              "MA",
              "MD",
              "ME",
              "MG",
              "MK",
              "MM",
              "MT",
              "MU",
              "MV",
              "MZ",
              "NE",
              "NP",
              "OM",
              "PK",
              "PY",
              "RO",
              "RS",
              "SA",
              "SI",
              "SK",
              "SN",
              "SZ",
              "TJ",
              "TM",
              "TN",
              "TZ",
              "VA",
              "VC",
              "ZM"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "ClaimAddress_Group1": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "AS",
              "AU",
              "FM",
              "GU",
              "IN",
              "MH",
              "MP",
              "PW",
              "VI"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The state of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "State",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode",
          "state"
        ]
      },
      "ClaimAddress_Group10": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "ES",
              "IT"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode",
          "province"
        ]
      },
      "ClaimAddress_Group11": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "MX",
              "MY"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The state of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "State",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode"
        ]
      },
      "ClaimAddress_Group12": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "NZ",
              "ZA"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode"
        ]
      },
      "ClaimAddress_Group13": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "PA",
              "SR"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "ClaimAddress_Group14": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "RU",
              "UA"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "oblast": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The oblast of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Oblast",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "oblast",
          "postalCode"
        ]
      },
      "ClaimAddress_Group15": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "UM",
              "VE"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The state of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "State",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "state"
        ]
      },
      "ClaimAddress_Group2": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "AO",
              "AQ",
              "AW",
              "BI",
              "BJ",
              "BO",
              "BV",
              "BW",
              "BZ",
              "CD",
              "CF",
              "CG",
              "CK",
              "CM",
              "DJ",
              "DM",
              "ER",
              "FJ",
              "GA",
              "GD",
              "GH",
              "GM",
              "GQ",
              "GY",
              "KM",
              "LC",
              "LY",
              "ML",
              "MR",
              "MS",
              "NA",
              "NU",
              "PS",
              "QA",
              "RW",
              "SB",
              "SL",
              "ST",
              "TD",
              "TF",
              "TG",
              "TK",
              "TL",
              "TO",
              "TT",
              "UG",
              "VU",
              "WS",
              "YE",
              "ZW"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "ClaimAddress_Group3": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "AM",
              "AR",
              "BY",
              "CC",
              "CL",
              "CX",
              "EG",
              "HM",
              "KZ",
              "MN",
              "NF",
              "PE",
              "UY",
              "UZ",
              "VN"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "ClaimAddress_Group4": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "AT",
              "BE",
              "CH",
              "DE",
              "DK",
              "FI",
              "FK",
              "GB",
              "GL",
              "GR",
              "GS",
              "HU",
              "IO",
              "LI",
              "LU",
              "NL",
              "NO",
              "PL",
              "PN",
              "PR",
              "PT",
              "SE",
              "SH",
              "SJ",
              "TC"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode"
        ]
      },
      "ClaimAddress_Group5": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "BS",
              "KI",
              "SC",
              "TV"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "island": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The island of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Island",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "ClaimAddress_Group6": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "BF",
              "CI",
              "MW"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "ClaimAddress_Group7": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "CR",
              "HN",
              "IQ",
              "PG",
              "SO",
              "SV"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "province"
        ]
      },
      "ClaimAddress_Group8": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "BL",
              "GF",
              "GP",
              "MF",
              "MQ",
              "NC",
              "PM",
              "RE",
              "WF",
              "YT"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode"
        ]
      },
      "ClaimAddress_Group9": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "IR",
              "PH",
              "TH"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "ClaimAddress_HK": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "area": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The area of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Area",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "HK"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "area"
        ]
      },
      "ClaimAddress_ID": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "ID"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "province"
        ]
      },
      "ClaimAddress_IE": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "IE"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "county": {
            "description": "The county of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "County",
            "type": "string"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "ClaimAddress_JM": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "JM"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "parish": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The parish of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Parish",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "parish"
        ]
      },
      "ClaimAddress_JP": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine1Kanji": {
            "description": "The kanji version of the first line of the address. Only applicable in certain countries. (Since 1.5.0)",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1 kanji",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine2Kanji": {
            "description": "The kanji version of the second line of the address. Only applicable in certain countries. (Since 1.5.0)",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2 kanji",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "cityKanji": {
            "description": "The kanji version of the city of the address. Only applicable in certain countries. (Since 1.5.0)",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City kanji",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "JP"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "prefecture": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The prefecture of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Prefecture",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode",
          "prefecture"
        ]
      },
      "ClaimAddress_KN": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "KN"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "island": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The island of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Island",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "island"
        ]
      },
      "ClaimAddress_KR": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "KR"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "do_si",
          "postalCode"
        ]
      },
      "ClaimAddress_KY": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "KY"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "island": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The island of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Island",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "island"
        ]
      },
      "ClaimAddress_MC": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "CEDEX": {
            "description": "The CEDEX bureau of the address. Only applicable in certain countries. (Since 1.5.0)",
            "maxLength": 2,
            "nullable": true,
            "title": "CEDEX",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "MC"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "ClaimAddress_MO": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "MO"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1"
        ]
      },
      "ClaimAddress_NG": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "NG"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The state of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "State",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "ClaimAddress_NI": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "NI"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "department": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The department of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Department",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city"
        ]
      },
      "ClaimAddress_NR": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "NR"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "district"
        ]
      },
      "ClaimAddress_PF": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "PF"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "island": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The island of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Island",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "island",
          "postalCode"
        ]
      },
      "ClaimAddress_SG": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "SG"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "postalCode"
        ]
      },
      "ClaimAddress_SM": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "SM"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "postalCode"
        ]
      },
      "ClaimAddress_TR": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "TR"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "province": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The province of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "Province",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode"
        ]
      },
      "ClaimAddress_TW": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "TW"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "county": {
            "description": "The county of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "County",
            "type": "string"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "county",
          "postalCode"
        ]
      },
      "ClaimAddress_US": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "US"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "county": {
            "description": "The county of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "County",
            "type": "string"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The state of the address. Only applicable in certain countries.",
            "nullable": true,
            "title": "State",
            "x-gw-filterBy": [
              "country"
            ],
            "x-gw-typelist": "State"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1",
          "city",
          "postalCode",
          "state"
        ]
      },
      "ClaimAddress_VG": {
        "description": "A `ClaimAddress` represents an address that appears on a claim or policy. It combines standard address fields with policy identifiers.",
        "properties": {
          "addressLine1": {
            "description": "The first line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 1",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 2",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address line 3",
            "type": "string"
          },
          "city": {
            "description": "The city of the address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "The country of the address. The value of the `country` field will affect which other fields on the `ClaimAddress` are applicable.",
            "enum": [
              "VG"
            ],
            "nullable": true,
            "title": "Country",
            "type": "string",
            "x-gw-type": "typekey.Country"
          },
          "description": {
            "description": "The description of the address (Since 1.5.0)",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "displayName": {
            "description": "The formatted value of the address represented by this `ClaimAddress`, including all standard fields for the address's country",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "policyAddress": {
            "description": "A `true` value for this field indicates that this `ClaimAddress` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy address",
            "type": "boolean"
          },
          "policyLabel": {
            "description": "Describes where on the policy this address came from. Only applicable if `policyAddress` is `true`.",
            "title": "Policy label",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address. Only applicable in certain countries.",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          }
        },
        "title": "Claim address",
        "type": "object",
        "x-gw-requiredForValidation": [
          "addressLine1"
        ]
      },
      "ClaimAssignee": {
        "description": "The target of an assignment action, such as a user/group combination or automatic rule-based assignment (Since 1.2.0)",
        "properties": {
          "autoAssign": {
            "description": "Set to `true` to indicate the assignment should be done by assignment rules. Cannot be combined with any other assignment criteria fields.",
            "title": "Auto assign",
            "type": "boolean"
          },
          "groupId": {
            "description": "The `id` of the `Group` that the claim should be assigned to. If specified without the `userId` field, the `User` within the `Group` is selected by assignment rules. If specified along with the `userId` field, the `User` must be a member of the `Group`. That `User` is assigned the element.",
            "title": "Group ID",
            "type": "string"
          },
          "name": {
            "description": "A human-readable name for the type of assignment that this `ClaimAssignee` represents",
            "readOnly": true,
            "title": "Name",
            "type": "string"
          },
          "userId": {
            "description": "The `id` of the `User` that the claim should be assigned to. The `groupId` field must also be specified if the `userId` field is specified, and the `User` must be a member of that `Group` and have permission to be assigned the element.",
            "title": "User ID",
            "type": "string"
          }
        },
        "title": "Claim assignee",
        "type": "object",
        "x-gw-sinceVersion": "1.2.0"
      },
      "ClaimAssigneeData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ClaimAssignee"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ClaimAssignmentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimAssigneeData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ClaimCloseRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimCloseRequestData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ClaimCloseRequestAttributes": {
        "properties": {
          "closedOutcome": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "x-gw-typelist": "ClaimClosedOutcomeType"
          },
          "reason": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClaimCloseRequestData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ClaimCloseRequestAttributes"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ClaimContact": {
        "description": "A contact on the claim",
        "discriminator": {
          "mapping": {
            "Adjudicator": "#/components/schemas/ClaimContact_Person",
            "Attorney": "#/components/schemas/ClaimContact_Person",
            "AutoRepairShop": "#/components/schemas/ClaimContact_Company",
            "AutoTowingAgcy": "#/components/schemas/ClaimContact_Company",
            "Company": "#/components/schemas/ClaimContact_Company",
            "CompanyVendor": "#/components/schemas/ClaimContact_Company",
            "Doctor": "#/components/schemas/ClaimContact_Doctor",
            "InsuranceCompany": "#/components/schemas/ClaimContact_Company",
            "LawFirm": "#/components/schemas/ClaimContact_Company",
            "LegalVenue": "#/components/schemas/ClaimContact_Place",
            "MedicalCareOrg": "#/components/schemas/ClaimContact_Company",
            "Person": "#/components/schemas/ClaimContact_Person",
            "PersonVendor": "#/components/schemas/ClaimContact_Person",
            "Place": "#/components/schemas/ClaimContact_Place",
            "UserContact": "#/components/schemas/ClaimContact_Person"
          },
          "propertyName": "contactSubtype"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ClaimContact_Company"
          },
          {
            "$ref": "#/components/schemas/ClaimContact_Doctor"
          },
          {
            "$ref": "#/components/schemas/ClaimContact_Person"
          },
          {
            "$ref": "#/components/schemas/ClaimContact_Place"
          }
        ],
        "title": "Claim contact"
      },
      "ClaimContactData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ClaimContact"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ClaimContactList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ClaimContactData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ActivityResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ClaimContact_Company": {
        "description": "A contact on the claim",
        "properties": {
          "addressBookUID": {
            "description": "The unique ID of this `ClaimContact` within the contact management system. Only applicable if the `ClaimContact` has been linked to a contact management system.",
            "maxLength": 64,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address book UID",
            "type": "string"
          },
          "companyName": {
            "description": "The name of the company represented by this `Contact`. Only applicable for a `ClaimContact` that represents a company.",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Company name",
            "type": "string"
          },
          "companyNameKanji": {
            "description": "The kanji version of the name of the company represented by this `ClaimContact`. Only applicable for a `ClaimContact` that represents a company.",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Company name kanji",
            "type": "string"
          },
          "contactSubtype": {
            "description": "The specific type of contact that this `ClaimContact` represents, such as `Person` or `Company`. The set of fields that can be set on a `ClaimContact` depend on its `contactSubtype`.",
            "enum": [
              "AutoRepairShop",
              "AutoTowingAgcy",
              "Company",
              "CompanyVendor",
              "InsuranceCompany",
              "LawFirm",
              "MedicalCareOrg"
            ],
            "title": "Contact subtype",
            "type": "string",
            "x-gw-createOnly": true,
            "x-gw-type": "typekey.Contact"
          },
          "displayName": {
            "description": "A formatted representation of the full name for this `ClaimContact', including all applicable fields such as `firstName` or `lastName`",
            "nullable": true,
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "editableRoles": {
            "description": "The list of roles that this contact has on the claim and which are not otherwise represented by concrete fields such as `reporter` or `witness`. This list can be edited directly to change the roles assigned to this contact.",
            "items": {
              "$ref": "#/components/schemas/ContactRole"
            },
            "title": "Editable roles",
            "type": "array"
          },
          "emailAddress1": {
            "description": "The contact's primary e-mail address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "E-mail address 1",
            "type": "string"
          },
          "emailAddress2": {
            "description": "The contact's secondary e-mail address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "E-mail address 2",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "linkStatus": {
            "description": "A code that indicates whether the contact is currently linked to the contact management system. Requesting this field will slow down API responses, since computing this value requires a call to the contact management system. (Since 1.3.0)",
            "readOnly": true,
            "title": "Link status",
            "type": "string",
            "x-gw-defaultViews": [
              "none"
            ],
            "x-gw-sinceVersion": "1.3.0"
          },
          "policySystemId": {
            "description": "The unique identifier of this element within the policy system",
            "maxLength": 256,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Policy system ID",
            "type": "string"
          },
          "primaryAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "The contact's primary address",
            "title": "Primary address",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "primaryLanguage": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The contact's primary language",
            "nullable": true,
            "title": "Primary language",
            "x-gw-typelist": "LanguageType"
          },
          "primaryLocale": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The contact's primary locale",
            "nullable": true,
            "title": "Primary locale",
            "x-gw-typelist": "LocaleType"
          },
          "primaryPhone": {
            "description": "The contact's primary phone number, as determined by the type of phone number selected in the `primaryPhoneType` field",
            "readOnly": true,
            "title": "Primary phone",
            "type": "string"
          },
          "roles": {
            "description": "The list of all roles that this contact has on the claim, including roles that are represented by concrete fields such as `reporter`. This field cannot be edited directly. To edit the roles assigned to a contact, use either the concrete fields on the appropriate element, such as `reporter` on `Claim`, or update the `editableRoles` field on the contact.",
            "items": {
              "$ref": "#/components/schemas/ContactRole"
            },
            "readOnly": true,
            "title": "Roles",
            "type": "array"
          },
          "syncAddressBookUID": {
            "description": "The unique ID of this `ClaimContact` within the contact management system. Setting this field may cause a slow response time since it calls the contact management system to retrieve the contact with the given `AddressBookUID`. Cannot be combined with any other fields. (Since 1.6.0)",
            "title": "Sync address book UID",
            "type": "string",
            "x-gw-createOnly": true,
            "x-gw-sinceVersion": "1.6.0"
          },
          "taxId": {
            "description": "The contact's tax ID",
            "maxLength": 30,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Tax ID",
            "type": "string"
          },
          "workPhone": {
            "$ref": "#/components/schemas/PhoneNumber",
            "description": "The contact's work phone number, if this `Contact` represents a person, or the business's phone number, if this `Contact` represents a company",
            "nullable": true,
            "title": "Work phone"
          }
        },
        "title": "Claim contact",
        "type": "object"
      },
      "ClaimContact_Doctor": {
        "description": "A contact on the claim",
        "properties": {
          "addressBookUID": {
            "description": "The unique ID of this `ClaimContact` within the contact management system. Only applicable if the `ClaimContact` has been linked to a contact management system.",
            "maxLength": 64,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address book UID",
            "type": "string"
          },
          "cellPhone": {
            "$ref": "#/components/schemas/PhoneNumber",
            "description": "The person's mobile phone number. Only applicable for a `ClaimContact` that represents a person.",
            "nullable": true,
            "title": "Cell phone"
          },
          "contactSubtype": {
            "description": "The specific type of contact that this `ClaimContact` represents, such as `Person` or `Company`. The set of fields that can be set on a `ClaimContact` depend on its `contactSubtype`.",
            "enum": [
              "Doctor"
            ],
            "title": "Contact subtype",
            "type": "string",
            "x-gw-createOnly": true,
            "x-gw-type": "typekey.Contact"
          },
          "dateOfBirth": {
            "description": "The person's date of birth. Only applicable for a `ClaimContact` that represents a person.",
            "format": "date",
            "nullable": true,
            "title": "Date of birth",
            "type": "string",
            "x-gw-before": "now"
          },
          "displayName": {
            "description": "A formatted representation of the full name for this `ClaimContact', including all applicable fields such as `firstName` or `lastName`",
            "nullable": true,
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "doctorSpecialty": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The doctor's specialty. Only applicable for a `ClaimContact` that represent a doctor.",
            "nullable": true,
            "title": "Doctor specialty",
            "x-gw-typelist": "SpecialtyType"
          },
          "editableRoles": {
            "description": "The list of roles that this contact has on the claim and which are not otherwise represented by concrete fields such as `reporter` or `witness`. This list can be edited directly to change the roles assigned to this contact.",
            "items": {
              "$ref": "#/components/schemas/ContactRole"
            },
            "title": "Editable roles",
            "type": "array"
          },
          "emailAddress1": {
            "description": "The contact's primary e-mail address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "E-mail address 1",
            "type": "string"
          },
          "emailAddress2": {
            "description": "The contact's secondary e-mail address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "E-mail address 2",
            "type": "string"
          },
          "firstName": {
            "description": "The persons's first name. Only applicable for a `ClaimContact` that represents a person.",
            "maxLength": 30,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "First name",
            "type": "string"
          },
          "firstNameKanji": {
            "description": "The kanji version of the first name of the person represented by this `ClaimContact`. Only applicable for a `ClaimContact` that represents a person. (Since 1.5.0)",
            "maxLength": 30,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "First name kanji",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "homePhone": {
            "$ref": "#/components/schemas/PhoneNumber",
            "description": "The person's home phone number. Only applicable for a `ClaimContact` that represents a person.",
            "nullable": true,
            "title": "Home phone"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "lastName": {
            "description": "The person's last name. Only applicable for a `ClaimContact` that represents a person.",
            "maxLength": 30,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Last name",
            "type": "string"
          },
          "lastNameKanji": {
            "description": "The kanji version of the last name of the person represented by this `ClaimContact`. Only applicable for a `ClaimContact` that represents a person. (Since 1.5.0)",
            "maxLength": 30,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Last name kanji",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "licenseNumber": {
            "description": "The person's driver's license number. Only applicable for a `ClaimContact` that represents a person.",
            "maxLength": 20,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Driver's license number",
            "type": "string"
          },
          "licenseState": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The person's driver's license state. Only applicable for a `ClaimContact` that represents a person.",
            "nullable": true,
            "title": "Driver's license state",
            "x-gw-typelist": "Jurisdiction"
          },
          "linkStatus": {
            "description": "A code that indicates whether the contact is currently linked to the contact management system. Requesting this field will slow down API responses, since computing this value requires a call to the contact management system. (Since 1.3.0)",
            "readOnly": true,
            "title": "Link status",
            "type": "string",
            "x-gw-defaultViews": [
              "none"
            ],
            "x-gw-sinceVersion": "1.3.0"
          },
          "medicalLicense": {
            "description": "The doctor's medical license number. Only applicable for a `ClaimContact` that represent a doctor.",
            "maxLength": 30,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Medical license",
            "type": "string"
          },
          "particle": {
            "description": "The particle portion of the name of the person represented by this `ClaimContact`. Only applicable for a `ClaimContact` that represents a person. (Since 1.5.0)",
            "maxLength": 30,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Particle",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "policySystemId": {
            "description": "The unique identifier of this element within the policy system",
            "maxLength": 256,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Policy system ID",
            "type": "string"
          },
          "primaryAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "The contact's primary address",
            "title": "Primary address",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "primaryLanguage": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The contact's primary language",
            "nullable": true,
            "title": "Primary language",
            "x-gw-typelist": "LanguageType"
          },
          "primaryLocale": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The contact's primary locale",
            "nullable": true,
            "title": "Primary locale",
            "x-gw-typelist": "LocaleType"
          },
          "primaryPhone": {
            "description": "The contact's primary phone number, as determined by the type of phone number selected in the `primaryPhoneType` field",
            "readOnly": true,
            "title": "Primary phone",
            "type": "string"
          },
          "primaryPhoneType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the contact's primary phone, such as `home` or `mobile`. Only applicable for a `ClaimContact` that represents a person.",
            "nullable": true,
            "title": "Primary phone type",
            "x-gw-typelist": "PrimaryPhoneType"
          },
          "roles": {
            "description": "The list of all roles that this contact has on the claim, including roles that are represented by concrete fields such as `reporter`. This field cannot be edited directly. To edit the roles assigned to a contact, use either the concrete fields on the appropriate element, such as `reporter` on `Claim`, or update the `editableRoles` field on the contact.",
            "items": {
              "$ref": "#/components/schemas/ContactRole"
            },
            "readOnly": true,
            "title": "Roles",
            "type": "array"
          },
          "syncAddressBookUID": {
            "description": "The unique ID of this `ClaimContact` within the contact management system. Setting this field may cause a slow response time since it calls the contact management system to retrieve the contact with the given `AddressBookUID`. Cannot be combined with any other fields. (Since 1.6.0)",
            "title": "Sync address book UID",
            "type": "string",
            "x-gw-createOnly": true,
            "x-gw-sinceVersion": "1.6.0"
          },
          "taxId": {
            "description": "The contact's tax ID",
            "maxLength": 30,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Tax ID",
            "type": "string"
          },
          "workPhone": {
            "$ref": "#/components/schemas/PhoneNumber",
            "description": "The contact's work phone number, if this `Contact` represents a person, or the business's phone number, if this `Contact` represents a company",
            "nullable": true,
            "title": "Work phone"
          }
        },
        "title": "Claim contact",
        "type": "object"
      },
      "ClaimContact_Person": {
        "description": "A contact on the claim",
        "properties": {
          "addressBookUID": {
            "description": "The unique ID of this `ClaimContact` within the contact management system. Only applicable if the `ClaimContact` has been linked to a contact management system.",
            "maxLength": 64,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address book UID",
            "type": "string"
          },
          "cellPhone": {
            "$ref": "#/components/schemas/PhoneNumber",
            "description": "The person's mobile phone number. Only applicable for a `ClaimContact` that represents a person.",
            "nullable": true,
            "title": "Cell phone"
          },
          "contactSubtype": {
            "description": "The specific type of contact that this `ClaimContact` represents, such as `Person` or `Company`. The set of fields that can be set on a `ClaimContact` depend on its `contactSubtype`.",
            "enum": [
              "Adjudicator",
              "Attorney",
              "Person",
              "PersonVendor",
              "UserContact"
            ],
            "title": "Contact subtype",
            "type": "string",
            "x-gw-createOnly": true,
            "x-gw-type": "typekey.Contact"
          },
          "dateOfBirth": {
            "description": "The person's date of birth. Only applicable for a `ClaimContact` that represents a person.",
            "format": "date",
            "nullable": true,
            "title": "Date of birth",
            "type": "string",
            "x-gw-before": "now"
          },
          "displayName": {
            "description": "A formatted representation of the full name for this `ClaimContact', including all applicable fields such as `firstName` or `lastName`",
            "nullable": true,
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "editableRoles": {
            "description": "The list of roles that this contact has on the claim and which are not otherwise represented by concrete fields such as `reporter` or `witness`. This list can be edited directly to change the roles assigned to this contact.",
            "items": {
              "$ref": "#/components/schemas/ContactRole"
            },
            "title": "Editable roles",
            "type": "array"
          },
          "emailAddress1": {
            "description": "The contact's primary e-mail address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "E-mail address 1",
            "type": "string"
          },
          "emailAddress2": {
            "description": "The contact's secondary e-mail address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "E-mail address 2",
            "type": "string"
          },
          "firstName": {
            "description": "The persons's first name. Only applicable for a `ClaimContact` that represents a person.",
            "maxLength": 30,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "First name",
            "type": "string"
          },
          "firstNameKanji": {
            "description": "The kanji version of the first name of the person represented by this `ClaimContact`. Only applicable for a `ClaimContact` that represents a person. (Since 1.5.0)",
            "maxLength": 30,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "First name kanji",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "homePhone": {
            "$ref": "#/components/schemas/PhoneNumber",
            "description": "The person's home phone number. Only applicable for a `ClaimContact` that represents a person.",
            "nullable": true,
            "title": "Home phone"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "lastName": {
            "description": "The person's last name. Only applicable for a `ClaimContact` that represents a person.",
            "maxLength": 30,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Last name",
            "type": "string"
          },
          "lastNameKanji": {
            "description": "The kanji version of the last name of the person represented by this `ClaimContact`. Only applicable for a `ClaimContact` that represents a person. (Since 1.5.0)",
            "maxLength": 30,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Last name kanji",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "licenseNumber": {
            "description": "The person's driver's license number. Only applicable for a `ClaimContact` that represents a person.",
            "maxLength": 20,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Driver's license number",
            "type": "string"
          },
          "licenseState": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The person's driver's license state. Only applicable for a `ClaimContact` that represents a person.",
            "nullable": true,
            "title": "Driver's license state",
            "x-gw-typelist": "Jurisdiction"
          },
          "linkStatus": {
            "description": "A code that indicates whether the contact is currently linked to the contact management system. Requesting this field will slow down API responses, since computing this value requires a call to the contact management system. (Since 1.3.0)",
            "readOnly": true,
            "title": "Link status",
            "type": "string",
            "x-gw-defaultViews": [
              "none"
            ],
            "x-gw-sinceVersion": "1.3.0"
          },
          "particle": {
            "description": "The particle portion of the name of the person represented by this `ClaimContact`. Only applicable for a `ClaimContact` that represents a person. (Since 1.5.0)",
            "maxLength": 30,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Particle",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "policySystemId": {
            "description": "The unique identifier of this element within the policy system",
            "maxLength": 256,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Policy system ID",
            "type": "string"
          },
          "primaryAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "The contact's primary address",
            "title": "Primary address",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "primaryLanguage": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The contact's primary language",
            "nullable": true,
            "title": "Primary language",
            "x-gw-typelist": "LanguageType"
          },
          "primaryLocale": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The contact's primary locale",
            "nullable": true,
            "title": "Primary locale",
            "x-gw-typelist": "LocaleType"
          },
          "primaryPhone": {
            "description": "The contact's primary phone number, as determined by the type of phone number selected in the `primaryPhoneType` field",
            "readOnly": true,
            "title": "Primary phone",
            "type": "string"
          },
          "primaryPhoneType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of the contact's primary phone, such as `home` or `mobile`. Only applicable for a `ClaimContact` that represents a person.",
            "nullable": true,
            "title": "Primary phone type",
            "x-gw-typelist": "PrimaryPhoneType"
          },
          "roles": {
            "description": "The list of all roles that this contact has on the claim, including roles that are represented by concrete fields such as `reporter`. This field cannot be edited directly. To edit the roles assigned to a contact, use either the concrete fields on the appropriate element, such as `reporter` on `Claim`, or update the `editableRoles` field on the contact.",
            "items": {
              "$ref": "#/components/schemas/ContactRole"
            },
            "readOnly": true,
            "title": "Roles",
            "type": "array"
          },
          "syncAddressBookUID": {
            "description": "The unique ID of this `ClaimContact` within the contact management system. Setting this field may cause a slow response time since it calls the contact management system to retrieve the contact with the given `AddressBookUID`. Cannot be combined with any other fields. (Since 1.6.0)",
            "title": "Sync address book UID",
            "type": "string",
            "x-gw-createOnly": true,
            "x-gw-sinceVersion": "1.6.0"
          },
          "taxId": {
            "description": "The contact's tax ID",
            "maxLength": 30,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Tax ID",
            "type": "string"
          },
          "workPhone": {
            "$ref": "#/components/schemas/PhoneNumber",
            "description": "The contact's work phone number, if this `Contact` represents a person, or the business's phone number, if this `Contact` represents a company",
            "nullable": true,
            "title": "Work phone"
          }
        },
        "title": "Claim contact",
        "type": "object"
      },
      "ClaimContact_Place": {
        "description": "A contact on the claim",
        "properties": {
          "addressBookUID": {
            "description": "The unique ID of this `ClaimContact` within the contact management system. Only applicable if the `ClaimContact` has been linked to a contact management system.",
            "maxLength": 64,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Address book UID",
            "type": "string"
          },
          "contactSubtype": {
            "description": "The specific type of contact that this `ClaimContact` represents, such as `Person` or `Company`. The set of fields that can be set on a `ClaimContact` depend on its `contactSubtype`.",
            "enum": [
              "LegalVenue",
              "Place"
            ],
            "title": "Contact subtype",
            "type": "string",
            "x-gw-createOnly": true,
            "x-gw-type": "typekey.Contact"
          },
          "displayName": {
            "description": "A formatted representation of the full name for this `ClaimContact', including all applicable fields such as `firstName` or `lastName`",
            "nullable": true,
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "editableRoles": {
            "description": "The list of roles that this contact has on the claim and which are not otherwise represented by concrete fields such as `reporter` or `witness`. This list can be edited directly to change the roles assigned to this contact.",
            "items": {
              "$ref": "#/components/schemas/ContactRole"
            },
            "title": "Editable roles",
            "type": "array"
          },
          "emailAddress1": {
            "description": "The contact's primary e-mail address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "E-mail address 1",
            "type": "string"
          },
          "emailAddress2": {
            "description": "The contact's secondary e-mail address",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "E-mail address 2",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "linkStatus": {
            "description": "A code that indicates whether the contact is currently linked to the contact management system. Requesting this field will slow down API responses, since computing this value requires a call to the contact management system. (Since 1.3.0)",
            "readOnly": true,
            "title": "Link status",
            "type": "string",
            "x-gw-defaultViews": [
              "none"
            ],
            "x-gw-sinceVersion": "1.3.0"
          },
          "policySystemId": {
            "description": "The unique identifier of this element within the policy system",
            "maxLength": 256,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Policy system ID",
            "type": "string"
          },
          "primaryAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "The contact's primary address",
            "title": "Primary address",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "primaryLanguage": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The contact's primary language",
            "nullable": true,
            "title": "Primary language",
            "x-gw-typelist": "LanguageType"
          },
          "primaryLocale": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The contact's primary locale",
            "nullable": true,
            "title": "Primary locale",
            "x-gw-typelist": "LocaleType"
          },
          "primaryPhone": {
            "description": "The contact's primary phone number, as determined by the type of phone number selected in the `primaryPhoneType` field",
            "readOnly": true,
            "title": "Primary phone",
            "type": "string"
          },
          "roles": {
            "description": "The list of all roles that this contact has on the claim, including roles that are represented by concrete fields such as `reporter`. This field cannot be edited directly. To edit the roles assigned to a contact, use either the concrete fields on the appropriate element, such as `reporter` on `Claim`, or update the `editableRoles` field on the contact.",
            "items": {
              "$ref": "#/components/schemas/ContactRole"
            },
            "readOnly": true,
            "title": "Roles",
            "type": "array"
          },
          "syncAddressBookUID": {
            "description": "The unique ID of this `ClaimContact` within the contact management system. Setting this field may cause a slow response time since it calls the contact management system to retrieve the contact with the given `AddressBookUID`. Cannot be combined with any other fields. (Since 1.6.0)",
            "title": "Sync address book UID",
            "type": "string",
            "x-gw-createOnly": true,
            "x-gw-sinceVersion": "1.6.0"
          },
          "taxId": {
            "description": "The contact's tax ID",
            "maxLength": 30,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Tax ID",
            "type": "string"
          },
          "workPhone": {
            "$ref": "#/components/schemas/PhoneNumber",
            "description": "The contact's work phone number, if this `Contact` represents a person, or the business's phone number, if this `Contact` represents a company",
            "nullable": true,
            "title": "Work phone"
          }
        },
        "title": "Claim contact",
        "type": "object"
      },
      "ClaimData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Claim"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ClaimDocumentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DocumentData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ClaimDocumentResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DocumentData"
          },
          "included": {
            "$ref": "#/components/schemas/DocumentResponseInclusions"
          }
        },
        "type": "object"
      },
      "ClaimInfo": {
        "description": "Claim summary information (Since 1.3.1)",
        "properties": {
          "archiveState": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The archive state of this claim info",
            "readOnly": true,
            "title": "Archive state",
            "x-gw-typelist": "ArchiveState"
          },
          "claim": {
            "$ref": "#/components/schemas/Claim",
            "description": "The details of the claim",
            "readOnly": true,
            "title": "Claim",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "claimNumber": {
            "description": "The claim number assigned to this claim",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Claim number",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "lossDate": {
            "description": "The `lossDate` of the claim",
            "format": "date-time",
            "readOnly": true,
            "title": "Loss date",
            "type": "string"
          },
          "noticeDate": {
            "description": "The date and time when the claim was reported",
            "format": "date-time",
            "readOnly": true,
            "title": "Reported date",
            "type": "string"
          },
          "policyNumber": {
            "description": "The `policyNumber` of the claim's policy",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Policy number",
            "type": "string"
          }
        },
        "title": "Claim info",
        "type": "object",
        "x-gw-filterable": [
          "archiveState",
          "claimNumber"
        ],
        "x-gw-sinceVersion": "1.3.1",
        "x-gw-sortable": [
          "archiveState",
          "claimNumber"
        ]
      },
      "ClaimInfoData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ClaimInfo"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ClaimInfoResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimInfoData"
          }
        },
        "type": "object"
      },
      "ClaimInfosList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ClaimInfoData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ClaimReference": {
        "description": "A reference to a claim",
        "properties": {
          "claimNumber": {
            "description": "The `claimNumber` of the referenced claim",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Claim number",
            "type": "string"
          },
          "displayName": {
            "description": "The formatted name of the element",
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the referenced element",
            "title": "ID",
            "type": "string"
          },
          "jsonPath": {
            "description": "The path to the referenced element within the overall JSON document (Since 1.2.0)",
            "readOnly": true,
            "title": "JSON path",
            "type": "string",
            "x-gw-defaultViews": [
              "none"
            ],
            "x-gw-sinceVersion": "1.2.0"
          },
          "type": {
            "description": "The type of the referenced element (Since 1.2.0)",
            "title": "Type",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "uri": {
            "description": "The canonical URI for the referenced element",
            "title": "URI",
            "type": "string"
          }
        },
        "title": "Claim reference",
        "type": "object",
        "x-gw-resourceReference": true
      },
      "ClaimReopenRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimReopenRequestData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ClaimReopenRequestAttributes": {
        "description": "Claim reopen request attributes (Since 1.6.0)",
        "properties": {
          "note": {
            "description": "A detailed explanation for reopening the claim",
            "title": "Note",
            "type": "string"
          },
          "reason": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The reason type for reopening the claim",
            "title": "Reason",
            "x-gw-typelist": "ClaimReopenedReason"
          }
        },
        "title": "Claim reopen request attributes",
        "type": "object",
        "x-gw-sinceVersion": "1.6.0"
      },
      "ClaimReopenRequestData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ClaimReopenRequestAttributes"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ClaimRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ClaimRequestInclusions": {
        "properties": {
          "AssessmentContentItem": {
            "items": {
              "$ref": "#/components/schemas/AssessmentContentItemData"
            },
            "type": "array"
          },
          "AssessmentSummary": {
            "items": {
              "$ref": "#/components/schemas/AssessmentSummaryData"
            },
            "type": "array"
          },
          "BaggageIncident": {
            "items": {
              "$ref": "#/components/schemas/BaggageIncidentData"
            },
            "type": "array"
          },
          "ClaimContact": {
            "items": {
              "$ref": "#/components/schemas/ClaimContactData"
            },
            "type": "array"
          },
          "DwellingIncident": {
            "items": {
              "$ref": "#/components/schemas/DwellingIncidentData"
            },
            "type": "array"
          },
          "Exposure": {
            "items": {
              "$ref": "#/components/schemas/ExposureData"
            },
            "type": "array"
          },
          "FixedPropertyIncident": {
            "items": {
              "$ref": "#/components/schemas/FixedPropertyIncidentData"
            },
            "type": "array"
          },
          "GeneralIncident": {
            "items": {
              "$ref": "#/components/schemas/GeneralIncidentData"
            },
            "type": "array"
          },
          "InjuryIncident": {
            "items": {
              "$ref": "#/components/schemas/InjuryIncidentData"
            },
            "type": "array"
          },
          "LivingExpensesIncident": {
            "items": {
              "$ref": "#/components/schemas/LivingExpensesIncidentData"
            },
            "type": "array"
          },
          "Matter": {
            "items": {
              "$ref": "#/components/schemas/MatterData"
            },
            "type": "array"
          },
          "Note": {
            "items": {
              "$ref": "#/components/schemas/NoteData"
            },
            "type": "array"
          },
          "OtherStructureIncident": {
            "items": {
              "$ref": "#/components/schemas/OtherStructureIncidentData"
            },
            "type": "array"
          },
          "PropertyContentsIncident": {
            "items": {
              "$ref": "#/components/schemas/PropertyContentsIncidentData"
            },
            "type": "array"
          },
          "ServiceRequest": {
            "items": {
              "$ref": "#/components/schemas/ServiceRequestData"
            },
            "type": "array"
          },
          "TripAccommodation": {
            "items": {
              "$ref": "#/components/schemas/TripAccommodationData"
            },
            "type": "array"
          },
          "TripIncident": {
            "items": {
              "$ref": "#/components/schemas/TripIncidentData"
            },
            "type": "array"
          },
          "TripSegment": {
            "items": {
              "$ref": "#/components/schemas/TripSegmentData"
            },
            "type": "array"
          },
          "VehicleIncident": {
            "items": {
              "$ref": "#/components/schemas/VehicleIncidentData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ClaimResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "ClaimResponseInclusions": {
        "properties": {
          "Activity": {
            "items": {
              "$ref": "#/components/schemas/ActivityData"
            },
            "type": "array"
          },
          "ActivityPattern": {
            "items": {
              "$ref": "#/components/schemas/ActivityPatternData"
            },
            "type": "array"
          },
          "AssessmentContentItem": {
            "items": {
              "$ref": "#/components/schemas/AssessmentContentItemData"
            },
            "type": "array"
          },
          "AssessmentSummary": {
            "items": {
              "$ref": "#/components/schemas/AssessmentSummaryData"
            },
            "type": "array"
          },
          "Assignee": {
            "items": {
              "$ref": "#/components/schemas/AssigneeData"
            },
            "type": "array"
          },
          "BaggageIncident": {
            "items": {
              "$ref": "#/components/schemas/BaggageIncidentData"
            },
            "type": "array"
          },
          "Check": {
            "items": {
              "$ref": "#/components/schemas/CheckData"
            },
            "type": "array"
          },
          "ClaimContact": {
            "items": {
              "$ref": "#/components/schemas/ClaimContactData"
            },
            "type": "array"
          },
          "DwellingIncident": {
            "items": {
              "$ref": "#/components/schemas/DwellingIncidentData"
            },
            "type": "array"
          },
          "Endorsement": {
            "items": {
              "$ref": "#/components/schemas/EndorsementData"
            },
            "type": "array"
          },
          "Exposure": {
            "items": {
              "$ref": "#/components/schemas/ExposureData"
            },
            "type": "array"
          },
          "FixedPropertyIncident": {
            "items": {
              "$ref": "#/components/schemas/FixedPropertyIncidentData"
            },
            "type": "array"
          },
          "GeneralIncident": {
            "items": {
              "$ref": "#/components/schemas/GeneralIncidentData"
            },
            "type": "array"
          },
          "GenericRelation": {
            "items": {
              "$ref": "#/components/schemas/GenericRelationData"
            },
            "type": "array"
          },
          "InjuryIncident": {
            "items": {
              "$ref": "#/components/schemas/InjuryIncidentData"
            },
            "type": "array"
          },
          "LivingExpensesIncident": {
            "items": {
              "$ref": "#/components/schemas/LivingExpensesIncidentData"
            },
            "type": "array"
          },
          "LocationBasedRiskUnit": {
            "items": {
              "$ref": "#/components/schemas/LocationBasedRiskUnitData"
            },
            "type": "array"
          },
          "LocationBasedRiskUnitCoverage": {
            "items": {
              "$ref": "#/components/schemas/CoverageData"
            },
            "type": "array"
          },
          "Matter": {
            "items": {
              "$ref": "#/components/schemas/MatterData"
            },
            "type": "array"
          },
          "Note": {
            "items": {
              "$ref": "#/components/schemas/NoteData"
            },
            "type": "array"
          },
          "OtherStructureIncident": {
            "items": {
              "$ref": "#/components/schemas/OtherStructureIncidentData"
            },
            "type": "array"
          },
          "Payment": {
            "items": {
              "$ref": "#/components/schemas/TransactionData"
            },
            "type": "array"
          },
          "Policy": {
            "items": {
              "$ref": "#/components/schemas/PolicyData"
            },
            "type": "array"
          },
          "PolicyCoverage": {
            "items": {
              "$ref": "#/components/schemas/CoverageData"
            },
            "type": "array"
          },
          "PolicyLocation": {
            "items": {
              "$ref": "#/components/schemas/PolicyLocationData"
            },
            "type": "array"
          },
          "PropertyContentsIncident": {
            "items": {
              "$ref": "#/components/schemas/PropertyContentsIncidentData"
            },
            "type": "array"
          },
          "Recovery": {
            "items": {
              "$ref": "#/components/schemas/TransactionData"
            },
            "type": "array"
          },
          "RecoveryReserve": {
            "items": {
              "$ref": "#/components/schemas/TransactionData"
            },
            "type": "array"
          },
          "RecoveryReserveSet": {
            "items": {
              "$ref": "#/components/schemas/RecoveryReserveSetData"
            },
            "type": "array"
          },
          "RecoverySet": {
            "items": {
              "$ref": "#/components/schemas/RecoverySetData"
            },
            "type": "array"
          },
          "Reserve": {
            "items": {
              "$ref": "#/components/schemas/TransactionData"
            },
            "type": "array"
          },
          "ReserveSet": {
            "items": {
              "$ref": "#/components/schemas/ReserveSetData"
            },
            "type": "array"
          },
          "RiskUnitCoverage": {
            "items": {
              "$ref": "#/components/schemas/CoverageData"
            },
            "type": "array"
          },
          "ServiceRequest": {
            "items": {
              "$ref": "#/components/schemas/ServiceRequestData"
            },
            "type": "array"
          },
          "TripAccommodation": {
            "items": {
              "$ref": "#/components/schemas/TripAccommodationData"
            },
            "type": "array"
          },
          "TripIncident": {
            "items": {
              "$ref": "#/components/schemas/TripIncidentData"
            },
            "type": "array"
          },
          "TripRiskUnit": {
            "items": {
              "$ref": "#/components/schemas/TripRiskUnitData"
            },
            "type": "array"
          },
          "TripSegment": {
            "items": {
              "$ref": "#/components/schemas/TripSegmentData"
            },
            "type": "array"
          },
          "VehicleIncident": {
            "items": {
              "$ref": "#/components/schemas/VehicleIncidentData"
            },
            "type": "array"
          },
          "VehicleRiskUnit": {
            "items": {
              "$ref": "#/components/schemas/VehicleRiskUnitData"
            },
            "type": "array"
          },
          "VehicleRiskUnitCoverage": {
            "items": {
              "$ref": "#/components/schemas/CoverageData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ClaimSearchRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimSearchRequestData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ClaimSearchRequestAttributes": {
        "description": "Criteria of the claim to search for",
        "properties": {
          "claimNumber": {
            "description": "The `clamNumber` of the claim",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Claim number",
            "type": "string"
          },
          "firstName": {
            "description": "The first name of a contact on the claim. By default the search will look for contacts who have the role of `claimant` on the claim. You can use the `nameSearchType` field to change the search to look for contacts with other roles, such as `insured`, or to search all contacts regardless of role.",
            "maxLength": 30,
            "minLength": 1,
            "pattern": "\\S",
            "title": "First name",
            "type": "string"
          },
          "lastName": {
            "description": "The last name of a contact on the claim. By default the search will look for contacts who have the role of `claimant` on the claim. You can use the `nameSearchType` field to change the search to look for contacts with other roles, such as `insured`, or to search all contacts regardless of role.",
            "maxLength": 30,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Last name",
            "type": "string"
          },
          "nameSearchType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "When searching by `firstName` or `lastName`, specifies which claim contacts to check based on the contact role. For example, when searching by last name, if this field is set to `insured`, the search will return any claim where the specified last name matches the last name of the contact who is designated as the insured.",
            "title": "Name search type",
            "x-gw-typelist": "ClaimSearchNameSearchType"
          },
          "policyNumber": {
            "description": "The `policyNumber` of the claim's policy",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Policy number",
            "type": "string"
          }
        },
        "title": "Claim search request attributes",
        "type": "object"
      },
      "ClaimSearchRequestData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ClaimSearchRequestAttributes"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ClaimSearchResult": {
        "description": "Summary information about a active claim returned from a claim search request",
        "properties": {
          "adjusterName": {
            "description": "The name of the claim's assigned user, or information about the assignment status if the claim is unassigned",
            "title": "Adjuster name",
            "type": "string"
          },
          "claimId": {
            "description": "The `id` of the claim",
            "title": "Claim ID",
            "type": "string"
          },
          "claimNumber": {
            "description": "The `claimNumber` of the claim",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Claim number",
            "type": "string"
          },
          "claimants": {
            "description": "A list of names of claimants on the claim",
            "items": {
              "type": "string"
            },
            "title": "Claimants",
            "type": "array"
          },
          "insuredName": {
            "description": "The name of the insured",
            "title": "Insured name",
            "type": "string"
          },
          "lossDate": {
            "description": "The `lossDate` of the claim",
            "format": "date-time",
            "title": "Loss date",
            "type": "string"
          },
          "policyNumber": {
            "description": "The `policyNumber` of the claim",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Policy number",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The `state` of the claim, such as `open` or `closed`",
            "title": "Status",
            "x-gw-typelist": "ClaimState"
          }
        },
        "title": "Claim search results",
        "type": "object"
      },
      "ClaimSearchResultData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ClaimSearchResult"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ClaimSearchResultList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ClaimSearchResultData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ClaimSearchResultWrapper": {
        "description": "Summary information about a active or archived claim returned from a claim search request (Since 1.3.1)",
        "properties": {
          "adjusterName": {
            "description": "The name of the claim's assigned user, or information about the assignment status if the claim is unassigned",
            "title": "Adjuster name",
            "type": "string"
          },
          "archiveState": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Archive state of the claim",
            "title": "Archive state",
            "x-gw-typelist": "ArchiveState"
          },
          "archived": {
            "description": "The claim was archived or not",
            "title": "The claim was archived or not",
            "type": "boolean"
          },
          "archivedAdjuster": {
            "description": "The adjuster that performed the archive",
            "title": "The adjuster that performed the archive",
            "type": "string"
          },
          "assignedGroup": {
            "description": "Assigned group of the claim",
            "title": "Assigned group",
            "type": "string"
          },
          "claimId": {
            "description": "The `id` of the claim",
            "title": "Claim ID",
            "type": "string"
          },
          "claimInfoId": {
            "description": "The `id` of the claimInfo",
            "title": "ClaimInfo ID",
            "type": "string"
          },
          "claimNumber": {
            "description": "The `claimNumber` of the claim",
            "title": "Claim number",
            "type": "string"
          },
          "claimants": {
            "description": "A list of names of claimants on the claim",
            "items": {
              "type": "string"
            },
            "title": "Claimants",
            "type": "array"
          },
          "flagged": {
            "description": "Whether this claim has been flagged",
            "title": "Flagged",
            "type": "boolean"
          },
          "futurePayments": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "Future payments",
            "title": "Future payments"
          },
          "insuredName": {
            "description": "The name of the insured",
            "title": "Insured name",
            "type": "string"
          },
          "lossDate": {
            "description": "The `lossDate` of the claim",
            "format": "date-time",
            "title": "Loss date",
            "type": "string"
          },
          "paid": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "Total paid amount",
            "title": "Total paid amount"
          },
          "policyNumber": {
            "description": "The `policyNumber` of the claim",
            "title": "Policy number",
            "type": "string"
          },
          "remainingReserves": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "Remaining reserves",
            "title": "Remaining reserves"
          },
          "status": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The `state` of the claim, such as `open` or `closed`",
            "title": "Status",
            "x-gw-typelist": "ClaimState"
          }
        },
        "title": "Claim search results",
        "type": "object",
        "x-gw-sinceVersion": "1.3.1"
      },
      "ClaimSearchResultWrapperData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ClaimSearchResultWrapper"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ClaimSearchResultWrapperList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ClaimSearchResultWrapperData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ClaimSearchV2Attributes": {
        "description": "Criteria of active or archived claims to search for (Since 1.3.1)",
        "properties": {
          "archivedSearch": {
            "description": "Search archived claim",
            "title": "Search archived claim",
            "type": "boolean"
          },
          "claimNumber": {
            "description": "The `clamNumber` of the claim",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Claim number",
            "type": "string"
          },
          "companyName": {
            "description": "The name of a company on the claim. By default the search will look for contacts who have the role of `claimant` on the claim. You can use the `nameSearchType` field to change the search to look for contacts with other roles, such as `insured`, or to search all contacts regardless of role.",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Company name",
            "type": "string"
          },
          "firstName": {
            "description": "The first name of a contact on the claim. By default the search will look for contacts who have the role of `claimant` on the claim. You can use the `nameSearchType` field to change the search to look for contacts with other roles, such as `insured`, or to search all contacts regardless of role.",
            "maxLength": 30,
            "minLength": 1,
            "pattern": "\\S",
            "title": "First name",
            "type": "string"
          },
          "lastName": {
            "description": "The last name of a contact on the claim. By default the search will look for contacts who have the role of `claimant` on the claim. You can use the `nameSearchType` field to change the search to look for contacts with other roles, such as `insured`, or to search all contacts regardless of role.",
            "maxLength": 30,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Last name",
            "type": "string"
          },
          "nameSearchType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "When searching by `firstName` or `lastName`, specifies which claim contacts to check based on the contact role. For example, when searching by last name, if this field is set to `insured`, the search will return any claim where the specified last name matches the last name of the contact who is designated as the insured.",
            "title": "Name search type",
            "x-gw-typelist": "ClaimSearchNameSearchType"
          },
          "policyNumber": {
            "description": "The `policyNumber` of the claim's policy",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Policy number",
            "type": "string"
          },
          "taxId": {
            "description": "The claim contact's tax ID",
            "maxLength": 30,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Tax ID",
            "type": "string"
          }
        },
        "title": "Request attributes for active or archived claim search",
        "type": "object",
        "x-gw-sinceVersion": "1.3.1"
      },
      "ClaimSearchV2Request": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimSearchV2RequestData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ClaimSearchV2RequestData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ClaimSearchV2Attributes"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ClaimSolrSearchRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimSolrSearchRequestData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ClaimSolrSearchRequestAttributes": {
        "description": "Criteria of the claim to search for via Solr (Since 1.4.0)",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "An address associated with the claim",
            "title": "Address"
          },
          "name": {
            "description": "The name of a contact on the claim. By default the search will look for contacts who have any role on the claim. You can use the `nameSearchType` field to change the search to look for contacts with other roles, such as `insured`, or to search all contacts regardless of role.",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Name",
            "type": "string"
          },
          "nameSearchType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Specifies which claim contacts to check based on the contact role. For example, if this field is set to `insured`, the search will return any claim where the specified name matches the name of the contact who is designated as the insured.",
            "title": "Name search type",
            "x-gw-typelist": "FreTxtClmSrchNameSrchTyp"
          },
          "phoneNumber": {
            "description": "Phone number on the contact being searched for",
            "maxLength": 30,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Phone number",
            "type": "string"
          }
        },
        "title": "Claim Solr search request attributes",
        "type": "object",
        "x-gw-sinceVersion": "1.4.0"
      },
      "ClaimSolrSearchRequestData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ClaimSolrSearchRequestAttributes"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ClaimSolrSearchResult": {
        "description": "Summary information about a claim returned from a claim Solr search request (Since 1.4.0)",
        "properties": {
          "address": {
            "description": "The `address` of the contact matched to the search result",
            "maxLength": 500,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Address",
            "type": "string"
          },
          "city": {
            "description": "The `city` of the contact matched to the search result",
            "maxLength": 30,
            "minLength": 1,
            "pattern": "\\S",
            "title": "City",
            "type": "string"
          },
          "claimId": {
            "description": "The `id` of the claim",
            "title": "Claim ID",
            "type": "string"
          },
          "claimNumber": {
            "description": "The `claimNumber` of the claim",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Claim number",
            "type": "string"
          },
          "lossDate": {
            "description": "The `lossDate` of the claim",
            "format": "date-time",
            "title": "Loss date",
            "type": "string"
          },
          "name": {
            "description": "The name of the contact matched to the search result",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Name",
            "type": "string"
          },
          "phoneNumber": {
            "description": "The phone number associated with the contact matched to the search result",
            "maxLength": 30,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Phone number",
            "type": "string"
          },
          "policyNumber": {
            "description": "The `policyNumber` of the claim",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Policy number",
            "type": "string"
          },
          "postalCode": {
            "description": "The `postal code` on the address matched to the search result",
            "maxLength": 30,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Postal code",
            "type": "string"
          },
          "rank": {
            "description": "The `rank` of the solr search result",
            "title": "Rank",
            "type": "integer"
          },
          "reportedDate": {
            "description": "The `reportedDate` of the claim",
            "format": "date-time",
            "title": "Reported date",
            "type": "string"
          },
          "roles": {
            "description": "The roles the contact holds on the search result",
            "maxLength": 200,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Roles",
            "type": "string"
          },
          "score": {
            "description": "The relevance `score` of the solr search result",
            "format": "gw-bigdecimal",
            "title": "Score",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The `state` on the address that was matched to the search result",
            "title": "State",
            "x-gw-typelist": "State"
          },
          "status": {
            "description": "The `state` of the claim, such as `open` or `closed`",
            "maxLength": 20,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Status",
            "type": "string"
          }
        },
        "title": "Claim Solr search results",
        "type": "object",
        "x-gw-sinceVersion": "1.4.0",
        "x-gw-sortable": [
          "address",
          "city",
          "claimId",
          "claimNumber",
          "lossDate",
          "name",
          "phoneNumber",
          "policyNumber",
          "postalCode",
          "rank",
          "reportedDate",
          "roles",
          "score",
          "state",
          "status"
        ]
      },
      "ClaimSolrSearchResultData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ClaimSolrSearchResult"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ClaimSolrSearchResultList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ClaimSolrSearchResultData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ClaimSubmitRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimSubmitRequestData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ClaimSubmitRequestAttributes": {
        "properties": {
          "initialAssignment": {
            "$ref": "#/components/schemas/Assignee"
          }
        },
        "type": "object"
      },
      "ClaimSubmitRequestData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ClaimSubmitRequestAttributes"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ClaimValidationData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ValidationResult"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ClaimValidationRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimValidationRequestData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ClaimValidationRequestAttributes": {
        "properties": {
          "validateExposures": {
            "type": "boolean"
          },
          "validationLevel": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "x-gw-typelist": "ValidationLevel"
          }
        },
        "required": [
          "validateExposures",
          "validationLevel"
        ],
        "type": "object"
      },
      "ClaimValidationRequestData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ClaimValidationRequestAttributes"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ClaimValidationResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimValidationData"
          }
        },
        "type": "object"
      },
      "ClaimsList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ClaimData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CodeReference": {
        "description": "A reference object that combines a code with a human-readable name (Since 1.1.0)",
        "properties": {
          "code": {
            "description": "The referenced code",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Code",
            "type": "string"
          },
          "displayName": {
            "description": "The name of the reference",
            "title": "Display name",
            "type": "string"
          }
        },
        "title": "Code reference",
        "type": "object",
        "x-gw-sinceVersion": "1.1.0"
      },
      "ContactRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimContactData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ContactResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimContactData"
          }
        },
        "type": "object"
      },
      "ContactRole": {
        "description": "A role that a contact has on a particular claim or element of the claim",
        "properties": {
          "active": {
            "description": "A `true` value for this field indicates that the contact is still active for this role on the related element",
            "title": "Active",
            "type": "boolean"
          },
          "comments": {
            "description": "Comments regarding this role",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Comments",
            "type": "string"
          },
          "relatedTo": {
            "$ref": "#/components/schemas/GenericRelation",
            "description": "A reference to the element that this role is related to",
            "title": "Related to"
          },
          "role": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "This role this contact plays on the related element",
            "title": "Role",
            "x-gw-typelist": "ContactRole"
          }
        },
        "required": [
          "role",
          "relatedTo"
        ],
        "title": "Contact role",
        "type": "object"
      },
      "ContactRoleConstraint": {
        "description": "Defines constraints related to contact roles, such as whether the role is restricted to certain contact types and whether the role can be assigned to more than one contact",
        "properties": {
          "code": {
            "description": "The `code` of the `ContactRole`",
            "readOnly": true,
            "title": "Code",
            "type": "string"
          },
          "name": {
            "description": "The `name` of the `ContactRole`",
            "readOnly": true,
            "title": "Name",
            "type": "string"
          },
          "schemaConstraints": {
            "description": "A list of constraints specific to this role",
            "items": {
              "$ref": "#/components/schemas/RoleSchemaConstraint"
            },
            "title": "Schema constraints",
            "type": "array"
          },
          "subtype": {
            "description": "The subtype that a contact must be in order to have this role, if the role is restricted to a particular subtype",
            "readOnly": true,
            "title": "Subtype",
            "type": "string"
          }
        },
        "title": "Contact role constraint",
        "type": "object",
        "x-gw-filterable": [
          "subtype"
        ],
        "x-gw-sortable": [
          "code"
        ]
      },
      "ContactRoleConstraintData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ContactRoleConstraint"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ContactRoleConstraintList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ContactRoleConstraintData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ContactRoleConstraintResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ContactRoleConstraintData"
          }
        },
        "type": "object"
      },
      "CovTerm": {
        "description": "A term on a coverage, condition, or exclusion",
        "properties": {
          "code": {
            "description": "The classification code value for the term. Only applicable if `covTermSubtype` is `ClassificationCovTerm`.",
            "maxLength": 100,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Code",
            "type": "string"
          },
          "covTermOrder": {
            "description": "The order of this coverage term relative to other terms on the same coverage. Used to present the terms in sorted order.",
            "nullable": true,
            "title": "Coverage term order",
            "type": "integer"
          },
          "covTermPattern": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The specific pattern for this term. The pattern defines the type of value that the term carries.",
            "nullable": true,
            "title": "Coverage term pattern",
            "x-gw-typelist": "CovTermPattern"
          },
          "covTermSubtype": {
            "description": "The specific subtype of coverage term. This field determines what other fields are available. (Since 1.2.0)",
            "title": "Coverage term subtype",
            "type": "string",
            "x-gw-createOnly": true,
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-type": "typekey.CovTerm"
          },
          "description": {
            "description": "A description of the classification code value for the term. Only applicable if `covTermSubtype` is `ClassificationCovTerm`.",
            "maxLength": 100,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "financialAmount": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The value of the coverage term as a monetary amount. Only applicable if `covTermSubtype` is `FinancialCovTerm`.",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "title": "Financial amount"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "modelAggregation": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Describes how aggregate limits are determined for this coverage term",
            "nullable": true,
            "title": "Model aggregation",
            "x-gw-typelist": "CovTermModelAgg"
          },
          "modelRestriction": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "A sub-categorization of the term that further refines what the model type on the `covTermPattern` applies to in the context of this term",
            "nullable": true,
            "title": "Model restriction",
            "x-gw-typelist": "CovTermModelRest"
          },
          "numericValue": {
            "description": "The value of the coverage term as a decimal. Only applicable if `covTermSubtype` is `NumericCovTerm`.",
            "format": "gw-bigdecimal",
            "title": "Numeric value",
            "type": "string"
          },
          "policySystemId": {
            "description": "The unique identifier of this element within the policy system (Since 1.2.0)",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Policy system ID",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "units": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of units that apply to the `numericValue` of this coverage term. Only applicable if `covTermSubtype` is `NumericCovTerm`.",
            "nullable": true,
            "title": "Units",
            "x-gw-typelist": "CovTermModelVal"
          },
          "value": {
            "description": "The value of this term",
            "readOnly": true,
            "title": "Value",
            "type": "string"
          }
        },
        "title": "Coverage term",
        "type": "object",
        "x-gw-requiredForCreate": [
          "covTermSubtype",
          "financialAmount",
          "numericValue"
        ]
      },
      "Coverage": {
        "description": "A coverage, condition, or exclusion on an insurance policy or risk unit",
        "properties": {
          "claimAggLimit": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The per-claim limit of PIP coverage. Only applicable to PIP vehicle coverages.",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "PIP claim aggregate limit"
          },
          "coinsurance": {
            "description": "The coinsurance percentage. Only applicable to property coverages. (Since 1.2.0)",
            "format": "gw-bigdecimal",
            "nullable": true,
            "title": "Coinsurance",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "covTerms": {
            "description": "The list of terms for this coverage",
            "items": {
              "$ref": "#/components/schemas/CovTerm"
            },
            "title": "Coverage terms",
            "type": "array"
          },
          "coverageBasis": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The method used for determining the coverage value for damaged property. Only applicable to property coverages. (Since 1.2.0)",
            "nullable": true,
            "title": "Coverage basis",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "CoverageBasis"
          },
          "coverageSubtype": {
            "description": "If the coverage is a risk unit coverage, the type of coverage to create, such as `VehicleCoverage` or `RUCoverage`. If null uses a coverage type that matches the parent risk unit. (Since 1.5.0)",
            "title": "Coverage subtype",
            "type": "string",
            "x-gw-createOnly": true,
            "x-gw-sinceVersion": "1.5.0",
            "x-gw-type": "typekey.Coverage"
          },
          "coverageType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The specific type of coverage represented by this element. The `coverageType` corresponds to the particular coverage code within the policy system.",
            "title": "Coverage type",
            "x-gw-typelist": "CoverageType"
          },
          "currency": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The currency of the coverage",
            "title": "Currency",
            "x-gw-typelist": "Currency"
          },
          "effectiveDate": {
            "description": "The date and time when this coverage became effective",
            "format": "date-time",
            "nullable": true,
            "title": "Effective date",
            "type": "string"
          },
          "expirationDate": {
            "description": "The date and time when this coverage ceased being effective",
            "format": "date-time",
            "nullable": true,
            "title": "Expiration date",
            "type": "string"
          },
          "exposureLimit": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The coverage limit per exposure",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "Exposure limit"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "incidentLimit": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The coverage limit per incident",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "Incident limit"
          },
          "limitsIndicator": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Indicates whether the coverage limits are part of a combined single limit",
            "nullable": true,
            "title": "Limits indicator",
            "x-gw-typelist": "LimitsIndicator"
          },
          "nonmedAggLimit": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The aggregate limit for non-medical PIP coverage. Only applicable to PIP vehicle coverages.",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "PIP non-medical aggregate limit"
          },
          "notes": {
            "description": "Additional comments about this coverage",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Notes",
            "type": "string"
          },
          "personAggLimit": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The aggregate limit per-person for PIP coverage. Only applicable to PIP vehicle coverages.",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "PIP per-person aggregate limit"
          },
          "policySystemId": {
            "description": "The unique identifier of this element within the policy system (Since 1.2.0)",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Policy system ID",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "replaceAggLimit": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The aggregate limit for PIP lost wage and replacement services coverage. Only applicable to PIP vehicle coverages.",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "PIP replacement aggregate limit"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The state that this coverage is applicable, if the coverage is state-specific",
            "nullable": true,
            "title": "State",
            "x-gw-typelist": "State"
          }
        },
        "title": "Coverage",
        "type": "object",
        "x-gw-filterable": [
          "coverageType"
        ],
        "x-gw-requiredForCreate": [
          "coverageType"
        ],
        "x-gw-sortable": [
          "coverageSubtype",
          "coverageType"
        ]
      },
      "CoverageData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Coverage"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "CoverageIssue": {
        "description": "A potential problem related to coverage (Since 1.2.0)",
        "properties": {
          "coverageSubtype": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of coverage this issue relates to",
            "nullable": true,
            "title": "Coverage subtype",
            "x-gw-typelist": "CoverageSubtype"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "reason": {
            "description": "The reason this issue was raised",
            "maxLength": 65000,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Reason",
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The severity of the issue",
            "title": "Severity",
            "x-gw-typelist": "CoverageIssueSeverity"
          }
        },
        "title": "Coverage issue",
        "type": "object",
        "x-gw-sinceVersion": "1.2.0"
      },
      "Deductible": {
        "description": "Amount to deduct from payments (Since 1.3.0)",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "Deductible amount to be applied to a payment",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "title": "Amount"
          },
          "amountApplied": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The amount applied on this deductible",
            "title": "Amount applied"
          },
          "amountRemaining": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The amount of this deductible that has not yet been applied",
            "title": "Amount remaining"
          },
          "waived": {
            "description": "Specifies whether this deductible has been waived",
            "title": "Waived",
            "type": "boolean"
          }
        },
        "title": "Deductible",
        "type": "object",
        "x-gw-sinceVersion": "1.3.0"
      },
      "Document": {
        "description": "A `Document` represents a document within the application, which can have additional metadata such as the author of the document or a specific security level. The actual contents of the document are generally stored in a separate document management system that this application is linked to. (Since 1.1.0)",
        "properties": {
          "author": {
            "description": "The name of the person who created this document",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Author",
            "type": "string"
          },
          "dateModified": {
            "description": "The date and time that this `Document` was most recently updated",
            "format": "date-time",
            "readOnly": true,
            "title": "Date modified",
            "type": "string"
          },
          "description": {
            "description": "A description of this document",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "docUID": {
            "description": "The unique identifier for this `Document` in the linked document management system. The exact format of the identifier depends upon the specifics of the document management system the application is linked to.",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Document UID",
            "type": "string",
            "x-gw-createOnly": true,
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "id": {
            "description": "The unique identifier of this `Document`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "inbound": {
            "description": "This field indicates whether this document is considered to be inbound, outbound, or neither",
            "nullable": true,
            "title": "Inbound",
            "type": "boolean"
          },
          "language": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The language in which this document was produced",
            "nullable": true,
            "title": "Language",
            "x-gw-typelist": "LanguageType"
          },
          "mimeType": {
            "description": "The MIME type of this document, such as `application/msword` for a Microsoft Word document",
            "maxLength": 80,
            "minLength": 1,
            "pattern": "\\S",
            "title": "MIME type",
            "type": "string"
          },
          "name": {
            "description": "The name of this document",
            "maxLength": 80,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Name",
            "type": "string"
          },
          "obsolete": {
            "description": "Setting this field to `true` indicates that the information in this document can no longer be relied upon to be current and relevant. This is often used instead of deletion to preserve history.",
            "nullable": true,
            "title": "Obsolete",
            "type": "boolean"
          },
          "recipient": {
            "description": "The name of the intended recipient of this document",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Recipient",
            "type": "string"
          },
          "relatedTo": {
            "$ref": "#/components/schemas/GenericRelation",
            "description": "A reference to the element that this document is related to",
            "title": "Related to"
          },
          "section": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The section to which this document belongs",
            "nullable": true,
            "title": "Section",
            "x-gw-typelist": "DocumentSection"
          },
          "securityType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The security level that has been assigned to this document",
            "nullable": true,
            "title": "Security type",
            "x-gw-typelist": "DocumentSecurityType"
          },
          "status": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The current status of this document, such as `draft` or `approved`",
            "title": "Status",
            "x-gw-typelist": "DocumentStatusType"
          },
          "type": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The specific type of document",
            "title": "Type",
            "x-gw-typelist": "DocumentType"
          }
        },
        "title": "Document",
        "type": "object",
        "x-gw-filterable": [
          "name",
          "section",
          "status",
          "type"
        ],
        "x-gw-requiredForCreate": [
          "name",
          "status",
          "type"
        ],
        "x-gw-sinceVersion": "1.1.0",
        "x-gw-sortable": [
          "dateModified",
          "name"
        ]
      },
      "DocumentContent": {
        "description": "The contents of a `Document` (Since 1.1.0)",
        "properties": {
          "contents": {
            "description": "The contents of this document as a Base64-encoded string",
            "format": "byte",
            "readOnly": true,
            "title": "Contents",
            "type": "string"
          },
          "responseMimeType": {
            "description": "The MIME type of this document's contents, such as `application/msword` for a Microsoft Word document",
            "readOnly": true,
            "title": "Response MIME type",
            "type": "string"
          },
          "url": {
            "description": "The URL of this document within the linked document management system",
            "readOnly": true,
            "title": "URL",
            "type": "string"
          }
        },
        "title": "Document content",
        "type": "object",
        "x-gw-sinceVersion": "1.1.0"
      },
      "DocumentContentData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/DocumentContent"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "DocumentContentsResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DocumentContentData"
          }
        },
        "type": "object"
      },
      "DocumentData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Document"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "DocumentList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/DocumentData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DocumentResponseInclusions": {
        "properties": {
          "ClaimDocumentContent": {
            "items": {
              "$ref": "#/components/schemas/DocumentContentData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DwellingIncident": {
        "description": "A loss involving fixed property used for dwelling, such as a home or condominium",
        "properties": {
          "automationPath": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The path taken by the automated system that created this incident. Only intended for use by automated systems. (Since 1.3.0)",
            "nullable": true,
            "title": "Automation path",
            "x-gw-sinceVersion": "1.3.0",
            "x-gw-typelist": "AutomationPath"
          },
          "damagedAreaSize": {
            "description": "The size of the damaged area in square feet, square meters, or other units of measurement",
            "exclusiveMinimum": true,
            "minimum": 0,
            "nullable": true,
            "title": "Damaged area size",
            "type": "integer"
          },
          "description": {
            "description": "A general description of the incident",
            "maxLength": 1333,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "dwellingRoomDamages": {
            "description": "A list of types of rooms that were damaged by this incident",
            "items": {
              "$ref": "#/components/schemas/DwellingRoomDamage"
            },
            "title": "Dwelling room damages",
            "type": "array"
          },
          "fireProtectionAvailable": {
            "description": "A `true` value indicates that fire protection is available",
            "nullable": true,
            "title": "Fire protection available",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/PolicyLocation",
            "description": "The location of the property",
            "nullable": true,
            "title": "Location"
          },
          "lossParty": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of loss party, generally either the insured or a third party",
            "nullable": true,
            "title": "Loss party",
            "x-gw-typelist": "LossPartyType"
          },
          "materialsDamaged": {
            "description": "A description of materials that were damaged, such as floors or walls",
            "maxLength": 250,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Materials damaged",
            "type": "string"
          },
          "numberOfPeopleOnPolicy": {
            "description": "The number of people on the policy",
            "exclusiveMinimum": false,
            "minimum": 0,
            "nullable": true,
            "title": "Number of people on policy",
            "type": "integer"
          },
          "occupancyType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Indicates the occupancy status of the property that was affected",
            "nullable": true,
            "title": "Occupancy type",
            "x-gw-typelist": "OccupancyType"
          },
          "propertySize": {
            "description": "The size of the property in square feet, square meters, or other units of measurement",
            "exclusiveMinimum": true,
            "minimum": 0,
            "nullable": true,
            "title": "Property size",
            "type": "integer"
          },
          "severity": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The severity of the loss",
            "nullable": true,
            "title": "Severity",
            "x-gw-typelist": "SeverityType"
          },
          "yearBuilt": {
            "description": "The year in which the property was built",
            "format": "date-time",
            "nullable": true,
            "title": "Year built",
            "type": "string",
            "x-gw-before": "now"
          },
          "yearsInHome": {
            "description": "The number of years the insured has lived in the home",
            "exclusiveMinimum": false,
            "minimum": 0,
            "nullable": true,
            "title": "Years in home",
            "type": "integer"
          }
        },
        "title": "Dwelling incident",
        "type": "object",
        "x-gw-sortable": [
          "description",
          "occupancyType"
        ]
      },
      "DwellingIncidentData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/DwellingIncident"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "DwellingIncidentList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/DwellingIncidentData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DwellingIncidentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DwellingIncidentData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "DwellingIncidentResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DwellingIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "DwellingRoomDamage": {
        "description": "Details of damage to a specific room or type of room",
        "properties": {
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "numberOfRooms": {
            "description": "The number of rooms of this type that were affected by the loss",
            "exclusiveMinimum": true,
            "minimum": 0,
            "nullable": true,
            "title": "Number of rooms",
            "type": "integer"
          },
          "roomType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of room that was damaged",
            "nullable": true,
            "title": "Room type",
            "x-gw-typelist": "RoomType"
          }
        },
        "title": "Dwelling room damage",
        "type": "object"
      },
      "Endorsement": {
        "description": "Represents an endorsement form applied to a policy that makes some modification to it",
        "properties": {
          "comments": {
            "description": "Additional notes about the endorsement",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Comments",
            "type": "string"
          },
          "description": {
            "description": "A description of the endorsement and what it alters",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "effectiveDate": {
            "description": "The date and time when the endorsement becomes effective",
            "format": "date-time",
            "nullable": true,
            "title": "Effective date",
            "type": "string"
          },
          "expirationDate": {
            "description": "The date and time when the endorsement ceases to be effective",
            "format": "date-time",
            "nullable": true,
            "title": "Expiration date",
            "type": "string"
          },
          "formNumber": {
            "description": "The code for the endorsement form",
            "maxLength": 64,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Form number",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          }
        },
        "title": "Endorsement",
        "type": "object",
        "x-gw-sortable": [
          "formNumber"
        ]
      },
      "EndorsementData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Endorsement"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "Exposure": {
        "description": "An object on a claim that manages potential payments from a specific coverage to a specific claimant",
        "properties": {
          "allValidationLevelsReached": {
            "description": "The list of all the validation levels that this exposure has passed (Since 1.3.0)",
            "items": {
              "$ref": "#/components/schemas/TypeKeyReference",
              "x-gw-typelist": "ValidationLevel"
            },
            "readOnly": true,
            "title": "All validation levels reached",
            "type": "array",
            "x-gw-sinceVersion": "1.3.0"
          },
          "assignedByUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` who last assigned this exposure",
            "readOnly": true,
            "title": "Assigned by user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "assignedGroup": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `Group` that this exposure is assigned to",
            "readOnly": true,
            "title": "Assigned group",
            "x-gw-reference-schema": "Group",
            "x-gw-referenceType": "Group"
          },
          "assignedQueue": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `AssignableQueue` that this exposure is assigned to",
            "readOnly": true,
            "title": "Assigned queue",
            "x-gw-reference-schema": "AssignableQueue",
            "x-gw-referenceType": "AssignableQueue"
          },
          "assignedUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` that this exposure is assigned to",
            "readOnly": true,
            "title": "Assigned user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "assignmentStatus": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The assignment status of this exposure, such as `assigned` or `unassigned`",
            "readOnly": true,
            "title": "Assignment status",
            "x-gw-typelist": "AssignmentStatus"
          },
          "autopilotStatus": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The status of this exposure in the Claims Autopilot automated system. Only intended for use by the Claims Autopilot system. (Since 1.2.0)",
            "title": "Autopilot status",
            "x-gw-defaultViews": [
              "none"
            ],
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "ExposureAutopilotStatus"
          },
          "baggageIncident": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `BaggageIncident` associated with this exposure (Since 1.5.0)",
            "nullable": true,
            "title": "Baggage incident",
            "x-gw-reference-schema": "BaggageIncident",
            "x-gw-referenceType": "BaggageIncident",
            "x-gw-sinceVersion": "1.5.0"
          },
          "claimOrder": {
            "description": "The assigned number of this exposure",
            "title": "Claim order",
            "type": "integer"
          },
          "claimant": {
            "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
            "description": "A reference to the `ClaimContact` that represents the claimant for this exposure",
            "nullable": true,
            "title": "Claimant",
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact"
          },
          "claimantType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The relationship of this exposure's claimant to the policy holder",
            "nullable": true,
            "title": "Claimant type",
            "x-gw-typelist": "ClaimantType"
          },
          "closeDate": {
            "description": "The date and time when this exposure was closed",
            "format": "date-time",
            "readOnly": true,
            "title": "Close date",
            "type": "string"
          },
          "closedOutcome": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The outcome reached when closing this exposure",
            "readOnly": true,
            "title": "Closed outcome",
            "x-gw-typelist": "ExposureClosedOutcomeType"
          },
          "contactPermitted": {
            "description": "Indicates whether contact is permitted with the claimant for this exposure",
            "nullable": true,
            "title": "Contact permitted",
            "type": "boolean"
          },
          "coverage": {
            "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
            "description": "A reference to the `Coverage` that applies to this exposure",
            "nullable": true,
            "title": "Coverage",
            "x-gw-reference-schema": "Coverage",
            "x-gw-referenceType": "PolicyCoverage"
          },
          "coverageSubtype": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The subtype of coverage that applies to this exposure",
            "nullable": true,
            "title": "Coverage subtype",
            "x-gw-createOnly": true,
            "x-gw-typelist": "CoverageSubtype"
          },
          "createdVia": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Indicates how this exposure was created, such as user entry or automated rules",
            "readOnly": true,
            "title": "Created via",
            "x-gw-typelist": "CreatedVia"
          },
          "deductible": {
            "$ref": "#/components/schemas/Deductible",
            "description": "Deductible on the coverage associated with this exposure (Since 1.3.0)",
            "readOnly": true,
            "title": "Deductible",
            "x-gw-sinceVersion": "1.3.0"
          },
          "dwellingIncident": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `DwellingIncident` associated with this exposure",
            "nullable": true,
            "title": "Dwelling incident",
            "x-gw-reference-schema": "DwellingIncident",
            "x-gw-referenceType": "DwellingIncident"
          },
          "fixedPropertyIncident": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `FixedPropertyIncident` associated with this exposure",
            "nullable": true,
            "title": "Fixed property incident",
            "x-gw-reference-schema": "FixedPropertyIncident",
            "x-gw-referenceType": "FixedPropertyIncident"
          },
          "generalIncident": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `GeneralIncident` associated with this exposure (Since 1.5.0)",
            "nullable": true,
            "title": "General incident",
            "x-gw-reference-schema": "GeneralIncident",
            "x-gw-referenceType": "GeneralIncident",
            "x-gw-sinceVersion": "1.5.0"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "injuryIncident": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `InjuryIncident` associated with this exposure",
            "nullable": true,
            "title": "Injury incident",
            "x-gw-reference-schema": "InjuryIncident",
            "x-gw-referenceType": "InjuryIncident"
          },
          "jurisdiction": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The legal jurisdiction that applies to this exposure, if that jurisdiction differs from the jurisdiction where the loss occurred",
            "nullable": true,
            "title": "Jurisdiction",
            "x-gw-typelist": "Jurisdiction"
          },
          "livingExpensesIncident": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `LivingExpensesIncident` associated with this exposure",
            "nullable": true,
            "title": "Living expenses incident",
            "x-gw-reference-schema": "LivingExpensesIncident",
            "x-gw-referenceType": "LivingExpensesIncident"
          },
          "lossCategory": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The detailed category that describes the loss",
            "nullable": true,
            "title": "Loss category",
            "x-gw-typelist": "LossCategory"
          },
          "lossParty": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of loss party, generally either the insured or a third party",
            "title": "Loss party",
            "x-gw-filterBy": [
              "coverageSubtype"
            ],
            "x-gw-typelist": "LossPartyType"
          },
          "otherCoverage": {
            "description": "A `true` value indicates that the claimant has additional coverage",
            "nullable": true,
            "title": "Other coverage",
            "type": "boolean"
          },
          "otherStructureIncident": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `OtherStructureIncident` associated with this exposure (Since 1.4.0)",
            "nullable": true,
            "title": "Other structure incident",
            "x-gw-reference-schema": "OtherStructureIncident",
            "x-gw-referenceType": "OtherStructureIncident",
            "x-gw-sinceVersion": "1.4.0"
          },
          "primaryCoverage": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of coverage that applies to this exposure",
            "title": "Primary coverage",
            "x-gw-createOnly": true,
            "x-gw-typelist": "CoverageType"
          },
          "progress": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Indicates the current progress for an open exposure",
            "nullable": true,
            "title": "Progress",
            "x-gw-typelist": "ExposureProgressType"
          },
          "propertyContentsIncident": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `PropertyContentsIncident` associated with this exposure (Since 1.4.0)",
            "nullable": true,
            "title": "Property contents incident",
            "x-gw-reference-schema": "PropertyContentsIncident",
            "x-gw-referenceType": "PropertyContentsIncident",
            "x-gw-sinceVersion": "1.4.0"
          },
          "reopenDate": {
            "description": "The date and time when this exposure was reopened",
            "format": "date-time",
            "readOnly": true,
            "title": "Reopen date",
            "type": "string"
          },
          "reopenedReason": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The reason why this exposure was reopened",
            "readOnly": true,
            "title": "Reopen reason",
            "x-gw-typelist": "ExposureReopenedReason"
          },
          "securityLevel": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The security level of this exposure",
            "title": "Security level",
            "x-gw-createOnly": true,
            "x-gw-typelist": "ExposureSecurityType"
          },
          "segment": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The segment assigned to this exposure",
            "readOnly": true,
            "title": "Segment",
            "x-gw-typelist": "ClaimSegment"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The current status of the exposure, such as `open` or `closed`",
            "readOnly": true,
            "title": "State",
            "x-gw-typelist": "ExposureState"
          },
          "strategy": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The strategy assigned to this exposure",
            "readOnly": true,
            "title": "Strategy",
            "x-gw-typelist": "ClaimStrategy"
          },
          "tier": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The tier of this exposure, used to decide how to rate the exposure metrics",
            "nullable": true,
            "title": "Tier",
            "x-gw-typelist": "ExposureTier"
          },
          "tripIncident": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `TripIncident` associated with this exposure (Since 1.5.0)",
            "nullable": true,
            "title": "Trip incident",
            "x-gw-reference-schema": "TripIncident",
            "x-gw-referenceType": "TripIncident",
            "x-gw-sinceVersion": "1.5.0"
          },
          "type": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The general type of the exposure",
            "readOnly": true,
            "title": "Type",
            "x-gw-typelist": "ExposureType"
          },
          "validationLevel": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The validation level of this exposure. If the exposure `state` is `open`, edits to this exposure must pass validation rules at this validation level and all lower validation levels.",
            "readOnly": true,
            "title": "Validation level",
            "x-gw-typelist": "ValidationLevel"
          },
          "vehicleIncident": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `VehicleIncident` associated with this exposure",
            "nullable": true,
            "title": "Vehicle incident",
            "x-gw-reference-schema": "VehicleIncident",
            "x-gw-referenceType": "VehicleIncident"
          }
        },
        "title": "Exposure",
        "type": "object",
        "x-gw-requiredForCreate": [
          "coverageSubtype",
          "primaryCoverage"
        ],
        "x-gw-sortable": [
          "claimOrder",
          "coverageSubtype",
          "primaryCoverage",
          "type"
        ]
      },
      "ExposureAssignee": {
        "description": "The target of an assignment action, such as a user/group combination or automatic rule-based assignment (Since 1.2.0)",
        "properties": {
          "autoAssign": {
            "description": "Set to `true` to indicate the assignment should be done by assignment rules. Cannot be combined with any other assignment criteria fields.",
            "title": "Auto assign",
            "type": "boolean"
          },
          "claimOwner": {
            "description": "Set to `true` to indicate that the exposure should be assigned to the same user and group that own the exposure's claim",
            "title": "Claim owner",
            "type": "boolean"
          },
          "groupId": {
            "description": "The ID of the `Group` that the exposure should be assigned to. If specified without the `userId` field, the `User` within the `Group` is selected by assignment rules. If specified along with the `userId` field, that specific `User` is assigned the element.",
            "title": "Group ID",
            "type": "string"
          },
          "name": {
            "description": "A human-readable name for the type of assignment that this `ExposureAssignee` represents",
            "readOnly": true,
            "title": "Name",
            "type": "string"
          },
          "userId": {
            "description": "The ID of the `User` that the exposure should be assigned to. The `groupId` field must also be specified if the `userId` field is specified, and the `User` must be a member of that `Group` and have permission to be assigned the element.",
            "title": "User ID",
            "type": "string"
          }
        },
        "title": "Exposure assignee",
        "type": "object",
        "x-gw-sinceVersion": "1.2.0"
      },
      "ExposureAssigneeData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ExposureAssignee"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ExposureAssignmentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ExposureAssigneeData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ExposureCloseRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ExposureCloseRequestData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ExposureCloseRequestAttributes": {
        "properties": {
          "closedOutcome": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "x-gw-typelist": "ExposureClosedOutcomeType"
          },
          "reason": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExposureCloseRequestData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ExposureCloseRequestAttributes"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ExposureData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Exposure"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ExposureReopenRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ExposureReopenRequestData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ExposureReopenRequestAttributes": {
        "description": "Exposure reopen request attributes (Since 1.6.0)",
        "properties": {
          "note": {
            "description": "A detailed explanation for reopening the exposure",
            "title": "note",
            "type": "string"
          },
          "reason": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The reason type for reopening the exposure",
            "title": "reason",
            "x-gw-typelist": "ExposureReopenedReason"
          }
        },
        "title": "Exposure reopen request attributes",
        "type": "object",
        "x-gw-sinceVersion": "1.6.0"
      },
      "ExposureReopenRequestData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ExposureReopenRequestAttributes"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ExposureRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ExposureData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ExposureResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ExposureData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "ExposureValidationData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ValidationResult"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ExposureValidationRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ExposureValidationRequestData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ExposureValidationRequestAttributes": {
        "properties": {
          "validateClaim": {
            "type": "boolean"
          },
          "validationLevel": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "x-gw-typelist": "ValidationLevel"
          }
        },
        "required": [
          "validateClaim",
          "validationLevel"
        ],
        "type": "object"
      },
      "ExposureValidationRequestData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ExposureValidationRequestAttributes"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ExposureValidationResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ExposureValidationData"
          }
        },
        "type": "object"
      },
      "ExposuresList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ExposureData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FixedPropertyIncident": {
        "description": "A report of an incident involving property at a fixed location such as a building",
        "properties": {
          "automationPath": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The path taken by the automated system that created this incident. Only intended for use by automated systems. (Since 1.3.0)",
            "nullable": true,
            "title": "Automation path",
            "x-gw-sinceVersion": "1.3.0",
            "x-gw-typelist": "AutomationPath"
          },
          "description": {
            "description": "A general description of the incident",
            "maxLength": 1333,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/PolicyLocation",
            "description": "The location of the property",
            "nullable": true,
            "title": "Location"
          },
          "lossParty": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of loss party, generally either the insured or a third party",
            "nullable": true,
            "title": "Loss party",
            "x-gw-typelist": "LossPartyType"
          },
          "occupancyType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The occupancy status of the property",
            "nullable": true,
            "title": "Occupancy type",
            "x-gw-typelist": "OccupancyType"
          },
          "severity": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The severity of the loss",
            "nullable": true,
            "title": "Severity",
            "x-gw-typelist": "SeverityType"
          }
        },
        "title": "Fixed property incident",
        "type": "object",
        "x-gw-sortable": [
          "description",
          "occupancyType"
        ]
      },
      "FixedPropertyIncidentData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/FixedPropertyIncident"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "FixedPropertyIncidentList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/FixedPropertyIncidentData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FixedPropertyIncidentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FixedPropertyIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "FixedPropertyIncidentResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FixedPropertyIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "GeneralIncident": {
        "description": "A report of an incident (Since 1.5.0)",
        "properties": {
          "description": {
            "description": "A general description of the incident",
            "maxLength": 1333,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "lossParty": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of loss party, generally either the insured or a third party",
            "nullable": true,
            "title": "Loss party",
            "x-gw-typelist": "LossPartyType"
          },
          "severity": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The severity of the loss",
            "nullable": true,
            "title": "Severity",
            "x-gw-typelist": "SeverityType"
          }
        },
        "title": "General incident",
        "type": "object",
        "x-gw-filterable": [
          "lossParty",
          "severity"
        ],
        "x-gw-sinceVersion": "1.5.0",
        "x-gw-sortable": [
          "description",
          "lossParty",
          "severity"
        ]
      },
      "GeneralIncidentData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/GeneralIncident"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "GeneralIncidentList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/GeneralIncidentData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GeneralIncidentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GeneralIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "GeneralIncidentResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GeneralIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "GenericRelation": {
        "description": "A reference to a related element",
        "properties": {
          "displayName": {
            "description": "The formatted name of the referenced element",
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the referenced element",
            "title": "ID",
            "type": "string"
          },
          "jsonPath": {
            "description": "The path to the referenced element within the overall JSON document",
            "readOnly": true,
            "title": "JSON path",
            "type": "string",
            "x-gw-defaultViews": [
              "none"
            ]
          },
          "type": {
            "description": "The type of the referenced element",
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The canonical URI for the referenced element",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "Generic relation",
        "type": "object",
        "x-gw-resourceReference": true
      },
      "GenericRelationData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/GenericRelation"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "GenericRelationList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/GenericRelationData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Header": {
        "description": "An HTTP request or response header",
        "properties": {
          "name": {
            "description": "The header name",
            "title": "Name",
            "type": "string"
          },
          "value": {
            "description": "The header value",
            "title": "Value",
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "title": "Header",
        "type": "object"
      },
      "InjuryBodyPart": {
        "description": "Details of an injury to a specific body part",
        "properties": {
          "detailedBodyPart": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The specific body part that was injured",
            "title": "Detailed body part",
            "x-gw-filterBy": [
              "primaryBodyPart"
            ],
            "x-gw-typelist": "DetailedBodyPartType"
          },
          "detailedBodyPartDesc": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "A more specific code for the injury, used if the value of the `detailedBodyPart` field can be further refined",
            "nullable": true,
            "title": "Detailed body part description",
            "x-gw-filterBy": [
              "detailedBodyPart"
            ],
            "x-gw-typelist": "DetailedBodyPartDesc"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "impairmentPercentage": {
            "description": "Percentage of permanent impairment in functionality",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 100,
            "minimum": 0,
            "nullable": true,
            "title": "Impairment percentage",
            "type": "integer"
          },
          "ordering": {
            "description": "The order of this element relative to other body parts on the same injury incident",
            "title": "Ordering",
            "type": "integer"
          },
          "primaryBodyPart": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The area of the body where the injury is located",
            "title": "Primary body part",
            "x-gw-typelist": "BodyPartType"
          },
          "sideOfBody": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The side of the body on which the injury is located",
            "nullable": true,
            "title": "Side of body",
            "x-gw-typelist": "SideOfBody"
          }
        },
        "title": "Injured body party",
        "type": "object"
      },
      "InjuryIncident": {
        "description": "Information about a bodily injury",
        "properties": {
          "ambulanceUsed": {
            "description": "A `true` value indicates that an ambulance was used",
            "nullable": true,
            "title": "Ambulance used",
            "type": "boolean"
          },
          "automationPath": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The path taken by the automated system that created this incident. Only intended for use by automated systems. (Since 1.3.0)",
            "nullable": true,
            "title": "Automation path",
            "x-gw-sinceVersion": "1.3.0",
            "x-gw-typelist": "AutomationPath"
          },
          "bodyParts": {
            "description": "A list of `InjuryBodyPart` elements that describe the specific injuries that were sustained",
            "items": {
              "$ref": "#/components/schemas/InjuryBodyPart"
            },
            "title": "Body parts",
            "type": "array",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "dateOfDeath": {
            "description": "The date of death, if the severity of this incident is `fatal` (Since 1.4.0)",
            "format": "date-time",
            "nullable": true,
            "title": "Date of death",
            "type": "string",
            "x-gw-sinceVersion": "1.4.0"
          },
          "description": {
            "description": "A general description of the incident",
            "maxLength": 1333,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "detailedInjuryType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "A more specific categorization of the injury",
            "nullable": true,
            "title": "Detailed injury type",
            "x-gw-filterBy": [
              "generalInjuryType"
            ],
            "x-gw-typelist": "DetailedInjuryType"
          },
          "disabledDueToAccident": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The level of disability caused by the injury",
            "nullable": true,
            "title": "Disabled due to accident",
            "x-gw-typelist": "DisabledDueToAccident"
          },
          "generalInjuryType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The general category of injury",
            "nullable": true,
            "title": "General injury type",
            "x-gw-typelist": "InjuryType"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "injuredPerson": {
            "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
            "description": "A reference to the `ClaimContact` that represents the injured person",
            "title": "Injured person",
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact"
          },
          "lossParty": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of loss party, generally either the insured or a third party",
            "nullable": true,
            "title": "Loss party",
            "x-gw-typelist": "LossPartyType"
          },
          "lostWages": {
            "description": "A `true` value indicates that the injured person lost wages as a result of the injury",
            "nullable": true,
            "title": "Lost wages",
            "type": "boolean"
          },
          "primaryDoctor": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `ClaimContact` that represents the primary doctor that treated the injury",
            "nullable": true,
            "title": "Primary doctor",
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact"
          },
          "severity": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The severity of the loss",
            "nullable": true,
            "title": "Severity",
            "x-gw-typelist": "SeverityType"
          },
          "treatmentType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of treatment received for the injury",
            "nullable": true,
            "title": "Treatment type",
            "x-gw-typelist": "MedicalTreatmentType"
          }
        },
        "title": "Injury incident",
        "type": "object",
        "x-gw-sortable": [
          "description"
        ]
      },
      "InjuryIncidentData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/InjuryIncident"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "InjuryIncidentList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/InjuryIncidentData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "InjuryIncidentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InjuryIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "InjuryIncidentResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InjuryIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "IntakeInteraction": {
        "description": "A request to gather data from a claim contact, such as the insured or a claimant, using an intake flow (Since 1.3.0)",
        "properties": {
          "claimContact": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "The contact who will provide data via an intake flow, such as the insured or a claimant",
            "title": "Claim contact",
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact"
          },
          "claimSnapshotURL": {
            "description": "Snapshot URL of the claim from AppEvents service, which led to this interaction. Provides claim data for subsequent processing.",
            "maxLength": 1333,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Claim snapshot URL",
            "type": "string"
          },
          "createTime": {
            "description": "The date and time when this `IntakeInteraction` was created",
            "format": "date-time",
            "readOnly": true,
            "title": "Create time",
            "type": "string"
          },
          "description": {
            "description": "A description of this IntakeInteraction, for display to the claim contact who will fulfill it",
            "maxLength": 1333,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "intakeId": {
            "description": "Identifier of the intake flow to be presented to the claim contact to gather data",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Intake flow ID",
            "type": "string"
          },
          "intakeInputs": {
            "description": "A JSON object that contains data for use by the intake flow that is not available on the claim",
            "title": "Intake inputs",
            "type": "object"
          },
          "intakeResults": {
            "description": "A JSON object that contains the payload of intake answers",
            "nullable": true,
            "title": "Intake results",
            "type": "object"
          },
          "relatedEntity": {
            "$ref": "#/components/schemas/GenericRelation",
            "description": "Entity on the claim that is the root of the intake flow, and to which answer data from the flow will be saved",
            "nullable": true,
            "title": "Related entity"
          },
          "status": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Status of this intake interaction",
            "title": "Status",
            "x-gw-typelist": "IntakeInteractionStatus"
          }
        },
        "title": "Intake interaction",
        "type": "object",
        "x-gw-requiredForCreate": [
          "claimContact",
          "claimSnapshotURL",
          "intakeId",
          "status"
        ],
        "x-gw-sinceVersion": "1.3.0",
        "x-gw-sortable": [
          "createTime"
        ]
      },
      "IntakeInteractionData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/IntakeInteraction"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "IntakeInteractionRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/IntakeInteractionData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "IntakeInteractionResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/IntakeInteractionData"
          }
        },
        "type": "object"
      },
      "IntakeInteractionsList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/IntakeInteractionData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LinkObject": {
        "description": "A standard HTTP link",
        "properties": {
          "href": {
            "description": "The URL of the link",
            "title": "HREF",
            "type": "string"
          },
          "methods": {
            "description": "An array of HTTP method names that can be used with the link URL",
            "items": {
              "type": "string"
            },
            "title": "Methods",
            "type": "array"
          }
        },
        "title": "Linked object",
        "type": "object"
      },
      "Links": {
        "additionalProperties": {
          "$ref": "#/components/schemas/LinkObject",
          "description": "A set of named links. Each key represents the name of the link, such as a child of the current element, an action that can be taken on it, or a navigation option.",
          "title": "Links"
        },
        "description": "A set of named links",
        "title": "Links",
        "type": "object"
      },
      "LivingExpensesIncident": {
        "description": "A report of expenses incurred due to the loss of use of a property",
        "properties": {
          "automationPath": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The path taken by the automated system that created this incident. Only intended for use by automated systems. (Since 1.3.0)",
            "nullable": true,
            "title": "Automation path",
            "x-gw-sinceVersion": "1.3.0",
            "x-gw-typelist": "AutomationPath"
          },
          "description": {
            "description": "A general description of this incident",
            "maxLength": 1333,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "lossParty": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of loss party, generally either the insured or a third party",
            "nullable": true,
            "title": "Loss party",
            "x-gw-typelist": "LossPartyType"
          },
          "startDate": {
            "description": "The date when the affected party began their stay with a lodging provider",
            "format": "date-time",
            "nullable": true,
            "title": "Start date",
            "type": "string"
          }
        },
        "title": "Living expenses incident",
        "type": "object",
        "x-gw-sortable": [
          "description",
          "startDate"
        ]
      },
      "LivingExpensesIncidentData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/LivingExpensesIncident"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "LivingExpensesIncidentList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/LivingExpensesIncidentData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LivingExpensesIncidentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LivingExpensesIncidentData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "LivingExpensesIncidentResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LivingExpensesIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "LocationBasedRiskUnit": {
        "description": "A risk unit that includes a location",
        "properties": {
          "RUNumber": {
            "description": "The assigned to this risk unit",
            "readOnly": true,
            "title": "Risk unit number",
            "type": "integer"
          },
          "building": {
            "$ref": "#/components/schemas/Building",
            "description": "Details of the building at this location",
            "nullable": true,
            "title": "Building"
          },
          "coverages": {
            "description": "The list of coverages that apply to this risk unit",
            "items": {
              "$ref": "#/components/schemas/Coverage"
            },
            "readOnly": true,
            "title": "Coverages",
            "type": "array",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "description": {
            "description": "A description of the risk unit",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "locationId": {
            "description": "The unique identifier of the location",
            "readOnly": true,
            "title": "Location ID",
            "type": "string"
          },
          "otherRiskType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The risk type for a location-based miscellaneous risk. Only applicable if `subtype` is `LocationMiscRU`.",
            "nullable": true,
            "title": "Other risk type",
            "x-gw-typelist": "OtherRiskType"
          },
          "policyLocation": {
            "$ref": "#/components/schemas/PolicyLocation",
            "description": "Details of the location",
            "title": "Policy location"
          },
          "policySystemId": {
            "description": "The unique identifier of this element in the policy administration system",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Policy system ID",
            "type": "string"
          },
          "subtype": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The specific subtype of risk unit",
            "title": "Subtype",
            "x-gw-createOnly": true,
            "x-gw-typelist": "RiskUnit"
          }
        },
        "title": "Location risk unit",
        "type": "object",
        "x-gw-filterable": [
          "RUNumber",
          "subtype"
        ],
        "x-gw-requiredForCreate": [
          "policyLocation",
          "subtype"
        ],
        "x-gw-sortable": [
          "RUNumber",
          "subtype"
        ]
      },
      "LocationBasedRiskUnitData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/LocationBasedRiskUnit"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "LocationBasedRiskUnitList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/LocationBasedRiskUnitData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LocationBasedRiskUnitRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LocationBasedRiskUnitData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "LocationBasedRiskUnitResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LocationBasedRiskUnitData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "Matter": {
        "description": "A single lawsuit or potential lawsuit for a claim (Since 1.6.0)",
        "properties": {
          "adDamnumAmount": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The ad damnum amount",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": -1.0E16,
            "nullable": true,
            "title": "Ad damnum amount"
          },
          "adDamnumSpecified": {
            "description": "Whether ad damnum is specified",
            "nullable": true,
            "title": "Ad damnum specified",
            "type": "boolean"
          },
          "arbitrationDate": {
            "description": "Currently scheduled arbitration date",
            "format": "date-time",
            "nullable": true,
            "title": "Arbitration date",
            "type": "string"
          },
          "arbitrationRoom": {
            "description": "Room number in the arbitration venue",
            "maxLength": 32,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Arbitration room",
            "type": "string"
          },
          "assignedByUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` who last assigned or re-assigned this matter",
            "readOnly": true,
            "title": "Assigned by user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "assignedGroup": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `Group` that this matter is currently assigned to",
            "readOnly": true,
            "title": "Assigned group",
            "x-gw-reference-schema": "Group",
            "x-gw-referenceType": "Group"
          },
          "assignedQueue": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `AssignableQueue` that this matter is currently assigned to",
            "readOnly": true,
            "title": "Assigned queue",
            "x-gw-reference-schema": "AssignableQueue",
            "x-gw-referenceType": "AssignableQueue"
          },
          "assignedUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` that this matter is currently assigned to",
            "readOnly": true,
            "title": "Assigned user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "assignmentStatus": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The current assignment status of this matter, such as `assigned` or `unassigned`",
            "readOnly": true,
            "title": "Assignment status",
            "x-gw-typelist": "AssignmentStatus"
          },
          "caseNumber": {
            "description": "Official reference number for the lawsuit",
            "maxLength": 128,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Case number",
            "type": "string"
          },
          "closeDate": {
            "description": "The date and time when this matter was closed",
            "format": "date-time",
            "readOnly": true,
            "title": "Close date",
            "type": "string"
          },
          "courtDistrict": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The court jurisdictional district",
            "nullable": true,
            "title": "Court district",
            "x-gw-typelist": "MatterCourtDistrict"
          },
          "courtType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The court type",
            "nullable": true,
            "title": "Court type",
            "x-gw-typelist": "MatterCourtType"
          },
          "defenseAppointmentDate": {
            "description": "Date and time the defense counsel was appointed to this matter",
            "format": "date-time",
            "nullable": true,
            "title": "Defense appointment date",
            "type": "string"
          },
          "docketNumber": {
            "description": "The court docket number",
            "maxLength": 20,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Docket number",
            "type": "string"
          },
          "fileDate": {
            "description": "The date and time the trial was filed in court",
            "format": "date-time",
            "nullable": true,
            "title": "File date",
            "type": "string"
          },
          "finalLegalCost": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The final legal cost",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "Final legal cost"
          },
          "finalSettlementCost": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The final settlement cost",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "Final settlement cost"
          },
          "finalSettlementDate": {
            "description": "The actual date and time of the final settlement, as opposed to the date of the payment",
            "format": "date-time",
            "nullable": true,
            "title": "Final settlement date",
            "type": "string"
          },
          "hearingDate": {
            "description": "Currently scheduled hearing date",
            "format": "date-time",
            "nullable": true,
            "title": "HearingDate",
            "type": "string"
          },
          "hearingRoom": {
            "description": "Room number in the hearing venue",
            "maxLength": 32,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Hearing room",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "legalSpecialty": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Legal specialty needed for this matter",
            "nullable": true,
            "title": "Legal specialty",
            "x-gw-typelist": "LegalSpecialty"
          },
          "matterType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Type of this matter such as General, Lawsuit, Arbitration, Hearing, or Mediation",
            "nullable": true,
            "title": "Matter type",
            "x-gw-typelist": "MatterType"
          },
          "mediationDate": {
            "description": "Date this matter entered mediation",
            "format": "date-time",
            "nullable": true,
            "title": "Mediation date",
            "type": "string"
          },
          "mediationRoom": {
            "description": "Room number in the mediation venue",
            "maxLength": 32,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Mediation room",
            "type": "string"
          },
          "methodServed": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Method served",
            "nullable": true,
            "title": "Method served",
            "x-gw-typelist": "MatterMethodServed"
          },
          "name": {
            "description": "Name for this matter",
            "maxLength": 128,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Name",
            "type": "string"
          },
          "primaryCause": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The primary cause of the suit",
            "nullable": true,
            "title": "Primary cause",
            "x-gw-typelist": "PrimaryCauseType"
          },
          "punitiveAmount": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The punitive damages amount",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": -1.0E16,
            "nullable": true,
            "title": "Punitive amount"
          },
          "punitiveDamages": {
            "description": "Whether there are punitive damages",
            "nullable": true,
            "title": "Punitive damages",
            "type": "boolean"
          },
          "reopenedReason": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The reason for reopening the matter",
            "nullable": true,
            "readOnly": true,
            "title": "Reopened reason",
            "x-gw-typelist": "ResolutionType"
          },
          "resolution": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of resolution",
            "nullable": true,
            "title": "Resolution",
            "x-gw-typelist": "ResolutionType"
          },
          "responseDue": {
            "description": "The date the response is due",
            "format": "date",
            "nullable": true,
            "title": "Response due",
            "type": "string"
          },
          "responseFiled": {
            "description": "The date the response was filed",
            "format": "date",
            "nullable": true,
            "title": "Response filed",
            "type": "string"
          },
          "room": {
            "description": "Room number in the venue",
            "maxLength": 32,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Room number",
            "type": "string"
          },
          "sentToDefenseDate": {
            "description": "Date this matter was sent to the defense attorney",
            "format": "date-time",
            "nullable": true,
            "title": "Sent to defense date",
            "type": "string"
          },
          "serviceDate": {
            "description": "The service date",
            "format": "date",
            "nullable": true,
            "title": "Service date",
            "type": "string"
          },
          "subrogationRelated": {
            "description": "Whether the matter is related to subrogation",
            "nullable": true,
            "title": "Subrogation related",
            "type": "boolean"
          },
          "trialDate": {
            "description": "Currently scheduled trial date",
            "format": "date-time",
            "nullable": true,
            "title": "Trial date",
            "type": "string"
          },
          "validationLevel": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The validation level of this matter",
            "readOnly": true,
            "title": "Validation level",
            "x-gw-typelist": "ValidationLevel"
          }
        },
        "title": "Matter",
        "type": "object",
        "x-gw-filterable": [
          "caseNumber",
          "courtDistrict",
          "courtType",
          "fileDate",
          "legalSpecialty",
          "matterType",
          "methodServed",
          "name",
          "primaryCause",
          "resolution",
          "responseFiled",
          "serviceDate",
          "subrogationRelated"
        ],
        "x-gw-requiredForCreate": [
          "name"
        ],
        "x-gw-sinceVersion": "1.6.0",
        "x-gw-sortable": [
          "assignedUser",
          "caseNumber",
          "finalSettlementCost",
          "name"
        ]
      },
      "MatterAssignee": {
        "description": "The target of an assignment action, such as a user/group combination or automatic rule-based assignment (Since 1.6.0)",
        "properties": {
          "autoAssign": {
            "description": "Set to `true` to indicate the assignment should be done by assignment rules. Cannot be combined with any other assignment criteria fields.",
            "title": "Auto assign",
            "type": "boolean"
          },
          "claimOwner": {
            "description": "Set to `true` to indicate that the matter should be assigned to the same user and group that own the matter's claim",
            "title": "Claim owner",
            "type": "boolean"
          },
          "groupId": {
            "description": "The ID of the `Group` that the matter should be assigned to. If specified without the `userId` field, the `User` within the `Group` is selected by assignment rules. If specified along with the `userId` field, that specific `User` is assigned the element.",
            "title": "Group ID",
            "type": "string"
          },
          "name": {
            "description": "A human-readable name for the type of assignment that this `MatterAssignee` represents",
            "readOnly": true,
            "title": "Name",
            "type": "string"
          },
          "userId": {
            "description": "The ID of the `User` that the matter should be assigned to. The `groupId` field must also be specified if the `userId` field is specified, and the `User` must be a member of that `Group` and have permission to be assigned the element.",
            "title": "User ID",
            "type": "string"
          }
        },
        "title": "Matter assignee",
        "type": "object",
        "x-gw-sinceVersion": "1.6.0"
      },
      "MatterAssigneeData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/MatterAssignee"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "MatterAssignmentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MatterAssigneeData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "MatterCloseRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MatterCloseRequestData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "MatterCloseRequestAttributes": {
        "description": "Matter close request attributes (Since 1.6.0)",
        "properties": {
          "note": {
            "description": "A detailed explanation for closing the matter",
            "title": "Note",
            "type": "string"
          },
          "resolution": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The resolution for closing the matter",
            "title": "Resolution",
            "x-gw-typelist": "ResolutionType"
          }
        },
        "title": "Matter close request attributes",
        "type": "object",
        "x-gw-sinceVersion": "1.6.0"
      },
      "MatterCloseRequestData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/MatterCloseRequestAttributes"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "MatterData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Matter"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "MatterList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/MatterData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MatterReopenRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MatterReopenRequestData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "MatterReopenRequestAttributes": {
        "description": "Matter reopen request attributes (Since 1.6.0)",
        "properties": {
          "note": {
            "description": "A detailed explanation for reopening the matter",
            "title": "Note",
            "type": "string"
          },
          "reason": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The reason for reopening the matter",
            "title": "Reason",
            "x-gw-typelist": "MatterReopenedReason"
          }
        },
        "title": "Matter reopen request attributes",
        "type": "object",
        "x-gw-sinceVersion": "1.6.0"
      },
      "MatterReopenRequestData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/MatterReopenRequestAttributes"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "MatterRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MatterData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "MatterResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MatterData"
          }
        },
        "type": "object"
      },
      "MonetaryAmount": {
        "description": "A monetary amount that combines a decimal amount with a currency",
        "properties": {
          "amount": {
            "description": "The decimal amount",
            "format": "gw-bigdecimal",
            "title": "Amount",
            "type": "string"
          },
          "currency": {
            "description": "The currency for the amount",
            "title": "Currency",
            "type": "string",
            "x-gw-type": "typekey.Currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "title": "Monetary amount",
        "type": "object"
      },
      "Note": {
        "description": "A `Note` is used to capture any sort of additional text that needs to be associated with another business object. A `Note` consists of a `body` that contains the actual text of the note, along with other fields the represent additional metadata about the note.",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "The `User` who authored this note",
            "readOnly": true,
            "title": "Author",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "body": {
            "description": "The text of this note",
            "maxLength": 65000,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Body",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "bodySummary": {
            "description": "A shorter summary of this note's `body` field, more suitable for displaying in a list of notes",
            "readOnly": true,
            "title": "Body summary",
            "type": "string",
            "x-gw-defaultViews": [
              "summary"
            ]
          },
          "confidential": {
            "description": "A `true` value for this field indicates that the note contains confidential information",
            "title": "Confidential",
            "type": "boolean"
          },
          "createdDate": {
            "description": "The date and time that this `Note` was created",
            "format": "date-time",
            "readOnly": true,
            "title": "Created date",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of this `Note`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "relatedTo": {
            "$ref": "#/components/schemas/GenericRelation",
            "description": "A reference to the element that this note is related to",
            "title": "Related to"
          },
          "securityType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The security level that has been assigned to this note",
            "nullable": true,
            "title": "Security type",
            "x-gw-typelist": "NoteSecurityType"
          },
          "subject": {
            "description": "The subject of this note",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Subject",
            "type": "string"
          },
          "topic": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The topic of this note",
            "title": "Topic",
            "x-gw-typelist": "NoteTopicType"
          },
          "updateTime": {
            "description": "The date and time when this `Note` was most recently updated",
            "format": "date-time",
            "readOnly": true,
            "title": "Update time",
            "type": "string"
          }
        },
        "title": "Note",
        "type": "object",
        "x-gw-filterable": [
          "body",
          "subject",
          "topic"
        ],
        "x-gw-requiredForCreate": [
          "body"
        ],
        "x-gw-sortable": [
          "subject",
          "topic",
          "updateTime"
        ]
      },
      "NoteData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Note"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "NoteList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/NoteData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ActivityResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NoteRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NoteData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "NoteResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NoteData"
          },
          "included": {
            "$ref": "#/components/schemas/ActivityResponseInclusions"
          }
        },
        "type": "object"
      },
      "OtherStructureIncident": {
        "description": "A loss involving structures other than the main dwelling, such as a secondary building like a shed or artist’s studio (Since 1.4.0)",
        "properties": {
          "description": {
            "description": "General description of the incident",
            "maxLength": 1333,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "fencesDamaged": {
            "description": "A `true` value indicates that the fence was damaged",
            "nullable": true,
            "title": "Fences damaged",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "lossParty": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of loss party, generally either the insured or a third-party",
            "nullable": true,
            "title": "Loss party",
            "x-gw-typelist": "LossPartyType"
          },
          "severity": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The severity of the loss",
            "nullable": true,
            "title": "Severity",
            "x-gw-typelist": "SeverityType"
          }
        },
        "title": "Other structure incident",
        "type": "object",
        "x-gw-filterable": [
          "lossParty",
          "severity"
        ],
        "x-gw-sinceVersion": "1.4.0",
        "x-gw-sortable": [
          "description",
          "lossParty",
          "severity"
        ]
      },
      "OtherStructureIncidentData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/OtherStructureIncident"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "OtherStructureIncidentList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/OtherStructureIncidentData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OtherStructureIncidentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OtherStructureIncidentData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "OtherStructureIncidentResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OtherStructureIncidentData"
          }
        },
        "type": "object"
      },
      "Payee": {
        "description": "The contact that is a payee for a check (Since 1.3.0)",
        "properties": {
          "contact": {
            "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
            "description": "A reference to the `ClaimContact` that represents the payee",
            "title": "Contact",
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "payeeType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of payee",
            "title": "Payee type",
            "x-gw-typelist": "ContactRole"
          }
        },
        "title": "Payee",
        "type": "object",
        "x-gw-sinceVersion": "1.3.0"
      },
      "PhoneNumber": {
        "description": "A phone number, with different components of the number broken out as separate fields",
        "properties": {
          "countryCode": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The country code for the phone number",
            "title": "Country code",
            "x-gw-typelist": "PhoneCountryCode"
          },
          "displayName": {
            "description": "The phone number formatted in a standardized way",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "extension": {
            "description": "The extension for the phone number",
            "nullable": true,
            "title": "Extension",
            "type": "string"
          },
          "number": {
            "description": "The actual phone number, including area code, but excluding the country code and extension",
            "title": "Number",
            "type": "string"
          }
        },
        "required": [
          "countryCode",
          "number"
        ],
        "title": "Phone number",
        "type": "object"
      },
      "PoliciesList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/PolicyData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Policy": {
        "description": "A copy of the policy that a claim has been filed against. Each `Claim` has its own copy of the associated policy.",
        "properties": {
          "accountNumber": {
            "description": "The account number for the account that this policy belongs to",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Account number",
            "type": "string"
          },
          "agent": {
            "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
            "description": "A reference to the `ClaimContact` that represents the agent for this policy (Since 1.2.0)",
            "title": "Agent",
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact",
            "x-gw-sinceVersion": "1.2.0"
          },
          "assignedRisk": {
            "description": "A `true` value indicates that this policy is written as part of a program mandated by the government for covering the worst risks",
            "nullable": true,
            "title": "Assigned risk",
            "type": "boolean"
          },
          "cancellationDate": {
            "description": "The date and time when this policy was cancelled",
            "format": "date-time",
            "nullable": true,
            "title": "Cancellation date",
            "type": "string"
          },
          "coveredParties": {
            "description": "A list of references to `ClaimContact` elements that represent covered parties on this policy (Since 1.2.0)",
            "items": {
              "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
              "x-gw-reference-schema": "ClaimContact",
              "x-gw-referenceType": "ClaimContact"
            },
            "title": "Covered parties",
            "type": "array",
            "x-gw-sinceVersion": "1.2.0"
          },
          "currency": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The currency for this policy. Updating this value will also update the claim's currency.",
            "title": "Currency",
            "x-gw-typelist": "Currency"
          },
          "effectiveDate": {
            "description": "The date and time when this policy became effective",
            "format": "date-time",
            "title": "Effective date",
            "type": "string"
          },
          "excludedParties": {
            "description": "A list of references to `ClaimContact` elements that represent excluded parties on this policy (Since 1.2.0)",
            "items": {
              "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
              "x-gw-reference-schema": "ClaimContact",
              "x-gw-referenceType": "ClaimContact"
            },
            "title": "Excluded parties",
            "type": "array",
            "x-gw-sinceVersion": "1.2.0"
          },
          "expirationDate": {
            "description": "The date and time when this policy ceased to be in effect",
            "format": "date-time",
            "title": "Expiration date",
            "type": "string"
          },
          "financialInterests": {
            "description": "Other financial interests of note",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Financial interests",
            "type": "string"
          },
          "foreignCoverage": {
            "description": "A `true` value indicates that the insured has foreign coverage",
            "nullable": true,
            "title": "Foreign coverage",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "insured": {
            "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
            "description": "A reference to the `ClaimContact` that represents the primary insured party for this policy (Since 1.2.0)",
            "title": "Insured",
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact",
            "x-gw-sinceVersion": "1.2.0"
          },
          "notes": {
            "description": "Other comments about the policy",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Notes",
            "type": "string"
          },
          "originalEffectiveDate": {
            "description": "The date and time when the policy holder first had coverage",
            "format": "date-time",
            "nullable": true,
            "title": "Original effective date",
            "type": "string"
          },
          "policyLocations": {
            "description": "A list of references to `PolicyLocation` elements that represent locations that appear on this policy",
            "items": {
              "$ref": "#/components/schemas/PolicyObjectReference",
              "x-gw-reference-schema": "PolicyLocation",
              "x-gw-referenceType": "PolicyLocation"
            },
            "title": "Policy locations",
            "type": "array",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "policyNumber": {
            "description": "The policy number assigned to this policy",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Policy number",
            "type": "string"
          },
          "policyType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of policy. This generally corresponds to the insurance product for that policy.",
            "title": "Policy type",
            "x-gw-createOnly": true,
            "x-gw-typelist": "PolicyType"
          },
          "producerCode": {
            "description": "The producer code for the agency responsible for this policy",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Producer code",
            "type": "string"
          },
          "serviceTier": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The customer service tier for this policy",
            "nullable": true,
            "title": "Service tier",
            "x-gw-typelist": "CustomerServiceTier"
          },
          "status": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The status of the policy, such as `inforce` or `canceled`",
            "title": "Status",
            "x-gw-typelist": "PolicyStatus"
          },
          "underwritingCo": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The underwriting company for this policy",
            "nullable": true,
            "title": "Underwriting company",
            "x-gw-typelist": "UnderwritingCompanyType"
          },
          "underwritingGroup": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The underwriting group for this policy",
            "nullable": true,
            "title": "Underwriting group",
            "x-gw-typelist": "UnderwritingGroupType"
          },
          "verifiedPolicy": {
            "description": "A `true` value indicates that the policy has not been edited since it was retrieved from the policy system",
            "readOnly": true,
            "title": "Verified policy",
            "type": "boolean"
          }
        },
        "title": "Policy",
        "type": "object",
        "x-gw-requiredForCreate": [
          "policyNumber",
          "policyType"
        ],
        "x-gw-sortable": [
          "effectiveDate",
          "policyNumber"
        ]
      },
      "PolicyCoverageList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/CoverageData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PolicyCoverageResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CoverageData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "PolicyData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Policy"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "PolicyEndorsementList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/EndorsementData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PolicyEndorsementResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EndorsementData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "PolicyLocation": {
        "description": "A location on a policy",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/ClaimAddress",
            "description": "The address of this location",
            "title": "Address"
          },
          "buildings": {
            "description": "A list of buildings at this location",
            "items": {
              "$ref": "#/components/schemas/Building"
            },
            "title": "Buildings",
            "type": "array",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "displayName": {
            "description": "The formatted name of this location",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "locationNumber": {
            "description": "The location number automatically assigned to this location in the context of the policy",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Location number",
            "type": "string"
          },
          "notes": {
            "description": "Additional comments about this location",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Notes",
            "type": "string"
          },
          "policySystemId": {
            "description": "The unique identifier of this element within the policy system",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Policy system ID",
            "type": "string"
          },
          "primaryLocation": {
            "description": "A `true` value indicates that this location is the primary location on the policy",
            "title": "Primary location",
            "type": "boolean"
          }
        },
        "title": "Policy location",
        "type": "object",
        "x-gw-filterable": [
          "locationNumber",
          "primaryLocation"
        ],
        "x-gw-sortable": [
          "locationNumber",
          "primaryLocation"
        ]
      },
      "PolicyLocationData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/PolicyLocation"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "PolicyLocationList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/PolicyLocationData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PolicyLocationResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PolicyLocationData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "PolicyObjectReference": {
        "description": "A reference to an element that may exist on the claim's copy of the policy",
        "properties": {
          "displayName": {
            "description": "The formatted name of the referenced element",
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the referenced element",
            "title": "ID",
            "type": "string"
          },
          "jsonPath": {
            "description": "The path to the referenced element within the overall JSON document (Since 1.2.0)",
            "readOnly": true,
            "title": "JSON path",
            "type": "string",
            "x-gw-defaultViews": [
              "none"
            ],
            "x-gw-sinceVersion": "1.2.0"
          },
          "policyLabel": {
            "description": "A label that describes the context in which the referenced element appears on the policy",
            "readOnly": true,
            "title": "Policy label",
            "type": "string"
          },
          "policySystemId": {
            "description": "The unique identifier of this element within the policy system",
            "title": "Policy system ID",
            "type": "string"
          },
          "refid": {
            "description": "A unique identifier given to the newly created element in the context of the current request (Since 1.5.0)",
            "title": "Reference ID",
            "type": "string",
            "x-gw-sinceVersion": "1.5.0"
          },
          "type": {
            "description": "The type of the referenced element (Since 1.2.0)",
            "title": "Type",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          },
          "uri": {
            "description": "The canonical URI for the referenced element (Since 1.2.0)",
            "title": "URI",
            "type": "string",
            "x-gw-sinceVersion": "1.2.0"
          }
        },
        "title": "Policy object reference",
        "type": "object",
        "x-gw-resourceReference": true
      },
      "PolicyRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PolicyData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "PolicyResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PolicyData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "PropertyContentsIncident": {
        "description": "Property contents incident (Since 1.4.0)",
        "properties": {
          "description": {
            "description": "General description of the incident",
            "maxLength": 1333,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/PolicyLocation",
            "description": "The location of the property",
            "nullable": true,
            "title": "Location"
          },
          "lossParty": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of loss party, generally either the insured or a third-party",
            "nullable": true,
            "title": "Loss party",
            "x-gw-typelist": "LossPartyType"
          },
          "severity": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The severity of the loss",
            "nullable": true,
            "title": "Severity",
            "x-gw-typelist": "SeverityType"
          }
        },
        "title": "Property contents incident",
        "type": "object",
        "x-gw-filterable": [
          "lossParty",
          "severity"
        ],
        "x-gw-sinceVersion": "1.4.0",
        "x-gw-sortable": [
          "description",
          "location",
          "lossParty",
          "severity"
        ]
      },
      "PropertyContentsIncidentData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/PropertyContentsIncident"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "PropertyContentsIncidentList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/PropertyContentsIncidentData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PropertyContentsIncidentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PropertyContentsIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "PropertyContentsIncidentResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PropertyContentsIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "RecoveryReserveSet": {
        "description": "A set of related recovery reserve transactions that are submitted together for approval (Since 1.3.0)",
        "properties": {
          "approvalDate": {
            "description": "The date and time when this recovery reserve set was approved or rejected",
            "format": "date-time",
            "readOnly": true,
            "title": "Approval date",
            "type": "string"
          },
          "approvalStatus": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Whether this recovery reserve set is approved, rejected, or awaiting approval",
            "readOnly": true,
            "title": "Approval status",
            "x-gw-typelist": "ApprovalStatus"
          },
          "createTime": {
            "description": "The date and time when this `RecoveryReserveSet` was created",
            "format": "date-time",
            "readOnly": true,
            "title": "Create time",
            "type": "string"
          },
          "createdVia": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Indicates how this recovery reserve set was created, such as user entry or automated rules",
            "title": "Created via",
            "x-gw-typelist": "CreatedVia"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "recoveryReserves": {
            "description": "The list of `RecoveryReserves` that define the recovery reserve transactions that are part of this set",
            "items": {
              "$ref": "#/components/schemas/SimpleReference",
              "x-gw-reference-schema": "Transaction",
              "x-gw-referenceType": "RecoveryReserve"
            },
            "readOnly": true,
            "title": "RecoveryReserves",
            "type": "array",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "recoveryReservesToWrite": {
            "description": "The list of `RecoveryReserves` used to populate a recovery reserve set during creation or edit",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "minItems": 1,
            "title": "RecoveryReserves to write",
            "type": "array"
          },
          "requestingUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` that represents the caller that submitted this recovery reserve set for approval",
            "readOnly": true,
            "title": "Requesting user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          }
        },
        "title": "Recovery reserve set",
        "type": "object",
        "x-gw-filterable": [
          "approvalStatus"
        ],
        "x-gw-requiredForCreate": [
          "recoveryReservesToWrite"
        ],
        "x-gw-sinceVersion": "1.3.0",
        "x-gw-sortable": [
          "approvalDate",
          "approvalStatus",
          "createTime"
        ]
      },
      "RecoveryReserveSetData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/RecoveryReserveSet"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "RecoveryReserveSetList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/RecoveryReserveSetData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RecoveryReserveSetRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RecoveryReserveSetData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RecoveryReserveSetResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RecoveryReserveSetData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "RecoverySet": {
        "description": "A set of related recovery transactions that are submitted together for approval (Since 1.3.0)",
        "properties": {
          "approvalDate": {
            "description": "The date and time when this recovery set was approved or rejected",
            "format": "date-time",
            "readOnly": true,
            "title": "Approval date",
            "type": "string"
          },
          "approvalStatus": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Whether this recovery set is approved, rejected, or awaiting approval",
            "readOnly": true,
            "title": "Approval status",
            "x-gw-typelist": "ApprovalStatus"
          },
          "createTime": {
            "description": "The date and time when this `RecoverySet` was created",
            "format": "date-time",
            "readOnly": true,
            "title": "Create time",
            "type": "string"
          },
          "createdVia": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Indicates how this recovery set was created, such as user entry or automated rules",
            "title": "Created via",
            "x-gw-typelist": "CreatedVia"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "recoveries": {
            "description": "The list of `Transaction` elements that define the recovery transactions that are part of this set",
            "items": {
              "$ref": "#/components/schemas/SimpleReference",
              "x-gw-reference-schema": "Transaction",
              "x-gw-referenceType": "Recovery"
            },
            "readOnly": true,
            "title": "Recoveries",
            "type": "array",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "recoveriesToWrite": {
            "description": "The list of `Recoveries` used to populate a recovery set during creation or edit",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "minItems": 1,
            "title": "Recoveries to write",
            "type": "array"
          },
          "requestingUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` that represents the caller that submitted this recovery set for approval",
            "readOnly": true,
            "title": "Requesting user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          }
        },
        "title": "Recovery set",
        "type": "object",
        "x-gw-filterable": [
          "approvalStatus"
        ],
        "x-gw-requiredForCreate": [
          "recoveriesToWrite"
        ],
        "x-gw-sinceVersion": "1.3.0",
        "x-gw-sortable": [
          "approvalDate",
          "approvalStatus",
          "createTime"
        ]
      },
      "RecoverySetData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/RecoverySet"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "RecoverySetList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/RecoverySetData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RecoverySetRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RecoverySetData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RecoverySetResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RecoverySetData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "RelatedCollection": {
        "description": "A set of element references that are related to the element in some way. Used to link elements with their relations when a request is made using the `include` query parameter.",
        "properties": {
          "count": {
            "description": "The number of elements included in the `data` array",
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "description": "The list of references to the related elements",
            "items": {
              "$ref": "#/components/schemas/SimpleReference"
            },
            "title": "Data",
            "type": "array"
          },
          "total": {
            "description": "The total number of elements in the related set of elements. Only present if the `includeTotal` query parameter is used to request that the total be calculated for an included collection.",
            "title": "Total",
            "type": "integer"
          }
        },
        "title": "Related collection",
        "type": "object"
      },
      "RelatedCollections": {
        "additionalProperties": {
          "$ref": "#/components/schemas/RelatedCollection",
          "description": "The related collections. Each key in this object will match the name of the inclusion requested via the `include` query parameter.",
          "title": "Related collections"
        },
        "description": "A set of `RelatedCollection` elements that contain references to elements included using the `include` query parameter on a request",
        "title": "Related collections",
        "type": "object"
      },
      "ReserveSet": {
        "description": "A set of related reserve transactions that are submitted together for approval (Since 1.3.0)",
        "properties": {
          "approvalDate": {
            "description": "The date and time when this reserve set was approved or rejected",
            "format": "date-time",
            "readOnly": true,
            "title": "Approval date",
            "type": "string"
          },
          "approvalStatus": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Whether this reserve set is approved, rejected, or awaiting approval",
            "readOnly": true,
            "title": "Approval status",
            "x-gw-typelist": "ApprovalStatus"
          },
          "createTime": {
            "description": "The date and time when this `ReserveSet` was created",
            "format": "date-time",
            "readOnly": true,
            "title": "Create time",
            "type": "string"
          },
          "createdVia": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Indicates how this reserve set was created, such as user entry or automated rules",
            "title": "Created via",
            "x-gw-typelist": "CreatedVia"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "requestingUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` that represents the caller that submitted this reserve set for approval",
            "readOnly": true,
            "title": "Requesting user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "reserves": {
            "description": "The list of `Transaction` elements that define the reserve transactions that are part of this set",
            "items": {
              "$ref": "#/components/schemas/SimpleReference",
              "x-gw-reference-schema": "Transaction",
              "x-gw-referenceType": "Reserve"
            },
            "readOnly": true,
            "title": "Reserves",
            "type": "array",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "reservesToWrite": {
            "description": "The list of `Reserves` used to populate a reserve set during creation or edit",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "minItems": 1,
            "title": "Reserves to write",
            "type": "array"
          }
        },
        "title": "Reserve set",
        "type": "object",
        "x-gw-filterable": [
          "approvalStatus"
        ],
        "x-gw-requiredForCreate": [
          "reservesToWrite"
        ],
        "x-gw-sinceVersion": "1.3.0",
        "x-gw-sortable": [
          "approvalDate",
          "approvalStatus",
          "createTime"
        ]
      },
      "ReserveSetData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ReserveSet"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ReserveSetList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ReserveSetData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReserveSetRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReserveSetData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ReserveSetResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReserveSetData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "RoleSchemaConstraint": {
        "description": "A constraint that applies to how roles can be assigned to contacts",
        "properties": {
          "constraints": {
            "description": "A list of specific constraints, for example that the role is required or can only be held by one contact",
            "items": {
              "$ref": "#/components/schemas/SchemaConstraint"
            },
            "readOnly": true,
            "title": "Constraints",
            "type": "array"
          },
          "exceptionSubtypes": {
            "description": "A list of exceptions to the `subtype` defined on the containing constraint that allow additional contact types to have this role when it is related to the type of element defined in the `schema` field",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "title": "Exception subtypes",
            "type": "array"
          },
          "schema": {
            "description": "The type of owning element that this constraint applies to. For example, a `schema` value of `Claim` means that this constraint applies when the role is related to the claim itself and not to another element such as an exposure.",
            "readOnly": true,
            "title": "Schema",
            "type": "string"
          }
        },
        "title": "Role schema constraint",
        "type": "object"
      },
      "SchemaConstraint": {
        "description": "A specific constraint for a contact role in the context of a related element",
        "properties": {
          "additionalInfoList": {
            "description": "A list of additional criteria for the constraint, such as specific loss types or exposure types that it applies to",
            "items": {
              "$ref": "#/components/schemas/AdditionalInfo"
            },
            "title": "Additional info list",
            "type": "array"
          },
          "constraintType": {
            "description": "The type of constraint. Possible values include `Prohibited`, `Exclusive`, `Required`, and `ZeroToMore`.",
            "readOnly": true,
            "title": "Constraint type",
            "type": "string"
          }
        },
        "title": "Schema constraint",
        "type": "object"
      },
      "ServiceRequest": {
        "description": "Represents a unit of work requested of a specialist or vendor, including instructions that describe the work to be done and its current state",
        "properties": {
          "assignedGroup": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `Group` that this service request is assigned to",
            "readOnly": true,
            "title": "Assigned group",
            "x-gw-reference-schema": "Group",
            "x-gw-referenceType": "Group"
          },
          "assignedUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` that this service request is assigned to",
            "readOnly": true,
            "title": "Assigned user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "assignmentDate": {
            "description": "The date when this service request was last assigned. For precision across timezones, use `assignmentDateTime` field.",
            "format": "date",
            "readOnly": true,
            "title": "Assignment date",
            "type": "string"
          },
          "assignmentDateTime": {
            "description": "The date and time when this service request was last assigned",
            "format": "date-time",
            "readOnly": true,
            "title": "Assignment date time",
            "type": "string"
          },
          "canceledReason": {
            "description": "The reason this service request was canceled",
            "maxLength": 65000,
            "minLength": 1,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Canceled reason",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "claim": {
            "$ref": "#/components/schemas/ClaimReference",
            "description": "A reference to the `Claim` that this service request is associated with",
            "readOnly": true,
            "title": "Claim",
            "x-gw-reference-schema": "Claim",
            "x-gw-referenceType": "Claim"
          },
          "createTime": {
            "description": "The date and time when this `ServiceRequest` was created",
            "format": "date-time",
            "readOnly": true,
            "title": "Create time",
            "type": "string"
          },
          "expectedQuoteCompletionDate": {
            "description": "The date by which the specialist expects to submit the quote. For precision across timezones, use `expectedQuoteCompletionDateTime` field.",
            "format": "date",
            "readOnly": true,
            "title": "Expected quote completion date",
            "type": "string"
          },
          "expectedQuoteCompletionDateTime": {
            "description": "The date and time by which the specialist expects to submit the quote",
            "format": "date-time",
            "readOnly": true,
            "title": "Expected quote completion date time",
            "type": "string"
          },
          "expectedServiceCompletionDate": {
            "description": "The date by which the specialist expects to complete the work. For precision across timezones, use `expectedServiceCompletionDateTime` field.",
            "format": "date",
            "readOnly": true,
            "title": "Expected service completion date",
            "type": "string"
          },
          "expectedServiceCompletionDateTime": {
            "description": "The date and time by which the specialist expects to complete the work",
            "format": "date-time",
            "readOnly": true,
            "title": "Expected service completion date time",
            "type": "string"
          },
          "exposure": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `Exposure` that this service request is associated with",
            "nullable": true,
            "title": "Exposure",
            "x-gw-createOnly": true,
            "x-gw-reference-schema": "Exposure",
            "x-gw-referenceType": "Exposure"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "incident": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `Incident` that this service request is associated with",
            "nullable": true,
            "title": "Incident",
            "x-gw-createOnly": true
          },
          "instruction": {
            "$ref": "#/components/schemas/ServiceRequestInstruction",
            "description": "The active instruction associated with this service request",
            "title": "Instruction",
            "x-gw-createOnly": true
          },
          "kind": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The kind of service request, such as `quoteonly` or `quoteandservice`. This determines the workflow for managing this service request.",
            "title": "Kind",
            "x-gw-createOnly": true,
            "x-gw-typelist": "ServiceRequestKind"
          },
          "latestQuote": {
            "$ref": "#/components/schemas/ServiceRequestStatement",
            "description": "The latest quote associated with this service request",
            "readOnly": true,
            "title": "Latest quote"
          },
          "nextStep": {
            "$ref": "#/components/schemas/ServiceRequestAction",
            "description": "The next action to be taken in the lifecycle of this service request",
            "readOnly": true,
            "title": "Next step",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "progress": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "This service request's place in its life cycle",
            "readOnly": true,
            "title": "Progress",
            "x-gw-typelist": "ServiceRequestProgress"
          },
          "quoteStatus": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The quote status for this service request",
            "readOnly": true,
            "title": "Quote status",
            "x-gw-typelist": "ServiceRequestQuoteStatus"
          },
          "referenceNumber": {
            "description": "A string identifier assigned to this service request by the specialist",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Reference number",
            "type": "string"
          },
          "requestedQuoteCompletionDate": {
            "description": "The desired date by which the specialist will have submitted the quote. For precision across timezones, use `requestedQuoteCompletionDateTime` field.",
            "format": "date",
            "title": "Requested quote completion date",
            "type": "string",
            "x-gw-after": "now",
            "x-gw-createOnly": true
          },
          "requestedQuoteCompletionDateTime": {
            "description": "The desired date and time by which the specialist will have submitted the quote",
            "format": "date-time",
            "title": "Requested quote completion date time",
            "type": "string",
            "x-gw-after": "now",
            "x-gw-createOnly": true
          },
          "requestedServiceCompletionDate": {
            "description": "The desired date by which the specialist will have completed the work. For precision across timezones, use `requestedServiceCompletionDateTime` field.",
            "format": "date",
            "title": "Requested service completion date",
            "type": "string",
            "x-gw-after": "now",
            "x-gw-createOnly": true
          },
          "requestedServiceCompletionDateTime": {
            "description": "The desired date and time by which the specialist will have completed the work",
            "format": "date-time",
            "title": "Requested service completion date time",
            "type": "string",
            "x-gw-after": "now",
            "x-gw-createOnly": true
          },
          "serviceRequestNumber": {
            "description": "A globally unique, user-readable identifier for this service request. This number is normally generated within the application.",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Service request number",
            "type": "string"
          },
          "specialist": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "The vendor or internal entity selected to do the work requested by this service request",
            "title": "Specialist",
            "x-gw-createOnly": true,
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact"
          },
          "specialistCommMethod": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The channel through which the carrier will communicate with the specialist",
            "title": "Specialist communication method",
            "x-gw-createOnly": true,
            "x-gw-typelist": "SpecialistCommMethod"
          },
          "tier": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The tier of this service request",
            "title": "Tier",
            "x-gw-createOnly": true,
            "x-gw-typelist": "ServiceRequestTier"
          }
        },
        "title": "Service request",
        "type": "object",
        "x-gw-filterable": [
          "progress"
        ],
        "x-gw-requiredForCreate": [
          "instruction",
          "kind",
          "specialist"
        ],
        "x-gw-sortable": [
          "createTime",
          "kind",
          "progress",
          "tier"
        ]
      },
      "ServiceRequestAction": {
        "description": "An action that can be taken on a service request (Since 1.1.0)",
        "properties": {
          "defaultOperation": {
            "description": "The type of operation this action performs when invoked",
            "title": "Default operation",
            "type": "string"
          },
          "name": {
            "description": "The name of this action",
            "title": "Name",
            "type": "string"
          }
        },
        "title": "Service request action",
        "type": "object",
        "x-gw-sinceVersion": "1.1.0"
      },
      "ServiceRequestAssignee": {
        "description": "The target of an assignment action, such as a user/group combination or automatic rule-based assignment (Since 1.2.0)",
        "properties": {
          "autoAssign": {
            "description": "Set to `true` to indicate the assignment should be done by assignment rules. Cannot be combined with any other assignment criteria fields.",
            "title": "Auto assign",
            "type": "boolean"
          },
          "claimOwner": {
            "description": "Set to `true` to indicate that the service request should be assigned to the same user and group that own the service request's claim",
            "title": "Claim owner",
            "type": "boolean"
          },
          "groupId": {
            "description": "The `id` of the `Group` that the service request should be assigned to. If specified without the `userId` field, the `User` within the `Group` is selected by assignment rules. If specified along with the `userId` field, that `User` must be a member of the `Group`, and that `User` is assigned the service request.",
            "title": "Group ID",
            "type": "string"
          },
          "name": {
            "description": "A human-readable name for the type of assignment that this `ServiceRequestAssignee` represents",
            "readOnly": true,
            "title": "Name",
            "type": "string"
          },
          "userId": {
            "description": "The ID of the `User` that the service request should be assigned to. The `groupId` field must also be specified if the `userId` field is specified, and the `User` must be a member of that `Group` and have permission to be assigned the element.",
            "title": "User ID",
            "type": "string"
          }
        },
        "title": "Service request assignee",
        "type": "object",
        "x-gw-sinceVersion": "1.2.0"
      },
      "ServiceRequestAssigneeData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ServiceRequestAssignee"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ServiceRequestAssignmentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ServiceRequestAssigneeData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ServiceRequestData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ServiceRequest"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ServiceRequestInstruction": {
        "description": "A set of instructions to be transmitted to the specialist who will work on a service request (Since 1.1.0)",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
            "description": "The contact with whom the specialist should coordinate to perform the work",
            "title": "Customer",
            "x-gw-createOnly": true,
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "instructionText": {
            "description": "The instructions to be provided to the specialist",
            "maxLength": 65000,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Instruction text",
            "type": "string",
            "x-gw-createOnly": true,
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "serviceAddress": {
            "$ref": "#/components/schemas/ClaimAddress",
            "description": "The location at which the service is to be performed",
            "title": "Service address",
            "x-gw-createOnly": true
          },
          "services": {
            "description": "The services to be performed for this set of instructions",
            "items": {
              "$ref": "#/components/schemas/SpecialistService"
            },
            "minItems": 1,
            "title": "Services",
            "type": "array",
            "x-gw-createOnly": true
          }
        },
        "title": "Service request instruction",
        "type": "object",
        "x-gw-requiredForCreate": [
          "customer",
          "serviceAddress",
          "services"
        ],
        "x-gw-sinceVersion": "1.1.0",
        "x-gw-sortable": [
          "instructionText"
        ]
      },
      "ServiceRequestInvoiceMarkAsPaidData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ServiceRequestInvoicePayInfo"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ServiceRequestInvoiceMarkAsPaidRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ServiceRequestInvoiceMarkAsPaidData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ServiceRequestInvoiceOperationContext": {
        "description": "Additional details regarding an operation performed on a service request invoice (Since 1.2.0)",
        "properties": {
          "reason": {
            "description": "The reason the operation is being performed",
            "title": "Reason",
            "type": "string"
          }
        },
        "title": "Service request invoice operation context",
        "type": "object",
        "x-gw-sinceVersion": "1.2.0"
      },
      "ServiceRequestInvoiceOperationData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ServiceRequestInvoiceOperationContext"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ServiceRequestInvoiceOperationRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ServiceRequestInvoiceOperationData"
          }
        },
        "type": "object"
      },
      "ServiceRequestInvoicePayInfo": {
        "description": "Details regarding the invoice payment (Since 1.3.0)",
        "properties": {
          "check": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `Check` associated with the invoice payment",
            "title": "Check",
            "x-gw-reference-schema": "Check",
            "x-gw-referenceType": "Check"
          },
          "operationContext": {
            "$ref": "#/components/schemas/ServiceRequestInvoiceOperationContext",
            "description": "Additional details regarding the operation",
            "title": "Operation context"
          }
        },
        "required": [
          "check"
        ],
        "title": "Service request invoice payment info",
        "type": "object",
        "x-gw-sinceVersion": "1.3.0"
      },
      "ServiceRequestList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ServiceRequestData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ServiceRequestResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ServiceRequestOperationContext": {
        "description": "Additional details regarding an operation performed on a service request (Since 1.1.0)",
        "properties": {
          "expectedCompletionDate": {
            "description": "The date by which the specialist expects to complete the work",
            "format": "date-time",
            "title": "Expected completion date",
            "type": "string",
            "x-gw-after": "now"
          },
          "originalDate": {
            "description": "The original service completion date",
            "format": "date-time",
            "title": "Original date",
            "type": "string"
          },
          "reason": {
            "description": "The reason the operation is being performed",
            "title": "Reason",
            "type": "string"
          },
          "requestedCompletionDate": {
            "description": "The requested quote or service completion date",
            "format": "date-time",
            "title": "Requested completion date",
            "type": "string",
            "x-gw-after": "now"
          },
          "statement": {
            "$ref": "#/components/schemas/ServiceRequestStatement",
            "description": "The service request statement associated with this operation",
            "title": "Statement"
          }
        },
        "title": "Service request operation context",
        "type": "object",
        "x-gw-sinceVersion": "1.1.0"
      },
      "ServiceRequestOperationData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ServiceRequestOperationContext"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ServiceRequestOperationRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ServiceRequestOperationData"
          }
        },
        "type": "object"
      },
      "ServiceRequestRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ServiceRequestData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ServiceRequestResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ServiceRequestData"
          },
          "included": {
            "$ref": "#/components/schemas/ServiceRequestResponseInclusions"
          }
        },
        "type": "object"
      },
      "ServiceRequestResponseInclusions": {
        "properties": {
          "Claim": {
            "items": {
              "$ref": "#/components/schemas/ClaimData"
            },
            "type": "array"
          },
          "ClaimContact": {
            "items": {
              "$ref": "#/components/schemas/ClaimContactData"
            },
            "type": "array"
          },
          "Exposure": {
            "items": {
              "$ref": "#/components/schemas/ExposureData"
            },
            "type": "array"
          },
          "ServiceRequestInvoice": {
            "items": {
              "$ref": "#/components/schemas/ServiceRequestStatementData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ServiceRequestSimpleOperationContext": {
        "description": "Additional details regarding a simple operation performed on a service request (Since 1.1.0)",
        "title": "Service request simple operation context",
        "type": "object",
        "x-gw-sinceVersion": "1.1.0"
      },
      "ServiceRequestStatement": {
        "description": "A statement received from a specialist related to a service request, such as a quote or invoice (Since 1.1.0)",
        "properties": {
          "approvalDate": {
            "description": "The date and time when this statement was approved",
            "format": "date-time",
            "readOnly": true,
            "title": "Approval date",
            "type": "string"
          },
          "approvedBy": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` that represents the calling user or service that approved this statement",
            "readOnly": true,
            "title": "Approved by",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "creationTime": {
            "description": "The date and time when this statement was created",
            "format": "date-time",
            "readOnly": true,
            "title": "Creation time",
            "type": "string"
          },
          "declinedReason": {
            "description": "The reason the statement was declined",
            "maxLength": 65000,
            "minLength": 1,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Declined reason",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "description": {
            "description": "A description of the statement",
            "maxLength": 65000,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "expectedDaysToPerformService": {
            "description": "The number of business days the specialist expects it will take to perform the service. Only applicable if `subtype` is `ServiceRequestQuote`.",
            "title": "Expected days to perform service",
            "type": "integer"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "lineItems": {
            "description": "The list of line items for this statement",
            "items": {
              "$ref": "#/components/schemas/ServiceRequestStatementLineItem"
            },
            "minItems": 1,
            "title": "Line items",
            "type": "array"
          },
          "operationContext": {
            "$ref": "#/components/schemas/ServiceRequestSimpleOperationContext",
            "description": "Additional details about this statement. Only applicable if `subtype` is `ServiceRequestInvoice`.",
            "title": "Operation context",
            "x-gw-createOnly": true
          },
          "paymentDate": {
            "description": "The date when this invoice was paid. Only applicable if `subtype` is `ServiceRequestInvoice`. For precision across timezones, use `paymentDateTime` field.",
            "format": "date",
            "title": "Payment date",
            "type": "string"
          },
          "paymentDateTime": {
            "description": "The date and time when this invoice was paid. Only applicable if `subtype` is `ServiceRequestInvoice`. (Since 1.4.0)",
            "format": "date-time",
            "title": "Payment date time",
            "type": "string",
            "x-gw-sinceVersion": "1.4.0"
          },
          "referenceNumber": {
            "description": "An identifier assigned to this statement by the specialist",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Reference number",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The source for this statement, such as manual entry or an external system",
            "title": "Statement source",
            "x-gw-typelist": "StatementSource"
          },
          "status": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The current invoice status. Only applicable if `subtype` is `ServiceRequestInvoice`.",
            "readOnly": true,
            "title": "Status",
            "x-gw-typelist": "ServiceRequestInvoiceStatus"
          },
          "subtype": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The specific type of statement, such as `ServiceRequestInvoice` or `ServiceRequestQuote`",
            "readOnly": true,
            "title": "Subtype",
            "x-gw-typelist": "ServiceRequestStatement"
          },
          "total": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The sum of all the line items on this statement",
            "readOnly": true,
            "title": "Total"
          }
        },
        "required": [
          "description"
        ],
        "title": "Service request statement",
        "type": "object",
        "x-gw-requiredForCreate": [
          "lineItems"
        ],
        "x-gw-sinceVersion": "1.1.0",
        "x-gw-sortable": [
          "approvalDate",
          "creationTime"
        ]
      },
      "ServiceRequestStatementData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ServiceRequestStatement"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "ServiceRequestStatementLineItem": {
        "description": "A single line item on a service request statement (Since 1.1.0)",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The line item's amount",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": -1.0E16,
            "title": "Amount"
          },
          "category": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The line item's category",
            "title": "Category",
            "x-gw-typelist": "ServiceRequestStatementLineItemCategory"
          },
          "description": {
            "description": "A description of the line item",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          }
        },
        "required": [
          "amount"
        ],
        "title": "Service request statement line item",
        "type": "object",
        "x-gw-sinceVersion": "1.1.0"
      },
      "ServiceRequestStatementList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ServiceRequestStatementData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ServiceRequestResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ServiceRequestStatementRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ServiceRequestStatementData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ServiceRequestStatementResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ServiceRequestStatementData"
          },
          "included": {
            "$ref": "#/components/schemas/ServiceRequestResponseInclusions"
          }
        },
        "type": "object"
      },
      "SimpleReference": {
        "description": "A reference to an element",
        "properties": {
          "displayName": {
            "description": "The formatted name of the element",
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the referenced element",
            "title": "ID",
            "type": "string"
          },
          "jsonPath": {
            "description": "The path to the referenced element within the overall JSON document (Since 1.2.0)",
            "readOnly": true,
            "title": "JSON path",
            "type": "string",
            "x-gw-defaultViews": [
              "none"
            ],
            "x-gw-sinceVersion": "1.2.0"
          },
          "refid": {
            "description": "A unique identifier given to the newly created element in the context of the current request",
            "title": "Reference ID",
            "type": "string"
          },
          "type": {
            "description": "The type of the referenced element",
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The canonical URI for the referenced element",
            "title": "URI",
            "type": "string"
          }
        },
        "title": "Simple reference",
        "type": "object",
        "x-gw-resourceReference": true
      },
      "SpatialPoint": {
        "description": "An object that combines a latitude with a longitude (Since 1.2.0)",
        "properties": {
          "latitude": {
            "description": "The latitude of the spatial point",
            "format": "gw-bigdecimal",
            "title": "Latitude",
            "type": "string"
          },
          "longitude": {
            "description": "The longitude of the spatial point",
            "format": "gw-bigdecimal",
            "title": "Longitude",
            "type": "string"
          }
        },
        "required": [
          "latitude",
          "longitude"
        ],
        "title": "Spatial point",
        "type": "object",
        "x-gw-sinceVersion": "1.2.0"
      },
      "SpecialistService": {
        "description": "A particular service category that a specialist is able to provide",
        "properties": {
          "active": {
            "description": "A `true` value indicates that this service is active for the specialist and can be used for new service requests",
            "readOnly": true,
            "title": "Active",
            "type": "boolean"
          },
          "code": {
            "description": "A unique code identifying the service",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Code",
            "type": "string",
            "x-gw-createOnly": true
          },
          "description": {
            "description": "A description of the service",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Description",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "name": {
            "description": "The name of the service",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Name",
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/CodeReference",
            "description": "A reference to the service code that is the parent of this service code",
            "readOnly": true,
            "title": "Parent"
          }
        },
        "title": "Specialist service",
        "type": "object"
      },
      "Transaction": {
        "description": "A financial transaction for a claim or exposure. Transactions are either reserves, payments, recoveries, or recovery reserves. (Since 1.3.0)",
        "properties": {
          "bookingDate": {
            "description": "The date and time when the transaction was submitted",
            "format": "date-time",
            "readOnly": true,
            "title": "Booking date",
            "type": "string"
          },
          "claimToReportingExchangeRate": {
            "$ref": "#/components/schemas/TransactionExchangeRate",
            "description": "The exchange rate from the claim currency to the reporting currency",
            "readOnly": true,
            "title": "Claim to reporting exchange rate",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "comments": {
            "description": "Comments about the transaction",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Comments",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "coverage": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The `primaryCoverage` on the exposure this transaction applies to",
            "readOnly": true,
            "title": "Coverage",
            "x-gw-typelist": "CoverageType"
          },
          "createTime": {
            "description": "The date and time when this `Transaction` was created",
            "format": "date-time",
            "readOnly": true,
            "title": "Create time",
            "type": "string"
          },
          "createdVia": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Indicates how this transaction was created, such as user entry or automated rules",
            "readOnly": true,
            "title": "Created via",
            "x-gw-typelist": "CreatedVia"
          },
          "currency": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The currency of this transaction's amount",
            "title": "Currency",
            "x-gw-createOnly": true,
            "x-gw-typelist": "Currency"
          },
          "eroding": {
            "description": "A `true` value indicates that this transaction erodes the reserves for the associated reserve line. Only applicable if `type` is `Payment`.",
            "title": "Eroding",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "lineItems": {
            "description": "The list of line items that are part of this transaction",
            "items": {
              "$ref": "#/components/schemas/TransactionLineItem"
            },
            "minItems": 1,
            "title": "Line items",
            "type": "array",
            "x-gw-createOnly": true
          },
          "paymentType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of payment, either `partial`, `final`, or `supplement`. Only applicable if `type` is `Payment`.",
            "title": "Payment type",
            "x-gw-typelist": "PaymentType"
          },
          "reserveLine": {
            "$ref": "#/components/schemas/TransactionCoding",
            "description": "The coding for this transaction that determines how it will affect reserves for the claim or exposure",
            "title": "Reserve line",
            "x-gw-createOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The current status of this transaction",
            "readOnly": true,
            "title": "Status",
            "x-gw-typelist": "TransactionStatus"
          },
          "subtype": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of this transaction, such as `Payment` or `Reserve`",
            "readOnly": true,
            "title": "Type",
            "x-gw-typelist": "Transaction"
          },
          "transToClaimExchangeRate": {
            "$ref": "#/components/schemas/TransactionExchangeRate",
            "description": "The exchange rate from the transaction currency to the claim currency",
            "readOnly": true,
            "title": "Transaction to claim exchange rate",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "transToReservingExchangeRate": {
            "$ref": "#/components/schemas/TransactionExchangeRate",
            "description": "The exchange rate from the transaction currency to the reserving currency",
            "nullable": true,
            "title": "Transaction to reserving exchange rate",
            "x-gw-createOnly": true,
            "x-gw-defaultViews": [
              "detail"
            ]
          }
        },
        "title": "Transaction",
        "type": "object",
        "x-gw-filterable": [
          "subtype"
        ],
        "x-gw-requiredForCreate": [
          "currency",
          "lineItems",
          "paymentType",
          "reserveLine"
        ],
        "x-gw-sinceVersion": "1.3.0",
        "x-gw-sortable": [
          "createTime"
        ]
      },
      "TransactionCoding": {
        "description": "A unique combination of an exposure, cost category, cost type, and reserving currency that is used to group transactions for a particular claim in order to establish reserves and make payments against them (Since 1.3.0)",
        "properties": {
          "costCategory": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The cost category for the transaction",
            "title": "Cost category",
            "x-gw-filterBy": [
              "costType"
            ],
            "x-gw-typelist": "CostCategory"
          },
          "costType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The cost type for the transaction",
            "title": "Cost type",
            "x-gw-typelist": "CostType"
          },
          "exposure": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `Exposure` that the transaction applies to",
            "nullable": true,
            "title": "Exposure",
            "x-gw-reference-schema": "Exposure",
            "x-gw-referenceType": "Exposure"
          },
          "recoveryCategory": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The recovery category for the transaction. Only applicable if the `type` of the transaction is `Recovery` or `RecoveryReserve`.",
            "title": "Recovery category",
            "x-gw-typelist": "RecoveryCategory"
          },
          "reservingCurrency": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The reserving currency for the transaction",
            "title": "Reserving currency",
            "x-gw-typelist": "Currency"
          }
        },
        "required": [
          "costCategory",
          "costType",
          "exposure",
          "reservingCurrency"
        ],
        "title": "Transaction coding",
        "type": "object",
        "x-gw-sinceVersion": "1.3.0"
      },
      "TransactionData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Transaction"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "TransactionExchangeRate": {
        "description": "An exchange rate between two currencies (Since 1.3.0)",
        "properties": {
          "description": {
            "description": "A description of the exchange rate",
            "maxLength": 1333,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "market": {
            "description": "A `true` value indicates that this exchange rate will appear in searches for the latest market rates",
            "title": "Market",
            "type": "boolean"
          },
          "rate": {
            "description": "The actual exchange rate",
            "format": "gw-bigdecimal",
            "nullable": true,
            "title": "Rate",
            "type": "string"
          }
        },
        "required": [
          "market"
        ],
        "title": "Transaction exchange rate",
        "type": "object",
        "x-gw-sinceVersion": "1.3.0"
      },
      "TransactionLineItem": {
        "description": "A line item on a transaction (Since 1.3.0)",
        "properties": {
          "claimAmount": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The amount of this line item in the claim currency",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": -1.0E16,
            "title": "Claim amount"
          },
          "comments": {
            "description": "A description of the line item",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Comments",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "lineCategory": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The category for this line item",
            "title": "Line category",
            "x-gw-typelist": "LineCategory"
          },
          "reportingAmount": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The amount of this line item in the reporting currency",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": -1.0E16,
            "title": "Reporting amount"
          },
          "reservingAmount": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The amount of this line item in the currency used for reserves",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": -1.0E16,
            "title": "Reserving amount"
          },
          "transactionAmount": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The amount of this line item in transaction currency",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": -1.0E16,
            "title": "Transaction amount",
            "x-gw-createOnly": true
          }
        },
        "title": "Transaction line item",
        "type": "object",
        "x-gw-requiredForCreate": [
          "transactionAmount"
        ],
        "x-gw-sinceVersion": "1.3.0"
      },
      "TransactionList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/TransactionData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TransactionResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TransactionData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "TripAccommodation": {
        "description": "Trip accommodation (Since 1.5.0)",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/ClaimAddress",
            "description": "Address for the planned accommodation",
            "nullable": true,
            "title": "Address"
          },
          "agentFees": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "Agent fees incurred",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "Agent fees"
          },
          "assessment": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Approve, deny or review an expense",
            "nullable": true,
            "title": "Assessment",
            "x-gw-typelist": "AssessmentAction"
          },
          "cancelOnly": {
            "description": "Indicates if the expense is cancelled without the need for additional arrangements",
            "title": "Cancel only",
            "type": "boolean"
          },
          "cancellationFees": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "Cancellation fees incurred",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "cancellation fees"
          },
          "checkinDateTime": {
            "description": "The check-in date/time of this accommodation",
            "format": "date-time",
            "nullable": true,
            "title": "Check-in date time",
            "type": "string"
          },
          "checkoutDateTime": {
            "description": "The check-out date/time of this accommodation",
            "format": "date-time",
            "nullable": true,
            "title": "Check-out date time",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "otherFees": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "Other fees incurred",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "Other fees"
          },
          "paidAmount": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "Original invoiced amount",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "Paid amount"
          },
          "propertyName": {
            "description": "Name of the accommodation booked",
            "maxLength": 250,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Property name",
            "type": "string"
          },
          "reasonForCancellation": {
            "description": "Reason for cancellation",
            "maxLength": 250,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Reason for cancellation",
            "type": "string"
          },
          "reasonForDenial": {
            "description": "Reason for denial",
            "maxLength": 250,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Reason for denial",
            "type": "string"
          }
        },
        "title": "Trip accommodation",
        "type": "object",
        "x-gw-filterable": [
          "assessment",
          "cancelOnly",
          "checkinDateTime",
          "checkoutDateTime",
          "propertyName"
        ],
        "x-gw-sinceVersion": "1.5.0",
        "x-gw-sortable": [
          "assessment",
          "cancelOnly",
          "checkinDateTime",
          "checkoutDateTime",
          "propertyName"
        ]
      },
      "TripAccommodationData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/TripAccommodation"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "TripAccommodationList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/TripAccommodationData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TripAccommodationRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TripAccommodationData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TripAccommodationResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TripAccommodationData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "TripIncident": {
        "description": "Trip incident (Since 1.5.0)",
        "properties": {
          "description": {
            "description": "Description of the incident",
            "maxLength": 1333,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The severity of the loss",
            "nullable": true,
            "title": "Severity",
            "x-gw-typelist": "SeverityType"
          },
          "tripRiskUnit": {
            "$ref": "#/components/schemas/PolicyObjectReference",
            "description": "Trip involved in the incident",
            "title": "Trip risk unit",
            "x-gw-reference-schema": "TripRiskUnit",
            "x-gw-referenceType": "TripRiskUnit"
          }
        },
        "title": "Trip incident",
        "type": "object",
        "x-gw-filterable": [
          "severity"
        ],
        "x-gw-sinceVersion": "1.5.0",
        "x-gw-sortable": [
          "description",
          "severity"
        ]
      },
      "TripIncidentData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/TripIncident"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "TripIncidentList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/TripIncidentData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TripIncidentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TripIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TripIncidentResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TripIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "TripRiskUnit": {
        "description": "A covered trip risk (Since 1.5.0)",
        "properties": {
          "RUNumber": {
            "description": "The number automatically assigned to this covered risk unit on the policy",
            "readOnly": true,
            "title": "Risk unit number",
            "type": "integer"
          },
          "description": {
            "description": "A description of the risk unit",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "endDate": {
            "description": "The date this trip will end",
            "format": "date-time",
            "nullable": true,
            "title": "End date",
            "type": "string"
          },
          "geographicalRegion": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Geographical region for travel",
            "nullable": true,
            "title": "Geographical region",
            "x-gw-typelist": "GeographicalRegion"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "policySystemId": {
            "description": "The unique identifier of this element within the policy system",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Policy system ID",
            "type": "string"
          },
          "startDate": {
            "description": "The date this trip will start",
            "format": "date-time",
            "nullable": true,
            "title": "Start date",
            "type": "string"
          },
          "tripDescription": {
            "description": "A brief description of the trip",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Trip description",
            "type": "string"
          }
        },
        "title": "Trip risk unit",
        "type": "object",
        "x-gw-filterable": [
          "RUNumber",
          "policySystemId"
        ],
        "x-gw-sinceVersion": "1.5.0",
        "x-gw-sortable": [
          "RUNumber"
        ]
      },
      "TripRiskUnitData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/TripRiskUnit"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "TripRiskUnitList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/TripRiskUnitData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TripRiskUnitRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TripRiskUnitData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TripRiskUnitResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TripRiskUnitData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "TripSegment": {
        "description": "Trip segment (Since 1.5.0)",
        "properties": {
          "agentFees": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "Agent fees incurred",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "Agent fees"
          },
          "arrivalDateTime": {
            "description": "The arrival date/time of this trip segment",
            "format": "date-time",
            "nullable": true,
            "title": "Arrival date time",
            "type": "string"
          },
          "assessment": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Approve, deny or review an expense",
            "nullable": true,
            "title": "Assessment",
            "x-gw-typelist": "AssessmentAction"
          },
          "cancelOnly": {
            "description": "Indicates if the expense is cancelled without the need for additional arrangements",
            "title": "Cancel only",
            "type": "boolean"
          },
          "cancellationFees": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "Cancellation fees incurred",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "cancellation fees"
          },
          "carrierName": {
            "description": "Name of the airline, cruise ship, bus etc",
            "maxLength": 250,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Carrier name",
            "type": "string"
          },
          "carrierNumber": {
            "description": "Flight, ship, bus number etc",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Carrier number",
            "type": "string"
          },
          "departureDateTime": {
            "description": "The departure date/time of this trip segment",
            "format": "date-time",
            "nullable": true,
            "title": "Departure date time",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "otherFees": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "Other fees incurred",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "Other fees"
          },
          "paidAmount": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "Original invoiced amount",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "Paid amount"
          },
          "portOfDisembarkation": {
            "description": "Arrival airport, port, city etc",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Port of disembarkation",
            "type": "string"
          },
          "portOfEmbarkation": {
            "description": "Boarding airport, port, city etc",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Port of embarkation",
            "type": "string"
          },
          "reasonForCancellation": {
            "description": "Reason for cancellation",
            "maxLength": 250,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Reason for cancellation",
            "type": "string"
          },
          "reasonForDenial": {
            "description": "Reason for denial",
            "maxLength": 250,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Reason for denial",
            "type": "string"
          },
          "transportType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Type of transport, airline, cruise ship, taxi etc",
            "nullable": true,
            "title": "Transport type",
            "x-gw-typelist": "TransportType"
          }
        },
        "title": "Trip segment",
        "type": "object",
        "x-gw-filterable": [
          "arrivalDateTime",
          "assessment",
          "cancelOnly",
          "carrierName",
          "carrierNumber",
          "departureDateTime",
          "portOfDisembarkation",
          "portOfEmbarkation",
          "transportType"
        ],
        "x-gw-sinceVersion": "1.5.0",
        "x-gw-sortable": [
          "arrivalDateTime",
          "assessment",
          "cancelOnly",
          "carrierName",
          "carrierNumber",
          "departureDateTime",
          "portOfDisembarkation",
          "portOfEmbarkation",
          "transportType"
        ]
      },
      "TripSegmentData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/TripSegment"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "TripSegmentList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/TripSegmentData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TripSegmentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TripSegmentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TripSegmentResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TripSegmentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "TypeKeyReference": {
        "description": "A reference to a `TypeKey` element that defines an enumerated value from a `TypeList`",
        "properties": {
          "code": {
            "description": "The `code` of the `TypeKey`",
            "title": "Code",
            "type": "string"
          },
          "name": {
            "description": "The `name` of the `TypeKey`",
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "title": "TypeKey reference",
        "type": "object"
      },
      "UnverifiedPolicyCoverageData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Coverage"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "UnverifiedPolicyCoverageList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/UnverifiedPolicyCoverageData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UnverifiedPolicyCoverageRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UnverifiedPolicyCoverageData"
          }
        },
        "type": "object"
      },
      "UnverifiedPolicyCoverageResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UnverifiedPolicyCoverageData"
          }
        },
        "type": "object"
      },
      "UnverifiedPolicyLocation": {
        "description": "A policy location on an unverified policy. An unverified policy is a policy that was manually entered or modified, and therefore it may not match the information in the policy system. (Since 1.2.0)",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "The address of this location",
            "title": "Address"
          },
          "buildings": {
            "description": "A list of buildings at this location",
            "items": {
              "$ref": "#/components/schemas/Building"
            },
            "title": "Buildings",
            "type": "array",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "displayName": {
            "description": "The formatted name of this location",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "locationNumber": {
            "description": "The location number in the context of the policy",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Location number",
            "type": "string"
          },
          "notes": {
            "description": "Additional comments about this location",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Notes",
            "type": "string"
          },
          "policySystemId": {
            "description": "The unique identifier of this element within the policy system",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Policy system ID",
            "type": "string"
          },
          "primaryLocation": {
            "description": "A `true` value indicates that this location is the primary location on the policy",
            "readOnly": true,
            "title": "Primary location",
            "type": "boolean"
          }
        },
        "title": "Unverified policy location",
        "type": "object",
        "x-gw-filterable": [
          "locationNumber",
          "primaryLocation"
        ],
        "x-gw-sinceVersion": "1.2.0",
        "x-gw-sortable": [
          "locationNumber",
          "primaryLocation"
        ]
      },
      "UnverifiedPolicyLocationData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/UnverifiedPolicyLocation"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "UnverifiedPolicyLocationList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/UnverifiedPolicyLocationData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UnverifiedPolicyLocationRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UnverifiedPolicyLocationData"
          }
        },
        "type": "object"
      },
      "UnverifiedPolicyLocationResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UnverifiedPolicyLocationData"
          }
        },
        "type": "object"
      },
      "UpdatablePolicyObjectReference": {
        "description": "A reference to an object, such as a location or vehicle, that may exist on the policy or which may only exist on the claim",
        "properties": {
          "displayName": {
            "description": "The formatted name of the element",
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the referenced element",
            "title": "ID",
            "type": "string"
          },
          "jsonPath": {
            "description": "The path to the referenced element within the overall JSON document (Since 1.2.0)",
            "readOnly": true,
            "title": "JSON path",
            "type": "string",
            "x-gw-defaultViews": [
              "none"
            ],
            "x-gw-sinceVersion": "1.2.0"
          },
          "policySystemId": {
            "description": "The unique identifier of the referenced element within the policy system",
            "title": "Policy system ID",
            "type": "string"
          },
          "refid": {
            "description": "A unique identifier given to the newly created element in the context of the current request",
            "title": "Reference ID",
            "type": "string"
          },
          "type": {
            "description": "The type of the referenced element",
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The canonical URI for the referenced element",
            "title": "URI",
            "type": "string"
          }
        },
        "title": "Updatable policy object reference",
        "type": "object",
        "x-gw-resourceReference": true
      },
      "ValidationIssue": {
        "description": "An error or warning raised during validation",
        "properties": {
          "field": {
            "description": "The field that the issue applies to",
            "title": "Field",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element that the issue applies to",
            "title": "ID",
            "type": "string"
          },
          "message": {
            "description": "The error or warning message",
            "title": "Message",
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The severity of the issue, either `error` or `warning`",
            "title": "Severity",
            "x-gw-typelist": "ValidationIssueType"
          },
          "type": {
            "description": "The type of element that the issue applies to",
            "title": "Type",
            "type": "string"
          },
          "url": {
            "description": "The canonical URI of the element that the issue applies to",
            "title": "URL",
            "type": "string"
          },
          "validationLevel": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The validation level that this issue was raised at",
            "title": "Validation level",
            "x-gw-typelist": "ValidationLevel"
          }
        },
        "title": "Validation issue",
        "type": "object"
      },
      "ValidationResult": {
        "description": "The results of running validation rules against an element",
        "properties": {
          "allValidationLevelsReached": {
            "description": "The list of all the validation levels that were passed by the root element being validated (Since 1.3.0)",
            "items": {
              "$ref": "#/components/schemas/TypeKeyReference",
              "x-gw-typelist": "ValidationLevel"
            },
            "title": "All validation levels reached",
            "type": "array",
            "x-gw-sinceVersion": "1.3.0"
          },
          "hasErrors": {
            "description": "A `true` value indicates that there are one or more issues with a `severity` or `error` on this result",
            "title": "Has errors",
            "type": "boolean"
          },
          "validationIssues": {
            "description": "The list of specific validation issues that were raised by rules",
            "items": {
              "$ref": "#/components/schemas/ValidationIssue"
            },
            "title": "Validation issues",
            "type": "array"
          },
          "validationLevelReached": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The highest validation level that was passed by the root element being validated",
            "title": "Validation level reached",
            "x-gw-typelist": "ValidationLevel"
          }
        },
        "title": "Validation result",
        "type": "object"
      },
      "Vehicle": {
        "description": "A vehicle",
        "properties": {
          "color": {
            "description": "The color of this vehicle",
            "maxLength": 40,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Color",
            "type": "string"
          },
          "displayName": {
            "description": "The formatted name of this vehicle",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "licensePlate": {
            "description": "The license plate number of this vehicle",
            "maxLength": 40,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "License plate",
            "type": "string"
          },
          "make": {
            "description": "The make of this vehicle",
            "maxLength": 40,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Make",
            "type": "string"
          },
          "manufacturer": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The manufacturer of this vehicle",
            "nullable": true,
            "title": "Manufacturer",
            "x-gw-typelist": "VehicleManufacturer"
          },
          "model": {
            "description": "The model of this vehicle",
            "maxLength": 40,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Model",
            "type": "string"
          },
          "policyLabel": {
            "description": "Describes where on the policy this vehicle came from. Only applicable if `policyVehicle` is `true`.",
            "readOnly": true,
            "title": "Policy label",
            "type": "string"
          },
          "policySystemId": {
            "description": "The unique identifier of this element within the policy system",
            "title": "Policy system ID",
            "type": "string"
          },
          "policyVehicle": {
            "description": "A `true` value indicates that this `Vehicle` is part of the claim's policy and cannot be edited directly",
            "readOnly": true,
            "title": "Policy vehicle",
            "type": "boolean"
          },
          "state": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The jurisdiction in which this vehicle is registered",
            "nullable": true,
            "title": "State",
            "x-gw-typelist": "Jurisdiction"
          },
          "style": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The style of this vehicle",
            "nullable": true,
            "title": "Style",
            "x-gw-typelist": "VehicleStyle"
          },
          "vin": {
            "description": "The Vehicle Identification Number of this vehicle",
            "maxLength": 40,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "VIN",
            "type": "string"
          },
          "year": {
            "description": "The model year of this vehicle",
            "nullable": true,
            "title": "Year",
            "type": "integer"
          }
        },
        "title": "Vehicle",
        "type": "object",
        "x-gw-filterable": [
          "policySystemId"
        ]
      },
      "VehicleIncident": {
        "description": "A vehicle that suffered loss or damage",
        "properties": {
          "airbagsDeployed": {
            "description": "A `true` value indicates that the vehicle's airbags were deployed",
            "title": "Airbags deployed",
            "type": "boolean"
          },
          "automationPath": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The path taken by the automated system that created this incident. Only intended for use by automated systems. (Since 1.3.0)",
            "nullable": true,
            "title": "Automation path",
            "x-gw-sinceVersion": "1.3.0",
            "x-gw-typelist": "AutomationPath"
          },
          "childSafetySeatStatus": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The status of the child safety seat, for example instance whether it was occupied or unoccupied (Since 1.3.0)",
            "nullable": true,
            "title": "Child safety seat status",
            "x-gw-sinceVersion": "1.3.0",
            "x-gw-typelist": "ChildSafetySeatStatus"
          },
          "collision": {
            "description": "A `true` value indicates that the vehicle was involved in a collision",
            "title": "Collision",
            "type": "boolean"
          },
          "collisionPoint": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The point of first impact during the collision",
            "title": "Collision point",
            "x-gw-typelist": "CollisionPoint"
          },
          "damageDescription": {
            "description": "A general description of the damage",
            "maxLength": 1333,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "driver": {
            "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
            "description": "A reference to the `ClaimContact` that represents the driver of the vehicle",
            "title": "Driver",
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact"
          },
          "equipmentFailure": {
            "description": "A `true` value indicates that equipment failure was involved in this loss",
            "title": "Equipment failure",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of this element",
            "title": "ID",
            "type": "string"
          },
          "incidentOwner": {
            "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
            "description": "A reference to the `ClaimContact` that represents the owner of the vehicle, if this incident represents a third-party loss",
            "nullable": true,
            "title": "Incident owner",
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact"
          },
          "lossParty": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of loss party, generally either the insured or a third-party",
            "title": "Loss party",
            "x-gw-typelist": "LossPartyType"
          },
          "numOccupants": {
            "description": "Number of occupants in vehicle (Since 1.6.0)",
            "nullable": true,
            "title": "Number of occupants",
            "type": "integer",
            "x-gw-sinceVersion": "1.6.0"
          },
          "passengers": {
            "description": "A list of references to `ClaimContact` elements that represent passengers in the vehicle",
            "items": {
              "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
              "x-gw-reference-schema": "ClaimContact",
              "x-gw-referenceType": "ClaimContact"
            },
            "title": "Excluded parties",
            "type": "array"
          },
          "propertyDamageDescription": {
            "description": "A description of the property that was damaged",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Property description",
            "type": "string"
          },
          "propertyValue": {
            "$ref": "#/components/schemas/MonetaryAmount",
            "description": "The estimated value of the property that was lost or damaged (Since 1.3.0)",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 1.0E16,
            "minimum": 0.0,
            "nullable": true,
            "title": "Property value",
            "x-gw-sinceVersion": "1.3.0"
          },
          "safeToDrive": {
            "description": "A `true` value indicates that the vehicle is still operable",
            "title": "Operable",
            "type": "boolean"
          },
          "severity": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The severity of the loss",
            "title": "Severity",
            "x-gw-typelist": "SeverityType"
          },
          "theft": {
            "description": "A `true` value indicates that the vehicle was stolen",
            "title": "Theft",
            "type": "boolean"
          },
          "totalLoss": {
            "description": "A `true` value indicates that the vehicle is a total loss",
            "nullable": true,
            "title": "Total loss",
            "type": "boolean"
          },
          "valuationRequired": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Whether a valuation should be or has been requested, possibly with a reason given (Since 1.3.0)",
            "title": "Valuation required",
            "x-gw-sinceVersion": "1.3.0",
            "x-gw-typelist": "ValuationRequired"
          },
          "valuationSource": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The source of the property valuation (Since 1.3.0)",
            "title": "Valuation source",
            "x-gw-sinceVersion": "1.3.0",
            "x-gw-typelist": "PropertyValuationSource"
          },
          "vehicle": {
            "$ref": "#/components/schemas/Vehicle",
            "description": "The vehicle involved in the loss",
            "title": "Vehicle"
          },
          "vehicleDirection": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The direction the vehicle was traveling at impact",
            "nullable": true,
            "title": "Vehicle direction",
            "x-gw-typelist": "VehicleDirection"
          },
          "vehicleParked": {
            "description": "A `true` value indicates that the vehicle was parked at the time of the incident",
            "nullable": true,
            "title": "Vehicle parked",
            "type": "boolean"
          },
          "vehicleType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "A description of the type of possession of the vehicle, such as `owned`, `leased`, or `rented`",
            "nullable": true,
            "title": "Vehicle type",
            "x-gw-filterBy": [
              "lossParty"
            ],
            "x-gw-typelist": "VehicleType"
          },
          "vehicleUseReason": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The reason for the vehicle's use (Since 1.2.0)",
            "nullable": true,
            "title": "Vehicle use reason",
            "x-gw-sinceVersion": "1.2.0",
            "x-gw-typelist": "ReasonForUse"
          }
        },
        "title": "Vehicle incident",
        "type": "object",
        "x-gw-sortable": [
          "lossParty",
          "severity",
          "valuationSource"
        ]
      },
      "VehicleIncidentData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/VehicleIncident"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "VehicleIncidentList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/VehicleIncidentData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VehicleIncidentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VehicleIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimRequestInclusions"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "VehicleIncidentResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VehicleIncidentData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "VehicleRiskUnit": {
        "description": "A covered vehicle risk",
        "properties": {
          "RUNumber": {
            "description": "The number automatically assigned to this covered risk unit on the policy",
            "readOnly": true,
            "title": "Risk unit number",
            "type": "integer"
          },
          "coverages": {
            "description": "The list of coverages that apply to this risk unit",
            "items": {
              "$ref": "#/components/schemas/Coverage"
            },
            "readOnly": true,
            "title": "Coverages",
            "type": "array",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "description": {
            "description": "A description of the risk unit",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "policySystemId": {
            "description": "The unique identifier of this element within the policy system",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "\\S",
            "readOnly": true,
            "title": "Policy system ID",
            "type": "string"
          },
          "vehicle": {
            "$ref": "#/components/schemas/Vehicle",
            "description": "Details of the vehicle that is covered",
            "title": "Vehicle",
            "x-gw-defaultViews": [
              "detail"
            ]
          },
          "vehicleId": {
            "description": "The unique identifier of the `Vehicle` that is covered",
            "readOnly": true,
            "title": "Vehicle ID",
            "type": "string"
          },
          "vehicleLocation": {
            "$ref": "#/components/schemas/PolicyLocation",
            "description": "A reference to the `PolicyLocation` that the vehicle is associated with",
            "readOnly": true,
            "title": "Vehicle location"
          }
        },
        "title": "Vehicle risk unit",
        "type": "object",
        "x-gw-filterable": [
          "RUNumber",
          "policySystemId"
        ],
        "x-gw-sortable": [
          "RUNumber"
        ]
      },
      "VehicleRiskUnitData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/VehicleRiskUnit"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": [
              "post",
              "patch"
            ],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "VehicleRiskUnitList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/VehicleRiskUnitData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VehicleRiskUnitRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VehicleRiskUnitData"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "VehicleRiskUnitResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VehicleRiskUnitData"
          },
          "included": {
            "$ref": "#/components/schemas/ClaimResponseInclusions"
          }
        },
        "type": "object"
      },
      "Witness": {
        "description": "Details of the contact who witnessed an incident",
        "properties": {
          "contact": {
            "$ref": "#/components/schemas/UpdatablePolicyObjectReference",
            "description": "A reference to the `ClaimContact` that represents the person who witnessed the loss",
            "title": "Contact",
            "x-gw-reference-schema": "ClaimContact",
            "x-gw-referenceType": "ClaimContact"
          },
          "perspective": {
            "description": "Details of the perspective that the witness observed the loss from",
            "maxLength": 100,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Perspective",
            "type": "string"
          },
          "position": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Where the witness was when the loss occurred",
            "title": "Position",
            "x-gw-typelist": "WitnessPosition"
          },
          "statementObtained": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "A `true` value indicates that a statement was obtained from the witness",
            "title": "Statement obtained",
            "x-gw-typelist": "YesNo"
          }
        },
        "required": [
          "contact"
        ],
        "title": "Witness",
        "type": "object"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "scheme": "basic",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "APIs for claims and related objects",
    "title": "Claim API",
    "version": "1.6.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/batch": {
      "post": {
        "description": "Post a list of subrequests to make against this endpoint. Subrequests will be executed serially, in the order they are specified in the \"requests\" property of the input. Responses to each subrequest will then be batched up and returned all together. Subrequests inherit the headers from the main request, with the exception of the GW-Checksum header, but headers can be specified on the subrequest and will override any headers from the main request.",
        "operationId": "batchRequest",
        "parameters": [
          {
            "description": "Controls what response headers, if any, are included for subresponses. If unspecified, or set to the value \"*all\", all headers for subresponses will be returned. If set to the value \"*none\", no headers for subresponses will be returned. Otherwise, this parameter can consist of a comma-separated list of the names of headers that should be included on subresponses.",
            "explode": false,
            "in": "query",
            "name": "includeResponseHeaders",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchRequest"
              }
            }
          },
          "description": "The body of the batch request",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponse"
                }
              }
            },
            "description": "The batch request itself was well-formed; individual subrequests may have succeeded or failed"
          }
        },
        "summary": "Issue multiple requests at once as a non-transactional batch"
      }
    },
    "/claim-infos": {
      "get": {
        "description": "Retrieves a list of claim infos (Since 1.3.1)",
        "operationId": "getClaimInfos",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimInfosList"
                }
              }
            },
            "description": "The list of claim infos"
          }
        },
        "summary": "Retrieves a list of claim infos",
        "x-gw-childResourceType": "ClaimInfo",
        "x-gw-resourceType": "ClaimInfos",
        "x-gw-sinceVersion": "1.3.1"
      }
    },
    "/claim-infos/{claimInfoId}": {
      "get": {
        "description": "Retrieve a claim info (Since 1.3.1)",
        "operationId": "getClaimInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimInfoResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a claim info",
        "x-gw-resourceType": "ClaimInfo",
        "x-gw-sinceVersion": "1.3.1"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimInfoId"
        }
      ]
    },
    "/claim-infos/{claimInfoId}/retrieve": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimInfoId"
        }
      ],
      "post": {
        "description": "Retrieve a claim (Since 1.3.1)",
        "operationId": "retrieveClaim",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimInfoResponse"
                }
              }
            },
            "description": "Successful retrieve"
          }
        },
        "summary": "Retrieve a claim",
        "x-gw-resourceType": "ClaimInfo",
        "x-gw-sinceVersion": "1.3.1"
      }
    },
    "/claims": {
      "get": {
        "description": "Retrieves a list of assigned claims",
        "operationId": "getClaims",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimsList"
                }
              }
            },
            "description": "The list of claims"
          }
        },
        "summary": "Retrieves a list of claims",
        "x-gw-childResourceType": "Claim",
        "x-gw-resourceType": "Claims"
      },
      "post": {
        "description": "Create a new draft claim",
        "operationId": "createClaim",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimResponse"
                }
              }
            },
            "description": "Successful creation"
          }
        },
        "summary": "Create a new draft claim",
        "x-gw-childResourceType": "Claim",
        "x-gw-resourceType": "Claims"
      }
    },
    "/claims/{claimId}": {
      "get": {
        "description": "Retrieve a claim",
        "operationId": "getClaim",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a claim",
        "x-gw-resourceType": "Claim"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "patch": {
        "description": "Update a claim",
        "operationId": "patchClaim",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update a claim",
        "x-gw-resourceType": "Claim"
      }
    },
    "/claims/{claimId}/activities": {
      "get": {
        "description": "Returns a list of activities associated with this claim",
        "operationId": "getClaimActivities",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityList"
                }
              }
            },
            "description": "Returns a list of activities"
          }
        },
        "summary": "Returns a list of activities associated with this claim",
        "x-gw-childResourceType": "Activity",
        "x-gw-resourceType": "ClaimActivities"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Creates a new activity associated with this claim",
        "operationId": "createClaimActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResponse"
                }
              }
            },
            "description": "Returns the details for the newly-created activity"
          }
        },
        "summary": "Creates a new activity associated with this claim",
        "x-gw-childResourceType": "Activity",
        "x-gw-resourceType": "ClaimActivities"
      }
    },
    "/claims/{claimId}/activity-assignees": {
      "get": {
        "description": "The list of suggested people, groups, queues, etc. that new activities on this claim can be assigned to\n",
        "operationId": "getClaimActivityAssignees",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssigneeList"
                }
              }
            },
            "description": "The suggested assignees"
          }
        },
        "summary": "The list of suggested people, groups, queues, etc. that new activities on this claim can be assigned to",
        "x-gw-childResourceType": "Assignee",
        "x-gw-resourceType": "ClaimActivityAssignees"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/activity-patterns": {
      "get": {
        "description": "Returns a list of activity patterns that can be used to create activities on this claim",
        "operationId": "getClaimActivityPatterns",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityPatternList"
                }
              }
            },
            "description": "Returns a list of activities"
          }
        },
        "summary": "Returns a list of activity patterns that can be used to create activities on this claim",
        "x-gw-childResourceType": "ActivityPattern",
        "x-gw-resourceType": "ClaimActivityPatterns"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/assessment-summaries": {
      "get": {
        "description": "Retrieve a collection of assessment summaries (Since 1.4.0)",
        "operationId": "getAssessmentSummaries",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentSummaryList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a collection of assessment summaries",
        "x-gw-childResourceType": "AssessmentSummary",
        "x-gw-resourceType": "AssessmentSummaries",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new assessment summary (Since 1.4.0)",
        "operationId": "createAssessmentSummary",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssessmentSummaryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentSummaryResponse"
                }
              }
            },
            "description": "The details of the newly-created AssessmentSummary"
          }
        },
        "summary": "Create a new assessment summary",
        "x-gw-childResourceType": "AssessmentSummary",
        "x-gw-resourceType": "AssessmentSummaries",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/claims/{claimId}/assessment-summaries/{assessmentSummaryId}": {
      "get": {
        "description": "Retrieve details of an assessment summary (Since 1.4.0)",
        "operationId": "getAssessmentSummary",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentSummaryResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve details of an assessment summary",
        "x-gw-resourceType": "AssessmentSummary",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/assessmentSummaryId"
        }
      ]
    },
    "/claims/{claimId}/assign": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Assign claim to a user or a group (Since 1.2.0)",
        "operationId": "assignClaim",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimAssignmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimResponse"
                }
              }
            },
            "description": "Successfully assigned the claim"
          }
        },
        "summary": "Assign claim to a user or a group",
        "x-gw-resourceType": "Claim",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/claims/{claimId}/baggage-incidents": {
      "get": {
        "description": "The baggage incidents associated with a given claim (Since 1.5.0)",
        "operationId": "getClaimBaggageIncidents",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaggageIncidentList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The baggage incidents associated with a given claim",
        "x-gw-childResourceType": "BaggageIncident",
        "x-gw-resourceType": "ClaimBaggageIncidents",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new baggage incident on the given claim (Since 1.5.0)",
        "operationId": "createClaimBaggageIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaggageIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaggageIncidentResponse"
                }
              }
            },
            "description": "Successfully created"
          }
        },
        "summary": "Create a new baggage incident on the given claim",
        "x-gw-childResourceType": "BaggageIncident",
        "x-gw-resourceType": "ClaimBaggageIncidents",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/claims/{claimId}/baggage-incidents/{incidentId}": {
      "delete": {
        "description": "Delete a baggage incident on the given claim (Since 1.5.0)",
        "operationId": "deleteBaggageIncident",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a baggageincident on the given claim",
        "x-gw-resourceType": "BaggageIncident",
        "x-gw-sinceVersion": "1.5.0"
      },
      "get": {
        "description": "The details of a specific baggage incident (Since 1.5.0)",
        "operationId": "getBaggageIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaggageIncidentResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific baggage incident",
        "x-gw-resourceType": "BaggageIncident",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        }
      ],
      "patch": {
        "description": "Update the details of a specific baggage incident (Since 1.5.0)",
        "operationId": "patchBaggageIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaggageIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaggageIncidentResponse"
                }
              }
            },
            "description": "Successfully updated"
          }
        },
        "summary": "Update the details of a specific baggage incident",
        "x-gw-resourceType": "BaggageIncident",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/claims/{claimId}/baggage-incidents/{incidentId}/assessment-content-items": {
      "get": {
        "description": "Retrieve a collection of assessment content items (Since 1.5.0)",
        "operationId": "getBaggageIncidentAssessmentContentItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentContentItemList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a collection of assessment content items",
        "x-gw-childResourceType": "AssessmentContentItem",
        "x-gw-resourceType": "AssessmentContentItems",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        }
      ],
      "post": {
        "description": "Create a new assessment content item (Since 1.5.0)",
        "operationId": "createBaggageIncidentAssessmentContentItem",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssessmentContentItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentContentItemResponse"
                }
              }
            },
            "description": "The details of the newly-created AssessmentContentItem"
          }
        },
        "summary": "Create a new assessment content item",
        "x-gw-childResourceType": "AssessmentContentItem",
        "x-gw-resourceType": "AssessmentContentItems",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/claims/{claimId}/baggage-incidents/{incidentId}/assessment-content-items/{assessmentContentItemId}": {
      "delete": {
        "description": "Delete an assessment content item (Since 1.5.0)",
        "operationId": "deleteBaggageIncidentAssessmentContentItem",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete an assessment content item",
        "x-gw-resourceType": "AssessmentContentItem",
        "x-gw-sinceVersion": "1.5.0"
      },
      "get": {
        "description": "Retrieve details of an assessment content item (Since 1.5.0)",
        "operationId": "getBaggageIncidentAssessmentContentItem",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentContentItemResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve details of an assessment content item",
        "x-gw-resourceType": "AssessmentContentItem",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        },
        {
          "$ref": "#/components/parameters/assessmentContentItemId"
        }
      ],
      "patch": {
        "description": "Update an assessment content item (Since 1.5.0)",
        "operationId": "updateBaggageIncidentAssessmentContentItem",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssessmentContentItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentContentItemResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Update an assessment content item",
        "x-gw-resourceType": "AssessmentContentItem",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/claims/{claimId}/cancel": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Cancels and removes the given claim; only allowed on draft claims.",
        "operationId": "cancel",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Cancels and removes the given claim; only allowed on draft claims.",
        "x-gw-resourceType": "Claim"
      }
    },
    "/claims/{claimId}/check-sets": {
      "get": {
        "description": "Retrieve a list of check sets (Since 1.3.0)",
        "operationId": "getCheckSets",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckSetList"
                }
              }
            },
            "description": "The list of CheckSets"
          }
        },
        "summary": "Retrieve a list of check sets",
        "x-gw-childResourceType": "CheckSet",
        "x-gw-resourceType": "CheckSets",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new check set with payments (Since 1.3.0)",
        "operationId": "createCheckSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckSetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckSetResponse"
                }
              }
            },
            "description": "Successful creation"
          }
        },
        "summary": "Create a new check set with payments",
        "x-gw-childResourceType": "CheckSet",
        "x-gw-resourceType": "CheckSets",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/check-sets/{checkSetId}": {
      "get": {
        "description": "Retrieve details of a check set (Since 1.3.0)",
        "operationId": "getCheckSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckSetResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve details of a check set",
        "x-gw-resourceType": "CheckSet",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/checkSetId"
        }
      ]
    },
    "/claims/{claimId}/checks": {
      "get": {
        "description": "Retrieve a list of checks (Since 1.3.0)",
        "operationId": "getChecks",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckList"
                }
              }
            },
            "description": "The list of checks"
          }
        },
        "summary": "Retrieve a list of checks",
        "x-gw-childResourceType": "Check",
        "x-gw-resourceType": "Checks",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/checks/{checkId}": {
      "delete": {
        "description": "Delete a check (Since 1.3.0)",
        "operationId": "deleteCheck",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a check",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "Check",
        "x-gw-sinceVersion": "1.3.0"
      },
      "get": {
        "description": "Retrieve details of a check (Since 1.3.0)",
        "operationId": "getCheck",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve details of a check",
        "x-gw-resourceType": "Check",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/checkId"
        }
      ],
      "patch": {
        "description": "Update a check (Since 1.3.0)",
        "operationId": "patchCheck",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update a check",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "Check",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/checks/{checkId}/acknowledge-submission": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/checkId"
        }
      ],
      "post": {
        "description": "Acknowledge the submission of this check (Since 1.3.0)",
        "operationId": "checkAcknowledgeSubmission",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckResponse"
                }
              }
            },
            "description": "Successfully acknowledged the check's submission"
          }
        },
        "summary": "Acknowledge the submission of this check",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "Check",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/checks/{checkId}/mark-cleared": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/checkId"
        }
      ],
      "post": {
        "description": "Mark check as cleared (Since 1.3.0)",
        "operationId": "checkMarkCleared",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckResponse"
                }
              }
            },
            "description": "Successfully marked this check as cleared"
          }
        },
        "summary": "Mark check as cleared this check",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "Check",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/checks/{checkId}/mark-issued": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/checkId"
        }
      ],
      "post": {
        "description": "Mark check as issued (Since 1.3.0)",
        "operationId": "checkMarkIssued",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckResponse"
                }
              }
            },
            "description": "Successfully marked this check as issued"
          }
        },
        "summary": "Mark check as issued",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "Check",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/checks/{checkId}/mark-stopped": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/checkId"
        }
      ],
      "post": {
        "description": "Mark check as stopped (Since 1.3.0)",
        "operationId": "checkMarkStopped",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckResponse"
                }
              }
            },
            "description": "Successfully marked this check as stopped"
          }
        },
        "summary": "Mark check as stopped",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "Check",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/checks/{checkId}/mark-voided": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/checkId"
        }
      ],
      "post": {
        "description": "Mark check as voided (Since 1.3.0)",
        "operationId": "checkMarkVoided",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckResponse"
                }
              }
            },
            "description": "Successfully marked this check as voided"
          }
        },
        "summary": "Mark check as voided",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "Check",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/checks/{checkId}/request-stop": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/checkId"
        }
      ],
      "post": {
        "description": "Request to stop this check (Since 1.3.0)",
        "operationId": "checkRequestStop",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckResponse"
                }
              }
            },
            "description": "Successfully requested to stop this check"
          }
        },
        "summary": "Request to stop this check",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "Check",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/checks/{checkId}/request-void": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/checkId"
        }
      ],
      "post": {
        "description": "Request to void this check (Since 1.3.0)",
        "operationId": "checkRequestVoid",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckResponse"
                }
              }
            },
            "description": "Successfully requested to void this check"
          }
        },
        "summary": "Request to void this check",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "Check",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/close": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Close this claim and transition it to the 'closed' state",
        "operationId": "closeClaim",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimCloseRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimResponse"
                }
              }
            },
            "description": "Successfully closed the claim"
          }
        },
        "summary": "Close this claim and transition it to the 'closed' state",
        "x-gw-resourceType": "Claim"
      }
    },
    "/claims/{claimId}/contact-role-owners": {
      "get": {
        "description": "The contact role owners associated with a given claim. This includes the claim, policy, incidents, exposures, matters, negotiations, and evaluations. Worker's comp injury incidents are not included.\n",
        "operationId": "getClaimContactRoleOwners",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericRelationList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The contact role owners associated with a given claim, including incidents, exposures, policy, and more.",
        "x-gw-childResourceType": "GenericRelation",
        "x-gw-resourceType": "ClaimContactRoleOwners"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/contacts": {
      "get": {
        "description": "The contacts associated with a given claim",
        "operationId": "getClaimContacts",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimContactList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The contacts associated with a given claim",
        "x-gw-childResourceType": "ClaimContact",
        "x-gw-resourceType": "ClaimContacts"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new contact on the given claim",
        "operationId": "createClaimContact",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResponse"
                }
              }
            },
            "description": "Successfully created"
          }
        },
        "summary": "Create a new contact on the given claim",
        "x-gw-childResourceType": "ClaimContact",
        "x-gw-resourceType": "ClaimContacts"
      }
    },
    "/claims/{claimId}/contacts/{contactId}": {
      "delete": {
        "description": "Delete a contact on the given claim",
        "operationId": "deleteClaimContact",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a contact on the given claim",
        "x-gw-resourceType": "ClaimContact"
      },
      "get": {
        "description": "The details of a specific contact",
        "operationId": "getClaimContact",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific contact",
        "x-gw-resourceType": "ClaimContact"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/contactId"
        }
      ],
      "patch": {
        "description": "Update the details of the specific contact on the given claim",
        "operationId": "patchClaimContact",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResponse"
                }
              }
            },
            "description": "Successfully updated"
          }
        },
        "summary": "Update the details of the specific contact on the given claim",
        "x-gw-resourceType": "ClaimContact"
      }
    },
    "/claims/{claimId}/documents": {
      "get": {
        "description": "The documents associated with a given claim",
        "operationId": "getClaimDocuments",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The documents associated with a given claim",
        "x-gw-childResourceType": "ClaimDocument",
        "x-gw-resourceType": "ClaimDocuments"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new document on the given claim",
        "operationId": "createClaimDocument",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimDocumentRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "content": {
                    "format": "binary",
                    "type": "string"
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/ClaimDocumentRequest"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimDocumentResponse"
                }
              }
            },
            "description": "Successfully created"
          }
        },
        "summary": "Create a new document on the given claim  ",
        "x-gw-childResourceType": "ClaimDocument",
        "x-gw-resourceType": "ClaimDocuments"
      }
    },
    "/claims/{claimId}/documents/{documentId}": {
      "delete": {
        "description": "Delete a document on the given claim",
        "operationId": "deleteClaimDocument",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a document on the given claim",
        "x-gw-resourceType": "ClaimDocument"
      },
      "get": {
        "description": "The details of a specific document",
        "operationId": "getClaimDocument",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimDocumentResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific document",
        "x-gw-resourceType": "ClaimDocument"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/documentId"
        }
      ],
      "patch": {
        "description": "Update a document on the given claim",
        "operationId": "patchClaimDocument",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimDocumentRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "content": {
                    "format": "binary",
                    "type": "string"
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/ClaimDocumentRequest"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimDocumentResponse"
                }
              }
            },
            "description": "Successfully updated"
          }
        },
        "summary": "Update a document on the given claim",
        "x-gw-resourceType": "ClaimDocument"
      }
    },
    "/claims/{claimId}/documents/{documentId}/content": {
      "get": {
        "description": "The contents of a document",
        "operationId": "getDocumentContent",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentContentsResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The contents of a document",
        "x-gw-resourceType": "ClaimDocumentContent"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/documentId"
        }
      ]
    },
    "/claims/{claimId}/dwelling-incidents": {
      "get": {
        "description": "Retrieve dwelling incidents on a claim",
        "operationId": "getDwellingIncidents",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DwellingIncidentList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve dwelling incidents on a claim",
        "x-gw-childResourceType": "DwellingIncident",
        "x-gw-resourceType": "ClaimDwellingIncidents"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new dwelling incident",
        "operationId": "createClaimDwellingIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DwellingIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DwellingIncidentResponse"
                }
              }
            },
            "description": "Successfully created"
          }
        },
        "summary": "Create a new dwelling incident",
        "x-gw-childResourceType": "DwellingIncident",
        "x-gw-resourceType": "ClaimDwellingIncidents"
      }
    },
    "/claims/{claimId}/dwelling-incidents/{incidentId}": {
      "get": {
        "description": "Retrieve a dwelling incident",
        "operationId": "getDwellingIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DwellingIncidentResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a dwelling incident",
        "x-gw-resourceType": "DwellingIncident"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        }
      ],
      "patch": {
        "description": "Update a dwelling incident",
        "operationId": "patchDwellingIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DwellingIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DwellingIncidentResponse"
                }
              }
            },
            "description": "Successfully updated"
          }
        },
        "summary": "Update a dwelling incident",
        "x-gw-resourceType": "DwellingIncident"
      }
    },
    "/claims/{claimId}/exposures": {
      "get": {
        "description": "The exposures associated with a given claim",
        "operationId": "getClaimExposures",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExposuresList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The exposures associated with a given claim",
        "x-gw-childResourceType": "Exposure",
        "x-gw-resourceType": "ClaimExposures"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new exposure on the given claim",
        "operationId": "createClaimExposure",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExposureRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExposureResponse"
                }
              }
            },
            "description": "Successfully created"
          }
        },
        "summary": "Create a new exposure on the given claim",
        "x-gw-childResourceType": "Exposure",
        "x-gw-resourceType": "ClaimExposures"
      }
    },
    "/claims/{claimId}/exposures/{exposureId}": {
      "delete": {
        "description": "Delete the draft exposure",
        "operationId": "deleteExposure",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete the draft exposure",
        "x-gw-resourceType": "Exposure"
      },
      "get": {
        "description": "The details of a specific exposure",
        "operationId": "getExposure",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExposureResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific exposure",
        "x-gw-resourceType": "Exposure"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/exposureId"
        }
      ],
      "patch": {
        "description": "Update the details of the specific exposure on the given claim",
        "operationId": "patchExposure",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExposureRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExposureResponse"
                }
              }
            },
            "description": "Successfully updated"
          }
        },
        "summary": "Update the details of the specific exposure on the given claim",
        "x-gw-resourceType": "Exposure"
      }
    },
    "/claims/{claimId}/exposures/{exposureId}/assign": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/exposureId"
        }
      ],
      "post": {
        "description": "Assign exposure to a user or a group (Since 1.2.0)",
        "operationId": "assignExposure",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExposureAssignmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExposureResponse"
                }
              }
            },
            "description": "Successfully assigned the exposure"
          }
        },
        "summary": "Assign exposure to a user or a group",
        "x-gw-resourceType": "Exposure",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/claims/{claimId}/exposures/{exposureId}/close": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/exposureId"
        }
      ],
      "post": {
        "description": "Close the exposure",
        "operationId": "closeExposure",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExposureCloseRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExposureResponse"
                }
              }
            },
            "description": "Successfully closed the exposure"
          }
        },
        "summary": "Close the exposure",
        "x-gw-resourceType": "Exposure"
      }
    },
    "/claims/{claimId}/exposures/{exposureId}/reopen": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/exposureId"
        }
      ],
      "post": {
        "description": "Reopen this exposure and transition it to the 'open' state (Since 1.6.0)",
        "operationId": "reopenExposure",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExposureReopenRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExposureResponse"
                }
              }
            },
            "description": "Successfully reopened the Exposure"
          }
        },
        "summary": "Reopen this exposure and transition it to the 'open' state",
        "x-gw-resourceType": "Exposure",
        "x-gw-sinceVersion": "1.6.0"
      }
    },
    "/claims/{claimId}/exposures/{exposureId}/validate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/exposureId"
        }
      ],
      "post": {
        "description": "Validate the exposure",
        "operationId": "validateExposure",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExposureValidationRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExposureValidationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Validate the exposure",
        "x-gw-resourceType": "Exposure"
      }
    },
    "/claims/{claimId}/fixed-property-incidents": {
      "get": {
        "description": "The fixed property incidents associated with a given claim",
        "operationId": "getClaimFixedPropertyIncidents",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixedPropertyIncidentList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The fixed property incidents associated with a given claim",
        "x-gw-childResourceType": "FixedPropertyIncident",
        "x-gw-resourceType": "ClaimFixedPropertyIncidents"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new fixed property incident on the given claim",
        "operationId": "createClaimFixedPropertyIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FixedPropertyIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixedPropertyIncidentResponse"
                }
              }
            },
            "description": "Successfully created"
          }
        },
        "summary": "Create a new fixed property incident on the given claim",
        "x-gw-childResourceType": "FixedPropertyIncident",
        "x-gw-resourceType": "ClaimFixedPropertyIncidents"
      }
    },
    "/claims/{claimId}/fixed-property-incidents/{incidentId}": {
      "delete": {
        "description": "Delete a fixed property incident on the given claim",
        "operationId": "deleteFixedPropertyIncident",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a fixed property incident on the given claim",
        "x-gw-resourceType": "FixedPropertyIncident"
      },
      "get": {
        "description": "The details of a specific fixed property incident",
        "operationId": "getFixedPropertyIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixedPropertyIncidentResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific fixed property incident",
        "x-gw-resourceType": "FixedPropertyIncident"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        }
      ],
      "patch": {
        "description": "Update the details of a specific fixed property incident",
        "operationId": "patchFixedPropertyIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FixedPropertyIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixedPropertyIncidentResponse"
                }
              }
            },
            "description": "Successfully updated"
          }
        },
        "summary": "Update the details of a specific fixed property incident",
        "x-gw-resourceType": "FixedPropertyIncident"
      }
    },
    "/claims/{claimId}/general-incidents": {
      "get": {
        "description": "The general incidents associated with a given claim (Since 1.5.0)",
        "operationId": "getClaimGeneralIncidents",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralIncidentList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The general incidents associated with a given claim",
        "x-gw-childResourceType": "GeneralIncident",
        "x-gw-resourceType": "ClaimGeneralIncidents",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a general incident on the given claim (Since 1.5.0)",
        "operationId": "createClaimGeneralIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralIncidentResponse"
                }
              }
            },
            "description": "Successfully created"
          }
        },
        "summary": "Create a general incident on the given claim",
        "x-gw-childResourceType": "GeneralIncident",
        "x-gw-resourceType": "ClaimGeneralIncidents",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/claims/{claimId}/general-incidents/{incidentId}": {
      "delete": {
        "description": "Delete a general incident on the given claim (Since 1.5.0)",
        "operationId": "deleteGeneralIncident",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a general incident on the given claim",
        "x-gw-resourceType": "GeneralIncident",
        "x-gw-sinceVersion": "1.5.0"
      },
      "get": {
        "description": "The details of a specific general incident (Since 1.5.0)",
        "operationId": "getGeneralIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralIncidentResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific general incident",
        "x-gw-resourceType": "GeneralIncident",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        }
      ],
      "patch": {
        "description": "Update the details of a specific general incident (Since 1.5.0)",
        "operationId": "patchGeneralIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralIncidentResponse"
                }
              }
            },
            "description": "Successfully updated"
          }
        },
        "summary": "Update the details of a specific general incident",
        "x-gw-resourceType": "GeneralIncident",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/claims/{claimId}/general-incidents/{incidentId}/assessment-content-items": {
      "get": {
        "description": "Retrieve a collection of assessment content items (Since 1.5.0)",
        "operationId": "getGeneralIncidentAssessmentContentItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentContentItemList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a collection of assessment content items",
        "x-gw-childResourceType": "AssessmentContentItem",
        "x-gw-resourceType": "AssessmentContentItems",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        }
      ],
      "post": {
        "description": "Create a new assessment content item (Since 1.5.0)",
        "operationId": "createGeneralIncidentAssessmentContentItem",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssessmentContentItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentContentItemResponse"
                }
              }
            },
            "description": "The details of the newly-created AssessmentContentItem"
          }
        },
        "summary": "Create a new assessment content item",
        "x-gw-childResourceType": "AssessmentContentItem",
        "x-gw-resourceType": "AssessmentContentItems",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/claims/{claimId}/general-incidents/{incidentId}/assessment-content-items/{assessmentContentItemId}": {
      "delete": {
        "description": "Delete an assessment content item (Since 1.5.0)",
        "operationId": "deleteGeneralIncidentAssessmentContentItem",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete an assessment content item",
        "x-gw-resourceType": "AssessmentContentItem",
        "x-gw-sinceVersion": "1.5.0"
      },
      "get": {
        "description": "Retrieve details of an assessment content item (Since 1.5.0)",
        "operationId": "getGeneralIncidentAssessmentContentItem",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentContentItemResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve details of an assessment content item",
        "x-gw-resourceType": "AssessmentContentItem",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        },
        {
          "$ref": "#/components/parameters/assessmentContentItemId"
        }
      ],
      "patch": {
        "description": "Update an assessment content item (Since 1.5.0)",
        "operationId": "updateGeneralIncidentAssessmentContentItem",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssessmentContentItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentContentItemResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Update an assessment content item",
        "x-gw-resourceType": "AssessmentContentItem",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/claims/{claimId}/injury-incidents": {
      "get": {
        "description": "The injury incidents associated with a given claim",
        "operationId": "getClaimInjuryIncidents",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InjuryIncidentList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The injury incidents associated with a given claim",
        "x-gw-childResourceType": "InjuryIncident",
        "x-gw-resourceType": "ClaimInjuryIncidents"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new injury incident on the given claim",
        "operationId": "createClaimInjuryIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InjuryIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InjuryIncidentResponse"
                }
              }
            },
            "description": "Successfully created"
          }
        },
        "summary": "Create a new injury incident on the given claim",
        "x-gw-childResourceType": "InjuryIncident",
        "x-gw-resourceType": "ClaimInjuryIncidents"
      }
    },
    "/claims/{claimId}/injury-incidents/{incidentId}": {
      "delete": {
        "description": "Delete an injury incident on the given claim",
        "operationId": "deleteInjuryIncident",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete an injury incident on the given claim",
        "x-gw-resourceType": "InjuryIncident"
      },
      "get": {
        "description": "The details of a specific injury incident",
        "operationId": "getInjuryIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InjuryIncidentResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific injury incident",
        "x-gw-resourceType": "InjuryIncident"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        }
      ],
      "patch": {
        "description": "Update the details of a specific injury incident",
        "operationId": "patchInjuryIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InjuryIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InjuryIncidentResponse"
                }
              }
            },
            "description": "Successfully updated"
          }
        },
        "summary": "Update the details of a specific injury incident",
        "x-gw-resourceType": "InjuryIncident"
      }
    },
    "/claims/{claimId}/intake-interactions": {
      "get": {
        "description": "The intake interactions associated with a given claim (Since 1.3.0)",
        "operationId": "getClaimIntakeInteractions",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntakeInteractionsList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The intake interactions associated with a given claim",
        "x-gw-childResourceType": "IntakeInteraction",
        "x-gw-resourceType": "ClaimIntakeInteractions",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new intake interaction on the given claim (Since 1.3.0)",
        "operationId": "createIntakeInteraction",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntakeInteractionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntakeInteractionResponse"
                }
              }
            },
            "description": "Successfully created"
          }
        },
        "summary": "Create a new intake interaction on the given claim",
        "x-gw-childResourceType": "IntakeInteraction",
        "x-gw-resourceType": "ClaimIntakeInteractions",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/intake-interactions/{interactionId}": {
      "get": {
        "description": "The details of a specific intake interaction (Since 1.3.0)",
        "operationId": "getIntakeInteraction",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntakeInteractionResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific intake interaction",
        "x-gw-resourceType": "IntakeInteraction",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/interactionId"
        }
      ],
      "patch": {
        "description": "Update the details of a specific intake interaction (Since 1.3.0)",
        "operationId": "patchIntakeInteraction",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntakeInteractionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntakeInteractionResponse"
                }
              }
            },
            "description": "Successfully updated"
          }
        },
        "summary": "Update the details of a specific intake interaction",
        "x-gw-resourceType": "IntakeInteraction",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/living-expenses-incidents": {
      "get": {
        "description": "Retrieve living expense incidents on a claim",
        "operationId": "getLivingExpensesIncidents",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LivingExpensesIncidentList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve living expense incidents on a claim",
        "x-gw-childResourceType": "LivingExpensesIncident",
        "x-gw-resourceType": "ClaimLivingExpensesIncidents"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new living expense incident",
        "operationId": "createClaimLivingExpensesIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LivingExpensesIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LivingExpensesIncidentResponse"
                }
              }
            },
            "description": "Successfully created"
          }
        },
        "summary": "Create a new living expense incident",
        "x-gw-childResourceType": "LivingExpensesIncident",
        "x-gw-resourceType": "ClaimLivingExpensesIncidents"
      }
    },
    "/claims/{claimId}/living-expenses-incidents/{incidentId}": {
      "get": {
        "description": "Retrieve a living expense incident",
        "operationId": "getLivingExpensesIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LivingExpensesIncidentResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a living expense incident",
        "x-gw-resourceType": "LivingExpensesIncident"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        }
      ],
      "patch": {
        "description": "Update a living expense incident",
        "operationId": "patchLivingExpensesIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LivingExpensesIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LivingExpensesIncidentResponse"
                }
              }
            },
            "description": "Successfully updated"
          }
        },
        "summary": "Update a living expense incident",
        "x-gw-resourceType": "LivingExpensesIncident"
      }
    },
    "/claims/{claimId}/matters": {
      "get": {
        "description": "The matters associated with a given claim (Since 1.6.0)",
        "operationId": "getClaimMatters",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The matters associated with a given claim",
        "x-gw-childResourceType": "Matter",
        "x-gw-resourceType": "ClaimMatters",
        "x-gw-sinceVersion": "1.6.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new matter on the given claim (Since 1.6.0)",
        "operationId": "createMatter",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterResponse"
                }
              }
            },
            "description": "Successfully created"
          }
        },
        "summary": "Create a new matter on the given claim",
        "x-gw-childResourceType": "Matter",
        "x-gw-resourceType": "ClaimMatters",
        "x-gw-sinceVersion": "1.6.0"
      }
    },
    "/claims/{claimId}/matters/{matterId}": {
      "get": {
        "description": "The details of a specific matter (Since 1.6.0)",
        "operationId": "getMatter",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific matter",
        "x-gw-resourceType": "Matter",
        "x-gw-sinceVersion": "1.6.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/matterId"
        }
      ],
      "patch": {
        "description": "Update the details of a specific matter (Since 1.6.0)",
        "operationId": "patchMatter",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterResponse"
                }
              }
            },
            "description": "Successfully updated"
          }
        },
        "summary": "Update the details of a specific matter",
        "x-gw-resourceType": "Matter",
        "x-gw-sinceVersion": "1.6.0"
      }
    },
    "/claims/{claimId}/matters/{matterId}/assign": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/matterId"
        }
      ],
      "post": {
        "description": "Assign matter to a user or a group (Since 1.6.0)",
        "operationId": "assignMatter",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatterAssignmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterResponse"
                }
              }
            },
            "description": "Successfully assigned the matter"
          }
        },
        "summary": "Assign matter to a user or a group",
        "x-gw-resourceType": "Matter",
        "x-gw-sinceVersion": "1.6.0"
      }
    },
    "/claims/{claimId}/matters/{matterId}/close": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/matterId"
        }
      ],
      "post": {
        "description": "Close the matter (Since 1.6.0)",
        "operationId": "closeMatter",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatterCloseRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterResponse"
                }
              }
            },
            "description": "Successfully closed the matter"
          }
        },
        "summary": "Close the matter",
        "x-gw-resourceType": "Matter",
        "x-gw-sinceVersion": "1.6.0"
      }
    },
    "/claims/{claimId}/matters/{matterId}/reopen": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/matterId"
        }
      ],
      "post": {
        "description": "Reopen the matter (Since 1.6.0)",
        "operationId": "reopenMatter",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatterReopenRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterResponse"
                }
              }
            },
            "description": "Successfully reopened the matter"
          }
        },
        "summary": "Reopen the matter",
        "x-gw-resourceType": "Matter",
        "x-gw-sinceVersion": "1.6.0"
      }
    },
    "/claims/{claimId}/notes": {
      "get": {
        "description": "The notes associated with a given claim",
        "operationId": "getClaimNotes",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The notes associated with a given claim",
        "x-gw-childResourceType": "Note",
        "x-gw-resourceType": "ClaimNotes"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new note on this claim",
        "operationId": "createClaimNote",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteResponse"
                }
              }
            },
            "description": "The details of the newly-created note"
          }
        },
        "summary": "Create a new note on this claim",
        "x-gw-childResourceType": "Note",
        "x-gw-resourceType": "ClaimNotes"
      }
    },
    "/claims/{claimId}/other-structure-incidents": {
      "get": {
        "description": "Retrieve a collection of other structure incidents (Since 1.4.0)",
        "operationId": "getOtherStructureIncidents",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OtherStructureIncidentList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a collection of other structure incidents",
        "x-gw-childResourceType": "OtherStructureIncident",
        "x-gw-resourceType": "ClaimOtherStructureIncidents",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new other structure incident (Since 1.4.0)",
        "operationId": "createOtherStructureIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OtherStructureIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OtherStructureIncidentResponse"
                }
              }
            },
            "description": "The details of the newly-created OtherStructureIncident"
          }
        },
        "summary": "Create a new other structure incident",
        "x-gw-childResourceType": "OtherStructureIncident",
        "x-gw-resourceType": "ClaimOtherStructureIncidents",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/claims/{claimId}/other-structure-incidents/{incidentId}": {
      "delete": {
        "description": "Delete a other structure incident (Since 1.4.0)",
        "operationId": "deleteOtherStructureIncident",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a other structure incident",
        "x-gw-resourceType": "OtherStructureIncident",
        "x-gw-sinceVersion": "1.4.0"
      },
      "get": {
        "description": "Retrieve details of a other structure incident (Since 1.4.0)",
        "operationId": "getOtherStructureIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OtherStructureIncidentResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve details of a other structure incident",
        "x-gw-resourceType": "OtherStructureIncident",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        }
      ],
      "patch": {
        "description": "Update a other structure incident (Since 1.4.0)",
        "operationId": "updateOtherStructureIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OtherStructureIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OtherStructureIncidentResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Update a other structure incident",
        "x-gw-resourceType": "OtherStructureIncident",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/claims/{claimId}/payments": {
      "get": {
        "description": "The payments associated with a given claim (Since 1.3.0)",
        "operationId": "getPayments",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The payments associated with a given claim",
        "x-gw-childResourceType": "Payment",
        "x-gw-resourceType": "Payments",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/payments/{transactionId}": {
      "get": {
        "description": "The details of a specific payment (Since 1.3.0)",
        "operationId": "getPayment",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific payment",
        "x-gw-resourceType": "Payment",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/transactionId"
        }
      ]
    },
    "/claims/{claimId}/payments/{transactionId}/acknowledge-submission": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/transactionId"
        }
      ],
      "post": {
        "description": "Acknowledge submission of this payment (Since 1.3.0)",
        "operationId": "paymentAcknowledgeSubmission",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            },
            "description": "Successfully acknowledged the payment's submission"
          }
        },
        "summary": "Acknowledge submission of this payment",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "Payment",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/policy": {
      "get": {
        "description": "The policy associated with a given claim",
        "operationId": "getPolicy",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The policy associated with a given claim",
        "x-gw-resourceType": "Policy"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/policy/coverages": {
      "get": {
        "description": "The policy level coverages associated with a given claim",
        "operationId": "getPolicyCoverages",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyCoverageList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The policy level coverages associated with a given claim",
        "x-gw-childResourceType": "PolicyCoverage",
        "x-gw-resourceType": "PolicyCoverages"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/policy/coverages/{coverageId}": {
      "get": {
        "description": "The policy level coverage associated with a given claim",
        "operationId": "getPolicyCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyCoverageResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The policy level coverage associated with a given claim",
        "x-gw-resourceType": "PolicyCoverage"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/coverageId"
        }
      ]
    },
    "/claims/{claimId}/policy/endorsements": {
      "get": {
        "description": "The policy endorsements of a given claim",
        "operationId": "getPolicyEndorsements",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyEndorsementList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The policy endorsements of a given claim",
        "x-gw-childResourceType": "Endorsement",
        "x-gw-resourceType": "PolicyEndorsements"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/policy/endorsements/{endorsementId}": {
      "get": {
        "description": "The policy endorsement of a given claim",
        "operationId": "getPolicyEndorsement",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyEndorsementResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The policy endorsement of a given claim",
        "x-gw-resourceType": "Endorsement"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/endorsementId"
        }
      ]
    },
    "/claims/{claimId}/policy/location-based-risk-units": {
      "get": {
        "description": "The location based risk units of a policy associated with a given claim",
        "operationId": "getLocationBasedRiskUnits",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationBasedRiskUnitList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The location based risk units of a policy associated with a given claim",
        "x-gw-childResourceType": "LocationBasedRiskUnit",
        "x-gw-resourceType": "LocationBasedRiskUnits"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/policy/location-based-risk-units/{locationBasedRiskUnitId}": {
      "get": {
        "description": "Retrieve a location based risk unit",
        "operationId": "getLocationBasedRiskUnit",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationBasedRiskUnitResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a location based risk unit",
        "x-gw-resourceType": "LocationBasedRiskUnit"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/locationBasedRiskUnitId"
        }
      ]
    },
    "/claims/{claimId}/policy/location-based-risk-units/{locationBasedRiskUnitId}/coverages": {
      "get": {
        "description": "Retrieves a list of coverages on a location based risk unit (Since 1.4.0)",
        "operationId": "getLocationBasedRiskUnitCoverages",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyCoverageList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves a list of coverages on a location based risk unit",
        "x-gw-childResourceType": "LocationBasedRiskUnitCoverage",
        "x-gw-resourceType": "LocationBasedRiskUnitCoverages",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/locationBasedRiskUnitId"
        }
      ]
    },
    "/claims/{claimId}/policy/location-based-risk-units/{locationBasedRiskUnitId}/coverages/{coverageId}": {
      "get": {
        "description": "Details of a coverage on a location based risk unit (Since 1.4.0)",
        "operationId": "getLocationBasedRiskUnitCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyCoverageResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Details of a coverage on a location based risk unit",
        "x-gw-resourceType": "LocationBasedRiskUnitCoverage",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/locationBasedRiskUnitId"
        },
        {
          "$ref": "#/components/parameters/coverageId"
        }
      ]
    },
    "/claims/{claimId}/policy/locations": {
      "get": {
        "description": "The locations associated with a given claim's policy",
        "operationId": "getPolicyLocations",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyLocationList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The locations associated with a given claim's policy",
        "x-gw-childResourceType": "PolicyLocation",
        "x-gw-resourceType": "PolicyLocations"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/policy/locations/{locationId}": {
      "get": {
        "description": "Details of a location on the given claim's policy",
        "operationId": "getPolicyLocation",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyLocationResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Details of a location on the given claim's policy",
        "x-gw-resourceType": "PolicyLocation"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/locationId"
        }
      ]
    },
    "/claims/{claimId}/policy/trip-risk-units": {
      "get": {
        "description": "The trip risk units of a policy associated with a given claim (Since 1.5.0)",
        "operationId": "getTripRiskUnits",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripRiskUnitList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The trip risk units of a policy associated with a given claim",
        "x-gw-childResourceType": "TripRiskUnit",
        "x-gw-resourceType": "TripRiskUnits",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/policy/trip-risk-units/{tripRiskUnitId}": {
      "get": {
        "description": "Retrieve a trip risk unit (Since 1.5.0)",
        "operationId": "getTripRiskUnit",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripRiskUnitResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a trip risk unit",
        "x-gw-resourceType": "TripRiskUnit",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/tripRiskUnitId"
        }
      ]
    },
    "/claims/{claimId}/policy/trip-risk-units/{tripRiskUnitId}/coverages": {
      "get": {
        "description": "Retrieves a list of coverages on a trip risk unit (Since 1.5.0)",
        "operationId": "getTripRiskUnitCoverages",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyCoverageList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves a list of coverages on a trip risk unit",
        "x-gw-childResourceType": "RiskUnitCoverage",
        "x-gw-resourceType": "RiskUnitCoverages",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/tripRiskUnitId"
        }
      ]
    },
    "/claims/{claimId}/policy/trip-risk-units/{tripRiskUnitId}/coverages/{coverageId}": {
      "get": {
        "description": "Details of a coverage on a trip risk unit (Since 1.5.0)",
        "operationId": "getTripRiskUnitCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyCoverageResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Details of a coverage on a trip risk unit",
        "x-gw-resourceType": "RiskUnitCoverage",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/tripRiskUnitId"
        },
        {
          "$ref": "#/components/parameters/coverageId"
        }
      ]
    },
    "/claims/{claimId}/policy/vehicle-risk-units": {
      "get": {
        "description": "The vehicle risk units of a policy associated with a given claim",
        "operationId": "getVehicleRiskUnits",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleRiskUnitList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The vehicle risk units of a policy associated with a given claim",
        "x-gw-childResourceType": "VehicleRiskUnit",
        "x-gw-resourceType": "VehicleRiskUnits"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/policy/vehicle-risk-units/{vehicleRiskUnitId}": {
      "get": {
        "description": "Retrieve a vehicle risk unit",
        "operationId": "getVehicleRiskUnit",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleRiskUnitResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a vehicle risk unit",
        "x-gw-resourceType": "VehicleRiskUnit"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/vehicleRiskUnitId"
        }
      ]
    },
    "/claims/{claimId}/policy/vehicle-risk-units/{vehicleRiskUnitId}/coverages": {
      "get": {
        "description": "Retrieves a list of coverages on a vehicle risk unit (Since 1.4.0)",
        "operationId": "getVehicleRiskUnitCoverages",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyCoverageList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves a list of coverages on a vehicle risk unit",
        "x-gw-childResourceType": "VehicleRiskUnitCoverage",
        "x-gw-resourceType": "VehicleRiskUnitCoverages",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/vehicleRiskUnitId"
        }
      ]
    },
    "/claims/{claimId}/policy/vehicle-risk-units/{vehicleRiskUnitId}/coverages/{coverageId}": {
      "get": {
        "description": "Details of a coverage on a vehicle risk unit (Since 1.4.0)",
        "operationId": "getVehicleRiskUnitCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyCoverageResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Details of a coverage on a vehicle risk unit",
        "x-gw-resourceType": "VehicleRiskUnitCoverage",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/vehicleRiskUnitId"
        },
        {
          "$ref": "#/components/parameters/coverageId"
        }
      ]
    },
    "/claims/{claimId}/property-contents-incidents": {
      "get": {
        "description": "Retrieve a collection of property contents incidents (Since 1.4.0)",
        "operationId": "getPropertyContentsIncidents",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyContentsIncidentList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a collection of property contents incidents",
        "x-gw-childResourceType": "PropertyContentsIncident",
        "x-gw-resourceType": "ClaimPropertyContentsIncidents",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new property contents incident (Since 1.4.0)",
        "operationId": "createPropertyContentsIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyContentsIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyContentsIncidentResponse"
                }
              }
            },
            "description": "The details of the newly-created PropertyContentsIncident"
          }
        },
        "summary": "Create a new property contents incident",
        "x-gw-childResourceType": "PropertyContentsIncident",
        "x-gw-resourceType": "ClaimPropertyContentsIncidents",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/claims/{claimId}/property-contents-incidents/{incidentId}": {
      "delete": {
        "description": "Delete a property contents incident (Since 1.4.0)",
        "operationId": "deletePropertyContentsIncident",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a property contents incident",
        "x-gw-resourceType": "PropertyContentsIncident",
        "x-gw-sinceVersion": "1.4.0"
      },
      "get": {
        "description": "Retrieve details of a property contents incident (Since 1.4.0)",
        "operationId": "getPropertyContentsIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyContentsIncidentResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve details of a property contents incident",
        "x-gw-resourceType": "PropertyContentsIncident",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        }
      ],
      "patch": {
        "description": "Update a property contents incident (Since 1.4.0)",
        "operationId": "updatePropertyContentsIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyContentsIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyContentsIncidentResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Update a property contents incident",
        "x-gw-resourceType": "PropertyContentsIncident",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/claims/{claimId}/property-contents-incidents/{incidentId}/assessment-content-items": {
      "get": {
        "description": "Retrieve a collection of assessment content items (Since 1.4.0)",
        "operationId": "getPropertyContentsIncidentAssessmentContentItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentContentItemList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a collection of assessment content items",
        "x-gw-childResourceType": "AssessmentContentItem",
        "x-gw-resourceType": "AssessmentContentItems",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        }
      ],
      "post": {
        "description": "Create a new assessment content item (Since 1.4.0)",
        "operationId": "createPropertyContentsIncidentAssessmentContentItem",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssessmentContentItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentContentItemResponse"
                }
              }
            },
            "description": "The details of the newly-created AssessmentContentItem"
          }
        },
        "summary": "Create a new assessment content item",
        "x-gw-childResourceType": "AssessmentContentItem",
        "x-gw-resourceType": "AssessmentContentItems",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/claims/{claimId}/property-contents-incidents/{incidentId}/assessment-content-items/{assessmentContentItemId}": {
      "delete": {
        "description": "Delete a assessment content item (Since 1.4.0)",
        "operationId": "deletePropertyContentsIncidentAssessmentContentItem",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a assessment content item",
        "x-gw-resourceType": "AssessmentContentItem",
        "x-gw-sinceVersion": "1.4.0"
      },
      "get": {
        "description": "Retrieve details of a assessment content item (Since 1.4.0)",
        "operationId": "getPropertyContentsIncidentAssessmentContentItem",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentContentItemResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve details of a assessment content item",
        "x-gw-resourceType": "AssessmentContentItem",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        },
        {
          "$ref": "#/components/parameters/assessmentContentItemId"
        }
      ],
      "patch": {
        "description": "Update a assessment content item (Since 1.4.0)",
        "operationId": "updatePropertyContentsIncidentAssessmentContentItem",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssessmentContentItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentContentItemResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Update a assessment content item",
        "x-gw-resourceType": "AssessmentContentItem",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/claims/{claimId}/recoveries": {
      "get": {
        "description": "The recoveries associated with a given claim (Since 1.3.0)",
        "operationId": "getRecoveries",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The recoveries associated with a given claim",
        "x-gw-childResourceType": "Recovery",
        "x-gw-resourceType": "Recoveries",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/recoveries/{transactionId}": {
      "get": {
        "description": "The details of a specific recovery (Since 1.3.0)",
        "operationId": "getRecovery",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific recovery",
        "x-gw-resourceType": "Recovery",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/transactionId"
        }
      ]
    },
    "/claims/{claimId}/recoveries/{transactionId}/acknowledge-submission": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/transactionId"
        }
      ],
      "post": {
        "description": "Acknowledge submission of this recovery (Since 1.3.0)",
        "operationId": "recoveryAcknowledgeSubmission",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            },
            "description": "Successfully acknowledged the recovery's submission"
          }
        },
        "summary": "Acknowledge submission of this recovery",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "Recovery",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/recovery-reserve-sets": {
      "get": {
        "description": "Retrieve a list of recovery reserve sets (Since 1.3.0)",
        "operationId": "getRecoveryReserveSets",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecoveryReserveSetList"
                }
              }
            },
            "description": "The list of recovery reserve sets"
          }
        },
        "summary": "Retrieve a list of recovery reserve sets",
        "x-gw-childResourceType": "RecoveryReserveSet",
        "x-gw-resourceType": "RecoveryReserveSets",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new recovery reserve set with recovery reserves (Since 1.3.0)",
        "operationId": "createRecoveryReserveSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecoveryReserveSetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecoveryReserveSetResponse"
                }
              }
            },
            "description": "Successful creation"
          }
        },
        "summary": "Create a new recovery reserve set with recovery reserves",
        "x-gw-allowForCompositeApi": false,
        "x-gw-childResourceType": "RecoveryReserveSet",
        "x-gw-resourceType": "RecoveryReserveSets",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/recovery-reserve-sets/{recoveryReserveSetId}": {
      "get": {
        "description": "Retrieve details of a recovery reserve set (Since 1.3.0)",
        "operationId": "getRecoveryReserveSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecoveryReserveSetResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve details of a recovery reserve set",
        "x-gw-resourceType": "RecoveryReserveSet",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/recoveryReserveSetId"
        }
      ]
    },
    "/claims/{claimId}/recovery-reserves": {
      "get": {
        "description": "The recovery reserves associated with a given claim (Since 1.3.0)",
        "operationId": "getRecoveryReserves",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The recovery reserves associated with a given claim",
        "x-gw-childResourceType": "RecoveryReserve",
        "x-gw-resourceType": "RecoveryReserves",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/recovery-reserves/{transactionId}": {
      "get": {
        "description": "The details of a specific recovery reserve (Since 1.3.0)",
        "operationId": "getRecoveryReserve",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific recovery reserve",
        "x-gw-resourceType": "RecoveryReserve",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/transactionId"
        }
      ]
    },
    "/claims/{claimId}/recovery-reserves/{transactionId}/acknowledge-submission": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/transactionId"
        }
      ],
      "post": {
        "description": "Acknowledge submission of this recovery reserve (Since 1.3.0)",
        "operationId": "recoveryReserveAcknowledgeSubmission",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            },
            "description": "Successfully acknowledged the recovery reserve's submission"
          }
        },
        "summary": "Acknowledge submission of this recovery reserve",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "RecoveryReserve",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/recovery-sets": {
      "get": {
        "description": "Retrieve a list of recovery sets (Since 1.3.0)",
        "operationId": "getRecoverySets",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecoverySetList"
                }
              }
            },
            "description": "The list of recovery sets"
          }
        },
        "summary": "Retrieve a list of recovery sets",
        "x-gw-childResourceType": "RecoverySet",
        "x-gw-resourceType": "RecoverySets",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new recovery set with recoveries (Since 1.3.0)",
        "operationId": "createRecoverySet",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecoverySetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecoverySetResponse"
                }
              }
            },
            "description": "Successful creation"
          }
        },
        "summary": "Create a new recovery set with recoveries",
        "x-gw-allowForCompositeApi": false,
        "x-gw-childResourceType": "RecoverySet",
        "x-gw-resourceType": "RecoverySets",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/recovery-sets/{recoverySetId}": {
      "get": {
        "description": "Retrieve details of a recovery set (Since 1.3.0)",
        "operationId": "getRecoverySet",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecoverySetResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve details of a recovery set",
        "x-gw-resourceType": "RecoverySet",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/recoverySetId"
        }
      ]
    },
    "/claims/{claimId}/related-objects": {
      "get": {
        "description": "The list of objects related to this claim which can be used as the values for the \"relatedTo\" field on a note or activity. This includes the claim, contacts, unpromoted service requests, service request specialists, exposures, and matters.\n",
        "operationId": "getClaimRelatedObjects",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericRelationList"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "The list of objects related to this claim",
        "x-gw-childResourceType": "GenericRelation",
        "x-gw-resourceType": "ClaimRelatedObjects"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/reopen": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Reopen this claim and transition it to the 'open' state (Since 1.6.0)",
        "operationId": "reopenClaim",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimReopenRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimResponse"
                }
              }
            },
            "description": "Successfully reopened the claim"
          }
        },
        "summary": "Reopen this claim and transition it to the 'open' state",
        "x-gw-resourceType": "Claim",
        "x-gw-sinceVersion": "1.6.0"
      }
    },
    "/claims/{claimId}/reserve-sets": {
      "get": {
        "description": "Retrieve a list of reserve sets (Since 1.3.0)",
        "operationId": "getReserveSets",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReserveSetList"
                }
              }
            },
            "description": "The list of reserve sets"
          }
        },
        "summary": "Retrieve a list of reserve sets",
        "x-gw-childResourceType": "ReserveSet",
        "x-gw-resourceType": "ReserveSets",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new reserve set with reserves (Since 1.3.0)",
        "operationId": "createReserveSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReserveSetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReserveSetResponse"
                }
              }
            },
            "description": "Successful creation"
          }
        },
        "summary": "Create a new reserve set with reserves",
        "x-gw-allowForCompositeApi": false,
        "x-gw-childResourceType": "ReserveSet",
        "x-gw-resourceType": "ReserveSets",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/reserve-sets/{reserveSetId}": {
      "get": {
        "description": "Retrieve details of a reserve set (Since 1.3.0)",
        "operationId": "getReserveSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReserveSetResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve details of a reserve set",
        "x-gw-resourceType": "ReserveSet",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/reserveSetId"
        }
      ]
    },
    "/claims/{claimId}/reserves": {
      "get": {
        "description": "The reserves associated with a given claim (Since 1.3.0)",
        "operationId": "getReserves",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The reserves associated with a given claim",
        "x-gw-childResourceType": "Reserve",
        "x-gw-resourceType": "Reserves",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ]
    },
    "/claims/{claimId}/reserves/{transactionId}": {
      "get": {
        "description": "The details of a specific reserve (Since 1.3.0)",
        "operationId": "getReserve",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific reserve",
        "x-gw-resourceType": "Reserve",
        "x-gw-sinceVersion": "1.3.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/transactionId"
        }
      ]
    },
    "/claims/{claimId}/reserves/{transactionId}/acknowledge-submission": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/transactionId"
        }
      ],
      "post": {
        "description": "Acknowledge submission of this reserve (Since 1.3.0)",
        "operationId": "reserveAcknowledgeSubmission",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            },
            "description": "Successfully acknowledged the reserve's submission"
          }
        },
        "summary": "Acknowledge submission of this reserve",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "Reserve",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/service-requests": {
      "get": {
        "description": "Returns a list of service requests associated with the claim (Since 1.1.0)",
        "operationId": "getServiceRequestsForClaim",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestList"
                }
              }
            },
            "description": "Returns a list of service requests for a claim"
          }
        },
        "summary": "Returns a list of service requests associated with the claim",
        "x-gw-childResourceType": "ServiceRequest",
        "x-gw-resourceType": "ClaimServiceRequests",
        "x-gw-sinceVersion": "1.1.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Adds a service request to the claim (Since 1.1.0)",
        "operationId": "addServiceRequestToClaim",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestResponse"
                }
              }
            },
            "description": "Returns the details of the newly created service request"
          }
        },
        "summary": "Adds a service request to the claim",
        "x-gw-childResourceType": "ServiceRequest",
        "x-gw-resourceType": "ClaimServiceRequests",
        "x-gw-sinceVersion": "1.1.0"
      }
    },
    "/claims/{claimId}/service-requests/{serviceRequestId}": {
      "get": {
        "description": "Retrieves a service request by its id (Since 1.1.0)",
        "operationId": "getServiceRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestResponse"
                }
              }
            },
            "description": "Returns the details of the service request"
          }
        },
        "summary": "Retrieves a service request by its id",
        "x-gw-resourceType": "ServiceRequest",
        "x-gw-sinceVersion": "1.1.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/serviceRequestId"
        }
      ],
      "patch": {
        "description": "Modifies an existing service request (Since 1.1.0)",
        "operationId": "changeServiceRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestResponse"
                }
              }
            },
            "description": "Returns the details of the modified service request"
          }
        },
        "summary": "Modifies an existing service request",
        "x-gw-resourceType": "ServiceRequest",
        "x-gw-sinceVersion": "1.1.0"
      }
    },
    "/claims/{claimId}/service-requests/{serviceRequestId}/accept": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/serviceRequestId"
        }
      ],
      "post": {
        "description": "Records that the specialist has accepted this service request (Since 1.1.0)",
        "operationId": "acceptServiceRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestOperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestResponse"
                }
              }
            },
            "description": "Returns the details of the accepted service request"
          }
        },
        "summary": "Accepts a service request",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "ServiceRequest",
        "x-gw-sinceVersion": "1.1.0"
      }
    },
    "/claims/{claimId}/service-requests/{serviceRequestId}/add-quote": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/serviceRequestId"
        }
      ],
      "post": {
        "description": "Adds a quote to the service request (Since 1.3.0)",
        "operationId": "addServiceRequestQuote",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestOperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestResponse"
                }
              }
            },
            "description": "Returns the details of the updated service request"
          }
        },
        "summary": "Adds a quote to the service request",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "ServiceRequest",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/service-requests/{serviceRequestId}/approve-quote": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/serviceRequestId"
        }
      ],
      "post": {
        "description": "Approves the quote on the service request (Since 1.3.0)",
        "operationId": "approveQuote",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestOperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestResponse"
                }
              }
            },
            "description": "Returns the details of the updated service request"
          }
        },
        "summary": "Approves the quote on the service request",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "ServiceRequest",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/service-requests/{serviceRequestId}/assign": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/serviceRequestId"
        }
      ],
      "post": {
        "description": "Assigns a service request (Since 1.1.0)",
        "operationId": "assignServiceRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestAssignmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestResponse"
                }
              }
            },
            "description": "Returns the details of the assigned service request"
          }
        },
        "summary": "Assigns a service request",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "ServiceRequest",
        "x-gw-sinceVersion": "1.1.0"
      }
    },
    "/claims/{claimId}/service-requests/{serviceRequestId}/cancel": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/serviceRequestId"
        }
      ],
      "post": {
        "description": "Records that the specialist does not intend to perform any further work on this service request (Since 1.2.0)",
        "operationId": "cancelServiceRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestOperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestResponse"
                }
              }
            },
            "description": "Returns the details of the canceled service request"
          }
        },
        "summary": "Cancels a service request",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "ServiceRequest",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/claims/{claimId}/service-requests/{serviceRequestId}/complete-work": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/serviceRequestId"
        }
      ],
      "post": {
        "description": "Indicates that the specialist has completed work (Since 1.2.0)",
        "operationId": "completeRequestedWork",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestOperationRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestResponse"
                }
              }
            },
            "description": "Returns the details of the service request"
          }
        },
        "summary": "Indicates that the specialist has completed work",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "ServiceRequest",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/claims/{claimId}/service-requests/{serviceRequestId}/decline": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/serviceRequestId"
        }
      ],
      "post": {
        "description": "Records that the specialist has declined to perform this service request (Since 1.2.0)",
        "operationId": "declineServiceRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestOperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestResponse"
                }
              }
            },
            "description": "Returns the details of the declined service request"
          }
        },
        "summary": "Declines a service request",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "ServiceRequest",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/claims/{claimId}/service-requests/{serviceRequestId}/internal-cancel": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/serviceRequestId"
        }
      ],
      "post": {
        "description": "Internally cancels this service request without further input from the specialist (Since 1.2.0)",
        "operationId": "internalCancelServiceRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestOperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestResponse"
                }
              }
            },
            "description": "Returns the details of the canceled service request"
          }
        },
        "summary": "Cancels a service request without specialist response",
        "x-gw-resourceType": "ServiceRequest",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/claims/{claimId}/service-requests/{serviceRequestId}/invoices": {
      "get": {
        "description": "Retrieves the invoices on a service request (Since 1.1.0)",
        "operationId": "getServiceRequestInvoices",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestStatementList"
                }
              }
            },
            "description": "Returns the list of the service request's invoices"
          }
        },
        "summary": "Retrieves the invoices on a service request",
        "x-gw-childResourceType": "ServiceRequestInvoice",
        "x-gw-resourceType": "ServiceRequestInvoices",
        "x-gw-sinceVersion": "1.1.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/serviceRequestId"
        }
      ],
      "post": {
        "description": "Creates a new service request invoice (Since 1.1.0)",
        "operationId": "addInvoice",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestStatementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestStatementResponse"
                }
              }
            },
            "description": "Returns the details of the newly created invoice"
          }
        },
        "summary": "Creates a new service request invoice",
        "x-gw-childResourceType": "ServiceRequestInvoice",
        "x-gw-resourceType": "ServiceRequestInvoices",
        "x-gw-sinceVersion": "1.1.0"
      }
    },
    "/claims/{claimId}/service-requests/{serviceRequestId}/invoices/{invoiceId}": {
      "get": {
        "description": "Retrieves a service request invoice by its id (Since 1.1.0)",
        "operationId": "getInvoice",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestStatementResponse"
                }
              }
            },
            "description": "Returns the the service request invoice"
          }
        },
        "summary": "Retrieves a service request invoice by its id",
        "x-gw-resourceType": "ServiceRequestInvoice",
        "x-gw-sinceVersion": "1.1.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/serviceRequestId"
        },
        {
          "$ref": "#/components/parameters/invoiceId"
        }
      ]
    },
    "/claims/{claimId}/service-requests/{serviceRequestId}/invoices/{invoiceId}/approve": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/serviceRequestId"
        },
        {
          "$ref": "#/components/parameters/invoiceId"
        }
      ],
      "post": {
        "description": "Approves an invoice that has been submitted (Since 1.3.0)",
        "operationId": "approveInvoice",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestInvoiceOperationRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestStatementResponse"
                }
              }
            },
            "description": "Returns the details of the approved service request invoice"
          }
        },
        "summary": "Approves an invoice that has been submitted",
        "x-gw-resourceType": "ServiceRequestInvoice",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/service-requests/{serviceRequestId}/invoices/{invoiceId}/mark-as-paid": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/serviceRequestId"
        },
        {
          "$ref": "#/components/parameters/invoiceId"
        }
      ],
      "post": {
        "description": "Mark an invoice as paid (Since 1.3.0)",
        "operationId": "markInvoiceAsPaid",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestInvoiceMarkAsPaidRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestStatementResponse"
                }
              }
            },
            "description": "Returns the details of the paid service request invoice"
          }
        },
        "summary": "Mark an invoice as paid",
        "x-gw-resourceType": "ServiceRequestInvoice",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "/claims/{claimId}/service-requests/{serviceRequestId}/invoices/{invoiceId}/withdraw": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/serviceRequestId"
        },
        {
          "$ref": "#/components/parameters/invoiceId"
        }
      ],
      "post": {
        "description": "Withdraws an invoice that has been submitted (Since 1.2.0)",
        "operationId": "withdrawInvoice",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestInvoiceOperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestStatementResponse"
                }
              }
            },
            "description": "Returns the details of the withdrawn invoice"
          }
        },
        "summary": "Withdraws an invoice that has been submitted",
        "x-gw-allowForCompositeApi": false,
        "x-gw-resourceType": "ServiceRequestInvoice",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/claims/{claimId}/service-requests/{serviceRequestId}/submit": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/serviceRequestId"
        }
      ],
      "post": {
        "description": "Submits the service request to the specialist for acceptance (with optional instruction) (Since 1.1.0)",
        "operationId": "submitServiceRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestOperationRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestResponse"
                }
              }
            },
            "description": "Returns the resulting service request (state)"
          }
        },
        "summary": "Requests service from specialist",
        "x-gw-resourceType": "ServiceRequest",
        "x-gw-sinceVersion": "1.1.0"
      }
    },
    "/claims/{claimId}/submit": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Submit this claim and transition it to the 'open' state",
        "operationId": "submitClaim",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimSubmitRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimResponse"
                }
              }
            },
            "description": "Successfully submitted the claim"
          }
        },
        "summary": "Submit this claim and transition it to the 'open' state",
        "x-gw-resourceType": "Claim"
      }
    },
    "/claims/{claimId}/trip-incidents": {
      "get": {
        "description": "The trip incidents associated with a given claim (Since 1.5.0)",
        "operationId": "getClaimTripIncidents",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripIncidentList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The trip incidents associated with a given claim",
        "x-gw-childResourceType": "TripIncident",
        "x-gw-resourceType": "ClaimTripIncidents",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new trip incident on the given claim (Since 1.5.0)",
        "operationId": "createClaimTripIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripIncidentResponse"
                }
              }
            },
            "description": "Successfully created"
          }
        },
        "summary": "Create a new trip incident on the given claim",
        "x-gw-childResourceType": "TripIncident",
        "x-gw-resourceType": "ClaimTripIncidents",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/claims/{claimId}/trip-incidents/{incidentId}": {
      "delete": {
        "description": "Delete a trip incident on the given claim (Since 1.5.0)",
        "operationId": "deleteTripIncident",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a trip incident on the given claim",
        "x-gw-resourceType": "TripIncident",
        "x-gw-sinceVersion": "1.5.0"
      },
      "get": {
        "description": "The details of a specific trip incident (Since 1.5.0)",
        "operationId": "getTripIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripIncidentResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific trip incident",
        "x-gw-resourceType": "TripIncident",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        }
      ],
      "patch": {
        "description": "Update the details of a specific trip incident (Since 1.5.0)",
        "operationId": "patchTripIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripIncidentResponse"
                }
              }
            },
            "description": "Successfully updated"
          }
        },
        "summary": "Update the details of a specific trip incident",
        "x-gw-resourceType": "TripIncident",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/claims/{claimId}/trip-incidents/{incidentId}/trip-accommodations": {
      "get": {
        "description": "The trip accommodations associated with a given trip incident (Since 1.5.0)",
        "operationId": "getTripAccommodations",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripAccommodationList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The trip accommodations associated with a given trip incident",
        "x-gw-childResourceType": "TripAccommodation",
        "x-gw-resourceType": "TripAccommodations",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        }
      ],
      "post": {
        "description": "Create a new trip trip accommodation on the given trip incident (Since 1.5.0)",
        "operationId": "createTripAccommodation",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripAccommodationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripAccommodationResponse"
                }
              }
            },
            "description": "Successfully created"
          }
        },
        "summary": "Create a new trip trip accommodation on the given trip incident",
        "x-gw-childResourceType": "TripAccommodation",
        "x-gw-resourceType": "TripAccommodations",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/claims/{claimId}/trip-incidents/{incidentId}/trip-accommodations/{accommodationId}": {
      "delete": {
        "description": "Delete a trip trip accommodation on the given trip incident (Since 1.5.0)",
        "operationId": "deleteTripAccommodation",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a trip trip accommodation on the given trip incident",
        "x-gw-resourceType": "TripAccommodation",
        "x-gw-sinceVersion": "1.5.0"
      },
      "get": {
        "description": "The details of a specific trip trip accommodation (Since 1.5.0)",
        "operationId": "getTripAccommodation",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripAccommodationResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific trip trip accommodation",
        "x-gw-resourceType": "TripAccommodation",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        },
        {
          "$ref": "#/components/parameters/accommodationId"
        }
      ],
      "patch": {
        "description": "Update the details of a specific trip trip accommodation (Since 1.5.0)",
        "operationId": "patchTripAccommodation",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripAccommodationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripAccommodationResponse"
                }
              }
            },
            "description": "Successfully updated"
          }
        },
        "summary": "Update the details of a specific trip trip accommodation",
        "x-gw-resourceType": "TripAccommodation",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/claims/{claimId}/trip-incidents/{incidentId}/trip-segments": {
      "get": {
        "description": "The trip segments associated with a given trip incident (Since 1.5.0)",
        "operationId": "getTripSegments",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripSegmentList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The trip segments associated with a given trip incident",
        "x-gw-childResourceType": "TripSegment",
        "x-gw-resourceType": "TripSegments",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        }
      ],
      "post": {
        "description": "Create a new trip segment on the given trip incident (Since 1.5.0)",
        "operationId": "createTripSegment",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripSegmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripSegmentResponse"
                }
              }
            },
            "description": "Successfully created"
          }
        },
        "summary": "Create a new trip segment on the given trip incident",
        "x-gw-childResourceType": "TripSegment",
        "x-gw-resourceType": "TripSegments",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/claims/{claimId}/trip-incidents/{incidentId}/trip-segments/{segmentId}": {
      "delete": {
        "description": "Delete a trip segment on the given trip incident (Since 1.5.0)",
        "operationId": "deleteTripSegment",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a trip segment on the given trip incident",
        "x-gw-resourceType": "TripSegment",
        "x-gw-sinceVersion": "1.5.0"
      },
      "get": {
        "description": "The details of a specific trip segment (Since 1.5.0)",
        "operationId": "getTripSegment",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripSegmentResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The details of a specific trip segment",
        "x-gw-resourceType": "TripSegment",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        },
        {
          "$ref": "#/components/parameters/segmentId"
        }
      ],
      "patch": {
        "description": "Update the details of a specific trip segment (Since 1.5.0)",
        "operationId": "patchTripSegment",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripSegmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripSegmentResponse"
                }
              }
            },
            "description": "Successfully updated"
          }
        },
        "summary": "Update the details of a specific trip segment",
        "x-gw-resourceType": "TripSegment",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/claims/{claimId}/validate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Validate a claim",
        "operationId": "validate",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimValidationRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimValidationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Validate a claim",
        "x-gw-resourceType": "Claim"
      }
    },
    "/claims/{claimId}/vehicle-incidents": {
      "get": {
        "description": "Retrieve vehicle incidents on a claim",
        "operationId": "getClaimVehicleIncidents",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleIncidentList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve vehicle incidents on a claim",
        "x-gw-childResourceType": "VehicleIncident",
        "x-gw-resourceType": "ClaimVehicleIncidents"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        }
      ],
      "post": {
        "description": "Create a new vehicle incident",
        "operationId": "createClaimVehicleIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleIncidentResponse"
                }
              }
            },
            "description": "Successfully created"
          }
        },
        "summary": "Create a new vehicle incident",
        "x-gw-childResourceType": "VehicleIncident",
        "x-gw-resourceType": "ClaimVehicleIncidents"
      }
    },
    "/claims/{claimId}/vehicle-incidents/{incidentId}": {
      "delete": {
        "description": "Delete a vehicle incident on the given claim",
        "operationId": "deleteVehicleIncident",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a vehicle incident on the given claim",
        "x-gw-resourceType": "VehicleIncident"
      },
      "get": {
        "description": "Retrieve a vehicle incident",
        "operationId": "getVehicleIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleIncidentResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieve a vehicle incident",
        "x-gw-resourceType": "VehicleIncident"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/claimId"
        },
        {
          "$ref": "#/components/parameters/incidentId"
        }
      ],
      "patch": {
        "description": "Update a vehicle incident",
        "operationId": "patchVehicleIncident",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleIncidentResponse"
                }
              }
            },
            "description": "Successfully updated"
          }
        },
        "summary": "Update a vehicle incident",
        "x-gw-resourceType": "VehicleIncident"
      }
    },
    "/graph-schema": {
      "get": {
        "description": "Return the JSON Schema Draft-7 representation of the claim graph schema (Since 1.2.0)",
        "operationId": "getClaimGraphSchema",
        "parameters": [
          {
            "description": "Whether to pretty-print the returned schema, making it larger but more human readable. Defaults to false.",
            "in": "query",
            "name": "prettyPrint",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Whether to include all referenced typelist values inline on properties. Defaults to false.",
            "in": "query",
            "name": "inlineTypelists",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Return the JSON Schema Draft-7 representation of the claim graph schema",
        "x-gw-resourceType": "ClaimGraphSchema",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/openapi.json": {
      "get": {
        "description": "Return the Open API 3.0 representation of the schema",
        "operationId": "getOpenApiSchema",
        "parameters": [
          {
            "$ref": "#/components/parameters/enablePolymorphism"
          },
          {
            "$ref": "#/components/parameters/filterByUser"
          },
          {
            "$ref": "#/components/parameters/omitInclusions"
          },
          {
            "$ref": "#/components/parameters/prettyPrintSchema"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Return the Open API 3.0 representation of the schema",
        "x-gw-resourceType": "ClaimApiOpenApiSchema"
      }
    },
    "/role-constraints": {
      "get": {
        "description": "All contact role constraints list",
        "operationId": "getContactRolesConstraints",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "schema",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRoleConstraintList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "All contact role constraints list",
        "x-gw-childResourceType": "ContactRoleConstraint",
        "x-gw-resourceType": "ContactRoleConstraints"
      }
    },
    "/role-constraints/{contactRoleId}": {
      "get": {
        "description": "The constraints of the given contact role",
        "operationId": "getContactRoleConstraint",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "schema",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRoleConstraintResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "The constraints of the given contact role",
        "x-gw-resourceType": "ContactRoleConstraint"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/contactRoleId"
        }
      ]
    },
    "/search/claims": {
      "post": {
        "deprecated": true,
        "description": "Searches for active claims that match the specified criteria (Deprecated as of 1.5.0 - Please use /search/claims-v2)",
        "operationId": "searchClaims",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimSearchResultList"
                }
              }
            },
            "description": "Returns a list of active claims that match the search criteria"
          }
        },
        "summary": "Searches for active claims that match the specified criteria",
        "x-gw-childResourceType": "ClaimSearchResult",
        "x-gw-resourceType": "ClaimSearch"
      }
    },
    "/search/claims-freetext": {
      "post": {
        "description": "Searches for claims that match the specified criteria (Since 1.4.0)",
        "operationId": "searchClaimsFreeText",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimSolrSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimSolrSearchResultList"
                }
              }
            },
            "description": "Returns a list of claims that match the search criteria"
          }
        },
        "summary": "Searches for claims that match the specified criteria",
        "x-gw-childResourceType": "ClaimSolrSearchResult",
        "x-gw-resourceType": "ClaimSolrSearch",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/search/claims-v2": {
      "post": {
        "description": "Searches for active or archived claims that match the specified criteria (Since 1.3.1)",
        "operationId": "searchClaimsV2",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimSearchV2Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimSearchResultWrapperList"
                }
              }
            },
            "description": "Returns a list of active or archived claims that match the search criteria"
          }
        },
        "summary": "Searches for active or archived claims that match the specified criteria",
        "x-gw-childResourceType": "ClaimSearchResultWrapper",
        "x-gw-resourceType": "ClaimSearchV2",
        "x-gw-sinceVersion": "1.3.1"
      }
    },
    "/service-requests": {
      "get": {
        "description": "Retrieves a list of assigned service requests (Since 1.2.0)",
        "operationId": "getServiceRequests",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRequestList"
                }
              }
            },
            "description": "Returns a list of service requests"
          }
        },
        "summary": "Retrieves service requests",
        "x-gw-childResourceType": "ServiceRequest",
        "x-gw-resourceType": "ServiceRequests",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/swagger.json": {
      "get": {
        "description": "Returns a Swagger 2.0 schema for this API as json",
        "operationId": "generateDocs",
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "summary": "Returns the Swagger schema for this API"
      }
    },
    "/unverified-policies": {
      "get": {
        "deprecated": true,
        "description": "Get all unverified policies (Since 1.2.0. Deprecated as of 1.5.0 - This endpoint may perform poorly on large databases because it adds a query restriction on the `Policy.Verified` column, which is not indexed.)",
        "operationId": "getUnverifiedPolicies",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoliciesList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get all unverified policies",
        "x-gw-childResourceType": "UnverifiedPolicy",
        "x-gw-resourceType": "UnverifiedPolicies",
        "x-gw-sinceVersion": "1.2.0"
      },
      "post": {
        "description": "Create an unverified policy for a new claim; this endpoint cannot be used in isolation, and can only be used as part of a composite request followed by a /claims POST (Since 1.2.0)",
        "operationId": "postUnverifiedPolicy",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            },
            "description": "Successful creation"
          }
        },
        "summary": "Create an unverified policy",
        "x-gw-childResourceType": "UnverifiedPolicy",
        "x-gw-resourceType": "UnverifiedPolicies",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/unverified-policies/{policyId}": {
      "get": {
        "description": "Get details of an unverified policy (Since 1.2.0)",
        "operationId": "getUnverifiedPolicy",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get details of an unverified policy",
        "x-gw-resourceType": "UnverifiedPolicy",
        "x-gw-sinceVersion": "1.2.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        }
      ],
      "patch": {
        "description": "Update an unverified policy (Since 1.2.0)",
        "operationId": "patchUnverifiedPolicy",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update an unverified policy",
        "x-gw-resourceType": "UnverifiedPolicy",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/unverified-policies/{policyId}/contacts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        }
      ],
      "post": {
        "description": "Create a contact on an unverified policy that has not yet been attached to a claim; if this policy has already been attached to a claim, use /claims/{claimId}}/contacts POST instead (Since 1.2.0)",
        "operationId": "postUnverifiedPolicyContact",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResponse"
                }
              }
            },
            "description": "Successful creation"
          }
        },
        "summary": "Create a policy contact",
        "x-gw-childResourceType": "UnverifiedPolicyContact",
        "x-gw-resourceType": "UnverifiedPolicyContacts",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/unverified-policies/{policyId}/coverages": {
      "get": {
        "description": "Retrieves a list of policy coverages on an unverified policy (Since 1.2.0)",
        "operationId": "getUnverifiedPolicyCoverages",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves a list of policy coverages on an unverified policy",
        "x-gw-childResourceType": "UnverifiedPolicyCoverage",
        "x-gw-resourceType": "UnverifiedPolicyCoverages",
        "x-gw-sinceVersion": "1.2.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        }
      ],
      "post": {
        "description": "Create a coverage on an unverified policy (Since 1.2.0)",
        "operationId": "postUnverifiedPolicyCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnverifiedPolicyCoverageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageResponse"
                }
              }
            },
            "description": "Successful creation"
          }
        },
        "summary": "Create a policy coverage on an unverified policy",
        "x-gw-childResourceType": "UnverifiedPolicyCoverage",
        "x-gw-resourceType": "UnverifiedPolicyCoverages",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/unverified-policies/{policyId}/coverages/{coverageId}": {
      "get": {
        "description": "Details of a coverage on an unverified policy (Since 1.2.0)",
        "operationId": "getUnverifiedPolicyCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Details of a coverage on an unverified policy",
        "x-gw-resourceType": "UnverifiedPolicyCoverage",
        "x-gw-sinceVersion": "1.2.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        },
        {
          "$ref": "#/components/parameters/coverageId"
        }
      ],
      "patch": {
        "description": "Update a coverage on an unverified policy (Since 1.2.0)",
        "operationId": "patchUnverifiedPolicyCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnverifiedPolicyCoverageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update a coverage on an unverified policy",
        "x-gw-resourceType": "UnverifiedPolicyCoverage",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/unverified-policies/{policyId}/location-based-risk-units": {
      "get": {
        "description": "Retrieves a list of location based risk units (Since 1.2.0)",
        "operationId": "getUnverifiedLocationBasedRiskUnits",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationBasedRiskUnitList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves a list of location based risk units",
        "x-gw-childResourceType": "UnverifiedLocationBasedRiskUnit",
        "x-gw-resourceType": "UnverifiedLocationBasedRiskUnits",
        "x-gw-sinceVersion": "1.2.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        }
      ],
      "post": {
        "description": "Create a location-based risk unit (Since 1.2.0)",
        "operationId": "postUnverifiedLocationBasedRiskUnit",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationBasedRiskUnitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationBasedRiskUnitResponse"
                }
              }
            },
            "description": "Successful creation"
          }
        },
        "summary": "Create a location-based risk unit",
        "x-gw-childResourceType": "UnverifiedLocationBasedRiskUnit",
        "x-gw-resourceType": "UnverifiedLocationBasedRiskUnits",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/unverified-policies/{policyId}/location-based-risk-units/{locationBasedRiskUnitId}": {
      "get": {
        "description": "Get a location based risk unit (Since 1.2.0)",
        "operationId": "getUnverifiedLocationBasedRiskUnit",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationBasedRiskUnitResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get a location based risk unit",
        "x-gw-resourceType": "UnverifiedLocationBasedRiskUnit",
        "x-gw-sinceVersion": "1.2.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        },
        {
          "$ref": "#/components/parameters/locationBasedRiskUnitId"
        }
      ],
      "patch": {
        "description": "Update a location based risk unit (Since 1.2.0)",
        "operationId": "patchUnverifiedLocationBasedRiskUnit",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationBasedRiskUnitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationBasedRiskUnitResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update a location based risk unit",
        "x-gw-resourceType": "UnverifiedLocationBasedRiskUnit",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/unverified-policies/{policyId}/location-based-risk-units/{locationBasedRiskUnitId}/coverages": {
      "get": {
        "description": "Retrieves a list of coverages on a location based risk unit (Since 1.2.0)",
        "operationId": "getUnverifiedLocationBasedRiskUnitCoverages",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves a list of coverages on a location based risk unit",
        "x-gw-childResourceType": "UnverifiedLocationBasedRiskUnitCoverage",
        "x-gw-resourceType": "UnverifiedLocationBasedRiskUnitCoverages",
        "x-gw-sinceVersion": "1.2.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        },
        {
          "$ref": "#/components/parameters/locationBasedRiskUnitId"
        }
      ],
      "post": {
        "description": "Create a coverage on a location based risk unit (Since 1.2.0)",
        "operationId": "postUnverifiedLocationBasedRiskUnitCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnverifiedPolicyCoverageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageResponse"
                }
              }
            },
            "description": "Successful creation"
          }
        },
        "summary": "Create a coverage on a location based risk unit",
        "x-gw-childResourceType": "UnverifiedLocationBasedRiskUnitCoverage",
        "x-gw-resourceType": "UnverifiedLocationBasedRiskUnitCoverages",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/unverified-policies/{policyId}/location-based-risk-units/{locationBasedRiskUnitId}/coverages/{coverageId}": {
      "get": {
        "description": "Details of a coverage on a location based risk unit (Since 1.2.0)",
        "operationId": "getUnverifiedLocationBasedRiskUnitCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Details of a coverage on a location based risk unit",
        "x-gw-resourceType": "UnverifiedLocationBasedRiskUnitCoverage",
        "x-gw-sinceVersion": "1.2.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        },
        {
          "$ref": "#/components/parameters/locationBasedRiskUnitId"
        },
        {
          "$ref": "#/components/parameters/coverageId"
        }
      ],
      "patch": {
        "description": "Update a coverage on a location based risk unit (Since 1.2.0)",
        "operationId": "patchUnverifiedLocationBasedRiskUnitCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnverifiedPolicyCoverageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update a coverage on a location based risk unit",
        "x-gw-resourceType": "UnverifiedLocationBasedRiskUnitCoverage",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/unverified-policies/{policyId}/locations": {
      "get": {
        "description": "Retrieves a list of policy locations (Since 1.2.0)",
        "operationId": "getUnverifiedPolicyLocations",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyLocationList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves a list of policy locations",
        "x-gw-childResourceType": "UnverifiedPolicyLocation",
        "x-gw-resourceType": "UnverifiedPolicyLocations",
        "x-gw-sinceVersion": "1.2.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        }
      ],
      "post": {
        "description": "Create a policy location on an unverified policy (Since 1.2.0)",
        "operationId": "postUnverifiedPolicyLocation",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnverifiedPolicyLocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyLocationResponse"
                }
              }
            },
            "description": "Successful creation"
          }
        },
        "summary": "Create a policy location",
        "x-gw-childResourceType": "UnverifiedPolicyLocation",
        "x-gw-resourceType": "UnverifiedPolicyLocations",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/unverified-policies/{policyId}/locations/{locationId}": {
      "get": {
        "description": "Details of a location on a policy (Since 1.2.0)",
        "operationId": "getUnverifiedPolicyLocation",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyLocationResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Details of a location on a policy",
        "x-gw-resourceType": "UnverifiedPolicyLocation",
        "x-gw-sinceVersion": "1.2.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        },
        {
          "$ref": "#/components/parameters/locationId"
        }
      ],
      "patch": {
        "description": "Update a location on a policy (Since 1.2.0)",
        "operationId": "patchUnverifiedPolicyLocation",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnverifiedPolicyLocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyLocationResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update a location on a policy",
        "x-gw-resourceType": "UnverifiedPolicyLocation",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/unverified-policies/{policyId}/trip-risk-units": {
      "get": {
        "description": "Retrieves a list of trip risk units (Since 1.5.0)",
        "operationId": "getUnverifiedTripRiskUnits",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripRiskUnitList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves a list of trip risk units",
        "x-gw-childResourceType": "UnverifiedTripRiskUnit",
        "x-gw-resourceType": "UnverifiedTripRiskUnits",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        }
      ],
      "post": {
        "description": "Create a trip risk unit (Since 1.5.0)",
        "operationId": "postUnverifiedTripRiskUnit",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripRiskUnitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripRiskUnitResponse"
                }
              }
            },
            "description": "Successful creation"
          }
        },
        "summary": "Create a trip risk unit",
        "x-gw-childResourceType": "UnverifiedTripRiskUnit",
        "x-gw-resourceType": "UnverifiedTripRiskUnits",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/unverified-policies/{policyId}/trip-risk-units/{tripRiskUnitId}": {
      "get": {
        "description": "Get a trip risk unit (Since 1.5.0)",
        "operationId": "getUnverifiedTripRiskUnit",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripRiskUnitResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get a trip risk unit",
        "x-gw-resourceType": "UnverifiedTripRiskUnit",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        },
        {
          "$ref": "#/components/parameters/tripRiskUnitId"
        }
      ],
      "patch": {
        "description": "Update a trip risk unit (Since 1.5.0)",
        "operationId": "patchUnverifiedTripRiskUnit",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripRiskUnitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripRiskUnitResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update a trip risk unit",
        "x-gw-resourceType": "UnverifiedTripRiskUnit",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/unverified-policies/{policyId}/trip-risk-units/{tripRiskUnitId}/coverages": {
      "get": {
        "description": "Retrieves a list of coverages on a trip risk unit (Since 1.5.0)",
        "operationId": "getUnverifiedTripRiskUnitCoverages",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves a list of coverages on a trip risk unit",
        "x-gw-childResourceType": "UnverifiedRiskUnitCoverage",
        "x-gw-resourceType": "UnverifiedRiskUnitCoverages",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        },
        {
          "$ref": "#/components/parameters/tripRiskUnitId"
        }
      ],
      "post": {
        "description": "Create a coverage on a trip risk unit (Since 1.5.0)",
        "operationId": "postUnverifiedTripRiskUnitCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnverifiedPolicyCoverageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageResponse"
                }
              }
            },
            "description": "Successful creation"
          }
        },
        "summary": "Create a coverage on a trip risk unit",
        "x-gw-childResourceType": "UnverifiedRiskUnitCoverage",
        "x-gw-resourceType": "UnverifiedRiskUnitCoverages",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/unverified-policies/{policyId}/trip-risk-units/{tripRiskUnitId}/coverages/{coverageId}": {
      "get": {
        "description": "Details of a coverage on a trip risk unit (Since 1.5.0)",
        "operationId": "getUnverifiedTripRiskUnitCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Details of a coverage on a trip risk unit",
        "x-gw-resourceType": "UnverifiedRiskUnitCoverage",
        "x-gw-sinceVersion": "1.5.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        },
        {
          "$ref": "#/components/parameters/tripRiskUnitId"
        },
        {
          "$ref": "#/components/parameters/coverageId"
        }
      ],
      "patch": {
        "description": "Update a coverage on a trip risk unit (Since 1.5.0)",
        "operationId": "patchUnverifiedTripRiskUnitCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnverifiedPolicyCoverageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update a coverage on a trip risk unit",
        "x-gw-resourceType": "UnverifiedRiskUnitCoverage",
        "x-gw-sinceVersion": "1.5.0"
      }
    },
    "/unverified-policies/{policyId}/vehicle-risk-units": {
      "get": {
        "description": "Retrieves a list of vehicle risk units (Since 1.2.0)",
        "operationId": "getUnverifiedVehicleRiskUnits",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleRiskUnitList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves a list of vehicle risk units",
        "x-gw-childResourceType": "UnverifiedVehicleRiskUnit",
        "x-gw-resourceType": "UnverifiedVehicleRiskUnits",
        "x-gw-sinceVersion": "1.2.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        }
      ],
      "post": {
        "description": "Create a vehicle risk unit (Since 1.2.0)",
        "operationId": "postUnverifiedVehicleRiskUnit",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleRiskUnitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleRiskUnitResponse"
                }
              }
            },
            "description": "Successful creation"
          }
        },
        "summary": "Create a vehicle risk unit",
        "x-gw-childResourceType": "UnverifiedVehicleRiskUnit",
        "x-gw-resourceType": "UnverifiedVehicleRiskUnits",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/unverified-policies/{policyId}/vehicle-risk-units/{vehicleRiskUnitId}": {
      "get": {
        "description": "Get a vehicle risk unit (Since 1.2.0)",
        "operationId": "getUnverifiedVehicleRiskUnit",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleRiskUnitResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get a vehicle risk unit",
        "x-gw-resourceType": "UnverifiedVehicleRiskUnit",
        "x-gw-sinceVersion": "1.2.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        },
        {
          "$ref": "#/components/parameters/vehicleRiskUnitId"
        }
      ],
      "patch": {
        "description": "Update a vehicle risk unit (Since 1.2.0)",
        "operationId": "patchUnverifiedVehicleRiskUnit",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleRiskUnitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleRiskUnitResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update a vehicle risk unit",
        "x-gw-resourceType": "UnverifiedVehicleRiskUnit",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/unverified-policies/{policyId}/vehicle-risk-units/{vehicleRiskUnitId}/coverages": {
      "get": {
        "description": "Retrieves a list of coverages on a vehicle risk unit (Since 1.2.0)",
        "operationId": "getUnverifiedVehicleRiskUnitCoverages",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageList"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Retrieves a list of coverages on a vehicle risk unit",
        "x-gw-childResourceType": "UnverifiedVehicleRiskUnitCoverage",
        "x-gw-resourceType": "UnverifiedVehicleRiskUnitCoverages",
        "x-gw-sinceVersion": "1.2.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        },
        {
          "$ref": "#/components/parameters/vehicleRiskUnitId"
        }
      ],
      "post": {
        "description": "Create a coverage on a vehicle risk unit (Since 1.2.0)",
        "operationId": "postUnverifiedVehicleRiskUnitCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnverifiedPolicyCoverageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageResponse"
                }
              }
            },
            "description": "Successful creation"
          }
        },
        "summary": "Create a coverage on a vehicle risk unit",
        "x-gw-childResourceType": "UnverifiedVehicleRiskUnitCoverage",
        "x-gw-resourceType": "UnverifiedVehicleRiskUnitCoverages",
        "x-gw-sinceVersion": "1.2.0"
      }
    },
    "/unverified-policies/{policyId}/vehicle-risk-units/{vehicleRiskUnitId}/coverages/{coverageId}": {
      "get": {
        "description": "Details of a coverage on a vehicle risk unit (Since 1.2.0)",
        "operationId": "getUnverifiedVehicleRiskUnitCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Details of a coverage on a vehicle risk unit",
        "x-gw-resourceType": "UnverifiedVehicleRiskUnitCoverage",
        "x-gw-sinceVersion": "1.2.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/policyId"
        },
        {
          "$ref": "#/components/parameters/vehicleRiskUnitId"
        },
        {
          "$ref": "#/components/parameters/coverageId"
        }
      ],
      "patch": {
        "description": "Update a coverage on a vehicle risk unit (Since 1.2.0)",
        "operationId": "patchUnverifiedVehicleRiskUnitCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnverifiedPolicyCoverageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnverifiedPolicyCoverageResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update a coverage on a vehicle risk unit",
        "x-gw-resourceType": "UnverifiedVehicleRiskUnitCoverage",
        "x-gw-sinceVersion": "1.2.0"
      }
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://cc-dev-gwcpdev.saappian.zeta1-andromeda.guidewire.net:443/rest/claim/v1"
    }
  ]
}
