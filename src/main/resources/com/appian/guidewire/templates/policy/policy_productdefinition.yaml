openapi: 3.0.1
info:
  title: Product Definition API
  description: APIs for PolicyCenter product definition metadata
  version: 1.5.0
servers:
- url: http://se-flaine-au-release-iag.iia-appian-poc.poc.gwdemo.com:443/pc/rest/productdefinition/v1
security:
- basicAuth: []
paths:
  /batch:
    post:
      summary: Issue multiple requests at once as a non-transactional batch
      description: Post a list of subrequests to make against this endpoint. Subrequests
        will be executed serially, in the order they are specified in the "requests"
        property of the input. Responses to each subrequest will then be batched up
        and returned all together. Subrequests inherit the headers from the main request,
        with the exception of the GW-Checksum header, but headers can be specified
        on the subrequest and will override any headers from the main request.
      operationId: batchRequest
      parameters:
      - name: includeResponseHeaders
        in: query
        description: Controls what response headers, if any, are included for subresponses.
          If unspecified, or set to the value "*all", all headers for subresponses
          will be returned. If set to the value "*none", no headers for subresponses
          will be returned. Otherwise, this parameter can consist of a comma-separated
          list of the names of headers that should be included on subresponses.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      requestBody:
        description: The body of the batch request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchRequest'
        required: true
      responses:
        200:
          description: The batch request itself was well-formed; individual subrequests
            may have succeeded or failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
      x-codegen-request-body-name: body
  /import-edition:
    post:
      summary: Import edition
      description: Import edition (Since 1.1.0)
      operationId: importEdition
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - content
              properties:
                content:
                  type: string
                  format: binary
        required: true
      responses:
        201:
          description: Edition has been successfully loaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportEditionResponse'
      x-gw-sinceVersion: 1.1.0
      x-gw-extensions:
        childResourceType: ImportEdition
        operationType: post-collection
        resourceType: ImportEditions
  /import-template:
    post:
      summary: Import a new product template
      description: Import a new product template
      operationId: importTemplate
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - content
              properties:
                content:
                  type: string
                  format: binary
        required: true
      responses:
        201:
          description: Product has been successfully loaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportTemplateResponse'
      x-gw-extensions:
        childResourceType: ImportTemplate
        operationType: post-collection
        resourceType: ImportTemplates
  /import-xmind:
    post:
      summary: Import a new product xmind
      description: Import a new product xmind
      operationId: importXMind
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - content
              properties:
                content:
                  type: string
                  format: binary
        required: true
      responses:
        201:
          description: Product has been successfully loaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportTemplateResponse'
      x-gw-extensions:
        childResourceType: ImportXMind
        operationType: post-collection
        resourceType: ImportXMinds
  /lines:
    get:
      summary: Return the list of policy lines
      description: Return the list of policy lines
      operationId: getAvailablePolicyLines
      parameters:
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLinePatternList'
      x-gw-extensions:
        childResourceType: PolicyLinePattern
        operationType: get-collection
        resourceType: PolicyLinePatterns
  /lines/{lineId}:
    get:
      summary: Return the details of a given policy line
      description: Return the details of a given policy line
      operationId: getPolicyLine
      parameters:
      - name: lineId
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLinePatternResponse'
      x-gw-extensions:
        operationType: get-element
        resourceType: PolicyLinePattern
  /lines/{lineId}/activate-editions:
    post:
      summary: Activate preloaded editions for a policy line
      description: Activate preloaded editions for a policy line (Since 1.1.0)
      operationId: activatePreLoadedEditions
      parameters:
      - name: lineId
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivatedEditionsListResponse'
      x-gw-sinceVersion: 1.1.0
      x-gw-extensions:
        operationType: custom-action
        resourceType: PolicyLinePattern
  /lines/{lineId}/coverables:
    get:
      summary: Return all coverable sub-entities of the line
      description: Return all coverable sub-entities of the line
      operationId: getPolicyLineCoverables
      parameters:
      - name: lineId
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverablePatternList'
      x-gw-extensions:
        childResourceType: CoverablePattern
        operationType: get-collection
        resourceType: PolicyLinePatternCoverables
  /lines/{lineId}/coverables/{coverableId}:
    get:
      summary: Return details of a coverable sub-entity
      description: Return details of a coverable sub-entity
      operationId: getCoverable
      parameters:
      - name: lineId
        in: path
        required: true
        schema:
          type: string
      - name: coverableId
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverablePatternResponse'
      x-gw-extensions:
        operationType: get-element
        resourceType: CoverablePattern
  /lines/{lineId}/coverables/{coverableId}/coverages:
    get:
      summary: Return the coverages applicable to a particular coverable
      description: Return the coverages applicable to a particular coverable
      operationId: getCoverableCoverages
      parameters:
      - name: lineId
        in: path
        required: true
        schema:
          type: string
      - name: coverableId
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoveragePatternList'
      x-gw-extensions:
        childResourceType: CoveragePattern
        operationType: get-collection
        resourceType: CoverablePatternCoverages
  /lines/{lineId}/coverages:
    get:
      summary: Return the line-level coverages
      description: Return the line-level coverages
      operationId: getPolicyLineCoverages
      parameters:
      - name: lineId
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoveragePatternList'
      x-gw-extensions:
        childResourceType: CoveragePattern
        operationType: get-collection
        resourceType: PolicyLinePatternCoverages
  /lines/{lineId}/exposures:
    get:
      summary: Return all exposure sub-entities of the line
      description: Return all exposure sub-entities of the line
      operationId: getPolicyLineExposures
      parameters:
      - name: lineId
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExposurePatternList'
      x-gw-extensions:
        childResourceType: ExposurePattern
        operationType: get-collection
        resourceType: PolicyLinePatternExposures
  /lines/{lineId}/exposures/{exposureId}:
    get:
      summary: Return details of an exposure sub-entity
      description: Return details of an exposure sub-entity
      operationId: getExposure
      parameters:
      - name: lineId
        in: path
        required: true
        schema:
          type: string
      - name: exposureId
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExposurePatternResponse'
      x-gw-extensions:
        operationType: get-element
        resourceType: ExposurePattern
  /lines/{lineId}/questions:
    get:
      summary: Return the line-level questions
      description: Return the line-level questions
      operationId: getPolicyLineQuestions
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
      - name: lineId
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLineQuestionsResponse'
      x-gw-extensions:
        operationType: get-element
        resourceType: PolicyLinePatternQuestions
  /openapi.json:
    get:
      summary: Return the Open API 3.0 representation of the schema
      description: Return the Open API 3.0 representation of the schema
      operationId: getOpenApiSchema
      parameters:
      - name: enablePolymorphism
        in: query
        description: Whether or not to use the `discriminator`/`oneOf` pattern to
          output schemas in cases where the valid set of fields can vary based on
          some attribute of the data such as the country or subtype.  Defaults to
          `true`. See the documentation for more information.
        schema:
          type: boolean
          default: true
      - name: filterByUser
        in: query
        description: Whether or not to filter endpoints and schema properties by the
          authorization of the caller. Defaults to `false`.
        schema:
          type: boolean
          default: false
      - name: omitInclusions
        in: query
        description: Whether or not to omit the `included` properties on request and
          response schemas.  Defaults to `false`. See the documentation for more information.
          (Since 1.4.0)
        schema:
          type: boolean
          default: false
          x-gw-sinceVersion: 1.4.0
        x-gw-sinceVersion: 1.4.0
      - name: prettyPrint
        in: query
        description: Whether or not to pretty-print the returned schema, making it
          larger but more human readable.  Defaults to `false`.
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: string
      x-gw-extensions:
        operationType: get-element
        resourceType: ProductDefinitionApiOpenApiSchema
  /product-templates:
    get:
      summary: Returns a list of all product templates available in the system
      description: Returns a list of all product templates available in the system,
        including all versions of installed and visualize-mode products
      operationId: getProductTemplates
      parameters:
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductTemplateList'
      x-gw-extensions:
        childResourceType: ProductTemplate
        operationType: get-collection
        resourceType: ProductTemplates
  /product-templates/{productId}:
    get:
      summary: Returns details of a single product template
      description: Returns details of a single product template
      operationId: getProductTemplate
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductTemplateResponse'
      x-gw-extensions:
        operationType: get-element
        resourceType: ProductTemplate
    delete:
      summary: Removes a product
      description: Removes a product
      operationId: removeProduct
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: Successful deletion
          content: {}
      x-gw-extensions:
        operationType: delete-element
        resourceType: ProductTemplate
  /product-templates/{productId}/codegen:
    post:
      summary: Generates the code from a visualize-mode product template
      description: Generates the code from a visualize-mode product template (Since
        1.1.0)
      operationId: generateProductCode
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
      - name: branchSuffix
        in: query
        description: 'Suffix must not contain punctuation, spaces or special characters.
          Examples: ~^:?|* (Since 1.3.0)'
        schema:
          type: string
          x-gw-sinceVersion: 1.3.0
        x-gw-sinceVersion: 1.3.0
      - name: generationMode
        in: query
        description: |
          Generation mode. Possible values are:
            * ALL
            * BASE_CODE
            * API_CODE
            * EXTERNAL
          Defaults to ALL.
        schema:
          type: string
          default: ALL
          enum:
          - ALL
          - BASE_CODE
          - API_CODE
          - EXTERNAL
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductTemplateResponse'
      x-gw-sinceVersion: 1.1.0
      x-gw-extensions:
        operationType: custom-action
        resourceType: ProductTemplate
  /product-templates/{productId}/disable:
    post:
      summary: Disables a visualize-mode product template
      description: Disables a visualize-mode product template
      operationId: disableProductTemplate
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductTemplateResponse'
      x-gw-extensions:
        operationType: custom-action
        resourceType: ProductTemplate
  /product-templates/{productId}/enable:
    post:
      summary: Enables a visualize-mode product template
      description: Enables a visualize-mode product template
      operationId: enableProductTemplate
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductTemplateResponse'
      x-gw-extensions:
        operationType: custom-action
        resourceType: ProductTemplate
  /products:
    get:
      summary: Returns a list of all Products available in the system
      description: Returns a list of all Products available in the system
      operationId: getProducts
      parameters:
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPatternList'
      x-gw-extensions:
        childResourceType: ProductPattern
        operationType: get-collection
        resourceType: ProductPatterns
  /products/{productId}:
    get:
      summary: Returns details of a single Product
      description: Returns details of a single Product
      operationId: getProduct
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPatternResponse'
      x-gw-extensions:
        operationType: get-element
        resourceType: ProductPattern
  /products/{productId}/lines:
    get:
      summary: Return the policy lines for the given product
      description: Return the policy lines for the given product
      operationId: getProductPolicyLines
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLinePatternList'
      x-gw-extensions:
        childResourceType: PolicyLinePattern
        operationType: get-collection
        resourceType: PolicyLinePatterns
  /products/{productId}/questions:
    get:
      summary: Return the product-level questions
      description: Return the product-level questions
      operationId: getProductQuestions
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionPatternList'
      x-gw-extensions:
        childResourceType: QuestionPattern
        operationType: get-collection
        resourceType: ProductPatternQuestions
  /reference-data/bop-class-codes:
    get:
      summary: Look up BOP class codes
      description: Look up BOP class codes
      operationId: getBopClassCodes
      parameters:
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BopClassCodeList'
      x-gw-extensions:
        childResourceType: BopClassCode
        operationType: get-collection
        resourceType: BopClassCodes
  /reference-data/cost-codes:
    get:
      summary: Look up cost code definitions
      description: Look up cost code definitions
      operationId: getCostCodes
      parameters:
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostCodeList'
      x-gw-extensions:
        childResourceType: CostCode
        operationType: get-collection
        resourceType: CostCodes
  /reference-data/industry-codes:
    get:
      summary: Look up industry codes
      description: Look up industry codes
      operationId: getIndustryCodes
      parameters:
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndustryCodeList'
      x-gw-extensions:
        childResourceType: IndustryCode
        operationType: get-collection
        resourceType: IndustryCodes
  /reference-data/risk-classes:
    get:
      summary: Look up risk classes
      description: Look up risk classes
      operationId: getRiskClasses
      parameters:
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskClassList'
      x-gw-extensions:
        childResourceType: RiskClass
        operationType: get-collection
        resourceType: RiskClasses
  /reference-data/tax-locations:
    get:
      summary: Look up tax locations
      description: Look up tax locations
      operationId: getTaxLocations
      parameters:
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxLocationList'
      x-gw-extensions:
        childResourceType: TaxLocation
        operationType: get-collection
        resourceType: TaxLocations
  /reference-data/uw-issue-types:
    get:
      summary: Look up uw issue types
      description: Look up uw issue types (Since 1.2.0)
      operationId: getUWIssueTypes
      parameters:
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UWIssueTypeList'
      x-gw-sinceVersion: 1.2.0
      x-gw-extensions:
        childResourceType: UWIssueType
        operationType: get-collection
        resourceType: UWIssueTypes
  /reference-data/wc-class-codes:
    get:
      summary: Look up WC class codes
      description: Look up WC class codes
      operationId: getWCClassCodes
      parameters:
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WCClassCodeList'
      x-gw-extensions:
        childResourceType: WCClassCode
        operationType: get-collection
        resourceType: WCClassCodes
  /reference-data/wc-fed-liab-class-codes:
    get:
      summary: Look up WC fed liab class codes
      description: Look up WC fed liab class codes
      operationId: getWCFedLiabClassCodes
      parameters:
      - name: fields
        in: query
        description: Allows the caller to specify the set of fields that should be
          included on the response. This can be used to limit the set of fields returned
          as well as to include optional fields that otherwise wouldn't normally be
          returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
          list>`, where `<field list>` consists of a comma-separated list of field
          or field set names. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: filter
        in: query
        description: Filters the list of results based on the specified field, operator,
          and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
          or `filter=<include>:<field>:<operator>:<value>`. See the documentation
          for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: include
        in: query
        description: Used to request that additional resources be returned with the
          API response in the `included` section of the responses. The `include` parameter
          can appear multiple times, and is a comma-separated list of additional resources
          to include. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: includeTotal
        in: query
        description: Used to request that results should include a count of the total
          number of results available, which may be more than the total number of
          results currently being returned. This parameter is of the form `includeTotal=<true|false>`
          or `includeTotal=<include>:<true|false>`. If not specified, the default
          is considered to be `false`. See the documentation for more information
          about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageSize
        in: query
        description: The maximum number of results to return in the response. The
          parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`.
          The maximum allowed `pageSize` and the default `pageSize` both depend on
          the specific API endpoint the request is made to. See the documentation
          for more information about response pagination.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: pageOffset
        in: query
        description: The offset of the first result to fetch when fetching a paginated
          set of results. The parameter is of the form `pageOffset=<number>` where
          the first result has an offset of 0. For example, `pageOffset=25` will skip
          the first 25 results in sorted order. If not specified, the default value
          is 0. See the documentation for more information about response pagination.
        schema:
          type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      - name: sort
        in: query
        description: Controls the sorting of elements within a response. The sort
          parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where
          `<fields>` represents a comma-separated list of field names to sort on.
          Field names can be prefixed with `-` to request a descending sort, otherwise
          the sort will be ascending. See the documentation for more information.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          x-gw-extensions:
            allowForCompositeApi: true
        x-gw-extensions:
          allowForCompositeApi: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WCFedLiabClassCodeList'
      x-gw-extensions:
        childResourceType: WCFedLiabClassCode
        operationType: get-collection
        resourceType: WCFedLiabClassCodes
  /swagger.json:
    get:
      summary: Returns the Swagger schema for this API
      description: Returns a Swagger 2.0 schema for this API as json
      operationId: generateDocs
      responses:
        200:
          description: Successful operation
          content: {}
      x-gw-authenticated: false
components:
  schemas:
    ActivatedEditionsData:
      required:
      - attributes
      type: object
      properties:
        attributes:
          $ref: '#/components/schemas/ActivatedEditions'
    ActivatedEditionsListResponse:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ActivatedEditionsData'
    BopClassCodeData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/BopClassCode'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    BopClassCodeList:
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
        data:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BopClassCodeData'
        included:
          $ref: '#/components/schemas/ReferenceDataInclusions'
    CostCodeData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/CostCode'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    CostCodeList:
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
        data:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/CostCodeData'
        included:
          $ref: '#/components/schemas/ReferenceDataInclusions'
    CoverablePatternData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/CoverablePattern'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    CoverablePatternList:
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
        data:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/CoverablePatternData'
        included:
          $ref: '#/components/schemas/ProductDefinitionInclusions'
    CoverablePatternResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CoverablePatternData'
        included:
          $ref: '#/components/schemas/ProductDefinitionInclusions'
    CoveragePatternData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/CoveragePattern'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    CoveragePatternList:
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
        data:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/CoveragePatternData'
        included:
          $ref: '#/components/schemas/ProductDefinitionInclusions'
    DataEnvelope:
      title: Data envelope
      type: object
      properties:
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        links:
          $ref: '#/components/schemas/Links'
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        related:
          $ref: '#/components/schemas/RelatedCollections'
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
      description: Data envelope for requests and responses for individual elements.
        The primary data for the element will be in the `attributes` field.
    DataListEnvelope:
      title: Data list envelope
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
      description: Data envelope for responses for lists of elements. The primary
        list of elements will be in the `data` field.
    ExposurePatternData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/ExposurePattern'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    ExposurePatternList:
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
        data:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ExposurePatternData'
        included:
          $ref: '#/components/schemas/ProductDefinitionInclusions'
    ExposurePatternResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ExposurePatternData'
        included:
          $ref: '#/components/schemas/ProductDefinitionInclusions'
    ImportEditionResponse:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ImportEditionResponseData'
    ImportEditionResponseData:
      required:
      - attributes
      type: object
      properties:
        attributes:
          $ref: '#/components/schemas/ImportEdition'
    ImportTemplateResponse:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ImportTemplateResponseData'
    ImportTemplateResponseData:
      required:
      - attributes
      type: object
      properties:
        attributes:
          $ref: '#/components/schemas/ImportTemplate'
    IndustryCodeData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/IndustryCode'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    IndustryCodeList:
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
        data:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/IndustryCodeData'
        included:
          $ref: '#/components/schemas/ReferenceDataInclusions'
    PolicyLinePatternData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/PolicyLinePattern'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    PolicyLinePatternList:
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
        data:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/PolicyLinePatternData'
        included:
          $ref: '#/components/schemas/ProductDefinitionInclusions'
    PolicyLinePatternResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PolicyLinePatternData'
        included:
          $ref: '#/components/schemas/ProductDefinitionInclusions'
    PolicyLineQuestionsData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/PolicyLinePatternQuestions'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    PolicyLineQuestionsResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PolicyLineQuestionsData'
    ProductDefinitionInclusions:
      type: object
      properties:
        CoverablePattern:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/CoverablePatternData'
        CoveragePattern:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/CoveragePatternData'
        ExposurePattern:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ExposurePatternData'
        PolicyLinePattern:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/PolicyLinePatternData'
        QuestionPattern:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/QuestionPatternData'
    ProductPatternData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/ProductPattern'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    ProductPatternList:
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
        data:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ProductPatternData'
        included:
          $ref: '#/components/schemas/ProductDefinitionInclusions'
    ProductPatternResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ProductPatternData'
        included:
          $ref: '#/components/schemas/ProductDefinitionInclusions'
    ProductTemplateData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/ProductTemplate'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    ProductTemplateInclusions:
      type: object
      properties:
        ProductTemplate:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ProductTemplateData'
    ProductTemplateList:
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
        data:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ProductTemplateData'
        included:
          $ref: '#/components/schemas/ProductTemplateInclusions'
    ProductTemplateResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ProductTemplateData'
        included:
          $ref: '#/components/schemas/ProductTemplateInclusions'
    QuestionPatternData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/QuestionPattern'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    QuestionPatternList:
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
        data:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/QuestionPatternData'
        included:
          $ref: '#/components/schemas/ProductDefinitionInclusions'
    ReferenceDataInclusions:
      type: object
    RiskClassData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/RiskClass'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    RiskClassList:
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
        data:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/RiskClassData'
        included:
          $ref: '#/components/schemas/ReferenceDataInclusions'
    TaxLocationData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/TaxLocation'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    TaxLocationList:
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
        data:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/TaxLocationData'
        included:
          $ref: '#/components/schemas/ReferenceDataInclusions'
    UWIssueTypeData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/UWIssueType'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    UWIssueTypeList:
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
        data:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/UWIssueTypeData'
        included:
          $ref: '#/components/schemas/ReferenceDataInclusions'
    WCClassCodeData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/WCClassCode'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    WCClassCodeList:
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
        data:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/WCClassCodeData'
        included:
          $ref: '#/components/schemas/ReferenceDataInclusions'
    WCFedLiabClassCodeData:
      required:
      - attributes
      type: object
      properties:
        method:
          title: Method
          type: string
          description: The HTTP method that should be used for an included element.
            Only applicable to requests. See the documentation for more information
            about request inclusion.
          enum:
          - post
          - patch
        related:
          $ref: '#/components/schemas/RelatedCollections'
        checksum:
          title: Checksum
          type: string
          description: A checksum for the element that can be used to prevent lost
            updates by detecting that the element has been updated since the caller
            last retrieved it. See the documentation for more information about lost
            update prevention.
        attributes:
          $ref: '#/components/schemas/WCFedLiabClassCode'
        links:
          $ref: '#/components/schemas/Links'
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        refid:
          title: Reference ID
          type: string
          description: Used to assign a temporary identifier to an element created
            using request inclusion. Only applicable to requests. See the documentation
            for more information about request inclusion.
        type:
          title: Type
          type: string
          description: The type of this element
          readOnly: true
        uri:
          title: URI
          type: string
          description: The URI for an included element, representing the parent to
            create the element on if the `method` is `post` or the element to update
            if the `method` is `patch`. Only applicable to requests. See the documentation
            for more information about request inclusion.
    WCFedLiabClassCodeList:
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements currently being returned. This may be
            less than the total number of elements. Pagination links under the `links`
            property can be used to access additional pages of results, if any are
            available.
          readOnly: true
        links:
          $ref: '#/components/schemas/Links'
        total:
          title: Total
          type: integer
          description: The total number of elements available, which may be greater
            than the `count` of elements currently being returned. Only included in
            responses when the `includeTotal` query parameter is set to `true`. The
            maximum number of elements counted is 1000. If the response value is 1000,
            the actual count could be 1000 or greater.
          readOnly: true
        data:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/WCFedLiabClassCodeData'
        included:
          $ref: '#/components/schemas/ReferenceDataInclusions'
    BatchRequest:
      title: Batch request
      required:
      - requests
      type: object
      properties:
        requests:
          title: Requests
          type: array
          description: The array of subrequests
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BatchSubRequest'
      description: The body of a batch request
    BatchResponse:
      title: Batch response
      type: object
      properties:
        responses:
          title: Responses
          type: array
          description: The list of subresponses, appearing in the same order as the
            elements in the `requests` field of the request
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BatchSubResponse'
      description: The body of a response to a batch request. The `responses` field
        will have one element for every entry in the `requests` field on the request,
        and responses will appear in the same order.
    BatchSubRequest:
      title: Batch subrequest
      required:
      - method
      - path
      type: object
      properties:
        body:
          title: Body
          type: object
          properties: {}
          description: The body of the subrequest
        headers:
          title: Headers
          type: array
          description: Headers that will be included as part of the subrequest. Any
            headers defined using this field will override header values inherited
            from the main request. Any headers present on the main request that are
            not defined in this list will be inherited when the subrequest is made,
            with the exception of the `GW-Checksum` header.
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Header'
        method:
          title: Method
          type: string
          description: The HTTP method for the subrequest
          enum:
          - delete
          - head
          - get
          - options
          - patch
          - post
          - put
        onFail:
          title: On fail
          type: string
          description: Controls whether or not subsequent subrequests are processed
            if this subrequest fails. The default behavior is to continue processing
            subrequests. The `abort` option specifies that all subsequent subrequests
            will be skipped.
          enum:
          - abort
          - continue
        path:
          title: Path
          minLength: 1
          pattern: ^/[\S]*$
          type: string
          description: The path for the subrequest. This path is relative to the root
            of the API hosting the batch endpoint. For example, if the batch endpoint
            is `<servlet>/rest/common/v1/batch`, then a path of `/activities` will
            mean a request against `<servlet>/rest/common/v1/activities`. The path
            must start with `/` and cannot contain whitespace.
        query:
          title: Query
          type: string
          description: The query string to use for the subrequest
      description: An individual subrequest within a batch request
    BatchSubResponse:
      title: Batch subresponse
      type: object
      properties:
        body:
          title: Body
          type: object
          properties: {}
          description: The body of the subresponse
        code:
          title: Code
          type: integer
          description: The HTTP status code for the subresponse
        headers:
          title: Headers
          type: array
          description: The headers returned for the subresponse
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Header'
        skipped:
          title: Skipped
          type: boolean
          description: A `true` value indicates that the corresponding subrequest
            was not processed due to a prior failed request that specified the `onFail`
            field with the `abort` option
      description: A subresponse to a batch subrequest
    Header:
      title: Header
      required:
      - name
      - value
      type: object
      properties:
        name:
          title: Name
          type: string
          description: The header name
        value:
          title: Value
          type: string
          description: The header value
      description: An HTTP request or response header
    GenericRelation:
      title: Generic relation
      required:
      - id
      - type
      type: object
      properties:
        displayName:
          title: Display name
          type: string
          description: The formatted name of the referenced element
        id:
          title: ID
          type: string
          description: The unique identifier of the referenced element
        jsonPath:
          title: JSON path
          type: string
          description: The path to the referenced element within the overall JSON
            document
          readOnly: true
          x-gw-extensions:
            defaultViews:
            - none
        type:
          title: Type
          type: string
          description: The type of the referenced element
        uri:
          title: URI
          type: string
          description: The canonical URI for the referenced element
      description: A reference to a related element
      x-gw-extensions:
        resourceReference: true
    LinkObject:
      title: Linked object
      type: object
      properties:
        href:
          title: HREF
          type: string
          description: The URL of the link
        methods:
          title: Methods
          type: array
          description: An array of HTTP method names that can be used with the link
            URL
          xml:
            wrapped: true
          items:
            type: string
      description: A standard HTTP link
    Links:
      title: Links
      type: object
      additionalProperties:
        $ref: '#/components/schemas/LinkObject'
      description: A set of named links
    MetaObject:
      title: Meta object
      type: object
      properties:
        checksum:
          title: Checksum
          type: string
          description: The checksum of the element
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        links:
          $ref: '#/components/schemas/Links'
        refid:
          title: Reference ID
          type: string
          description: A unique identifier given to the newly created element in the
            context of the current request
        related:
          $ref: '#/components/schemas/RelatedCollections'
        type:
          title: Type
          type: string
          description: The type of element
      description: An element
    MonetaryAmount:
      title: Monetary amount
      required:
      - amount
      - currency
      type: object
      properties:
        amount:
          title: Amount
          type: string
          description: The decimal amount
          format: gw-bigdecimal
        currency:
          title: Currency
          type: string
          description: The currency for the amount
          x-gw-type: typekey.Currency
      description: A monetary amount that combines a decimal amount with a currency
    PhoneNumber:
      title: Phone number
      required:
      - countryCode
      - number
      type: object
      properties:
        countryCode:
          $ref: '#/components/schemas/TypeKeyReference'
        displayName:
          title: Display name
          type: string
          description: The phone number formatted in a standardized way
          readOnly: true
        extension:
          title: Extension
          type: string
          description: The extension for the phone number
          x-gw-nullable: true
        number:
          title: Number
          type: string
          description: The actual phone number, including area code, but excluding
            the country code and extension
      description: A phone number, with different components of the number broken
        out as separate fields
    RelatedCollection:
      title: Related collection
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements included in the `data` array
        data:
          title: Data
          type: array
          description: The list of references to the related elements
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/SimpleReference'
        total:
          title: Total
          type: integer
          description: The total number of elements in the related set of elements.
            Only present if the `includeTotal` query parameter is used to request
            that the total be calculated for an included collection.
      description: A set of element references that are related to the element in
        some way. Used to link elements with their relations when a request is made
        using the `include` query parameter.
    RelatedCollections:
      title: Related collections
      type: object
      additionalProperties:
        $ref: '#/components/schemas/RelatedCollection'
      description: A set of `RelatedCollection` elements that contain references to
        elements included using the `include` query parameter on a request
    SimpleReference:
      title: Simple reference
      type: object
      properties:
        displayName:
          title: Display name
          type: string
          description: The formatted name of the element
        id:
          title: ID
          type: string
          description: The unique identifier of the referenced element
        jsonPath:
          title: JSON path
          type: string
          description: The path to the referenced element within the overall JSON
            document (Since 1.2.0)
          readOnly: true
          x-gw-sinceVersion: 1.2.0
          x-gw-extensions:
            defaultViews:
            - none
        refid:
          title: Reference ID
          type: string
          description: A unique identifier given to the newly created element in the
            context of the current request
        type:
          title: Type
          type: string
          description: The type of the referenced element
        uri:
          title: URI
          type: string
          description: The canonical URI for the referenced element
      description: A reference to an element
      x-gw-extensions:
        resourceReference: true
    SpatialPoint:
      title: Spatial point
      required:
      - latitude
      - longitude
      type: object
      properties:
        latitude:
          title: Latitude
          type: string
          description: The latitude of the spatial point
          format: gw-bigdecimal
        longitude:
          title: Longitude
          type: string
          description: The longitude of the spatial point
          format: gw-bigdecimal
      description: An object that combines a latitude with a longitude (Since 1.2.0)
      x-gw-sinceVersion: 1.2.0
    TypeKeyReference:
      title: TypeKey reference
      required:
      - code
      type: object
      properties:
        code:
          title: Code
          type: string
          description: The `code` of the `TypeKey`
        name:
          title: Name
          type: string
          description: The `name` of the `TypeKey`
      description: A reference to a `TypeKey` element that defines an enumerated value
        from a `TypeList`
    ActivatedEditions:
      title: Activated editions
      required:
      - editions
      type: object
      properties:
        editions:
          title: Editions
          type: array
          description: A list of `Edition` elements that represent product editions
            that have been activated
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Edition'
      description: A list of `Edition` elements that represent product editions that
        have been activated (Since 1.1.0)
      x-gw-sinceVersion: 1.1.0
    BopClassCode:
      title: BOP class code
      type: object
      properties:
        basis:
          $ref: '#/components/schemas/ClassCodeBasis'
        bopLiabilityClassGroup:
          title: BOP liability class group
          maxLength: 2
          minLength: 1
          pattern: \S
          type: string
          description: The liability class group for this class code
        bopPropertyRateNumber:
          title: BOP property rate number
          maxLength: 2
          minLength: 1
          pattern: \S
          type: string
          description: A factor used in rating
        classIndicator:
          title: Class indicator
          maxLength: 255
          minLength: 1
          pattern: \S
          type: string
          description: The class indicator for this class code
        classification:
          title: Classification
          maxLength: 1333
          minLength: 1
          pattern: \S
          type: string
          description: A short description of this class code
        code:
          title: Code
          maxLength: 255
          minLength: 1
          pattern: \S
          type: string
          description: The standardized code assigned to this class code
        effectiveDate:
          title: Effective date
          type: string
          description: The start effective date and time for this `BOPClassCode`
          format: date-time
        expirationDate:
          title: Expiration date
          type: string
          description: The end effective date and time for this `BOPClassCode`
          format: date-time
        id:
          title: ID
          type: string
          description: The unique identifier of this element
      description: A classification code that applies to the business owners line
        of business
    ClassCodeBasis:
      title: Class code basis
      type: object
      properties:
        auditable:
          title: Auditable
          type: boolean
          description: A `true` value indicates that the basis for this class code
            is a variable number that can be subject to audits, such as payroll, rather
            than a fixed number, such as square footage
        code:
          title: Code
          maxLength: 255
          minLength: 1
          pattern: \S
          type: string
          description: The standardized code assigned to this class code basis
        description:
          title: Description
          maxLength: 1333
          minLength: 1
          pattern: \S
          type: string
          description: A description of this class code basis
        name:
          title: Name
          maxLength: 255
          minLength: 1
          pattern: \S
          type: string
          description: The name of this class code basis
        rateFactor:
          title: Rate factor
          type: string
          description: A rating factor for use with this class code basis
          format: gw-bigdecimal
      description: The measurement basis for a class code, such as hundreds of square
        feet or thousands of payroll
    ClauseHierarchy:
      title: Clause hierarchy
      type: object
      properties:
        childClause:
          title: Child clause ID
          type: string
          description: The `id` of the `CoveragePattern` that is the child in the
            relationship
        editionCode:
          title: Edition code
          type: string
          description: The `editionCode` of the `Edition` that this relationship applies
            to
        parentClause:
          title: Parent clause ID
          type: string
          description: The `id` of the `CoveragePattern` that is the parent in the
            relationship
      description: Used to represent a parent-child relationship between coverages,
        conditions, and exclusions (Since 1.2.0)
      x-gw-sinceVersion: 1.2.0
    CostCode:
      title: Cost code
      type: object
      properties:
        chargePattern:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        costCode:
          title: Cost code
          maxLength: 64
          minLength: 1
          pattern: \S
          type: string
          description: A code for this type of cost
        costName:
          title: Cost name
          maxLength: 255
          minLength: 1
          pattern: \S
          type: string
          description: The name of this type of cost
        description:
          title: Description
          maxLength: 255
          minLength: 1
          pattern: \S
          type: string
          description: A description for this type of cost
        overrideable:
          title: Overrideable
          type: boolean
          description: A `true` value indicates that `Cost` elements created using
            this `CostCode` will have the `overrideable` field set to `true` by default
        prorationMethod:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        rateAmountType:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
      description: A pattern for a type of cost
    CovTermChoice:
      title: Coverage term choice
      type: object
      properties:
        code:
          title: Code
          type: string
          description: The code assigned to this choice
        currency:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        description:
          title: Description
          type: string
          description: A description of this choice
        descriptionKey:
          title: Description key
          type: string
          description: The localization key that will be used to provide a localized
            description for this choice (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        packageTerms:
          title: Package terms
          type: array
          description: The list of `PackageTerm` elements that this choice is comprised
            of, if this choice represents a package value
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/PackageTerm'
        priority:
          title: Priority
          type: integer
          description: The priority of this choice relative to other choices on the
            same term. Used for presenting the choices in sorted order.
        refCode:
          title: Reference code
          type: string
          description: An additional reference code for this choice. Can be used to
            tag this choice with a code that is relevant in an external system.
        value:
          title: Value
          type: string
          description: The numeric value this choice represents, if it carries a single
            numeric value, such as a specific limit or deductible amount
          format: gw-bigdecimal
      description: An enumerated choice value for a coverage term
    CovTermDefault:
      title: Coverage term default
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        defaultValue:
          title: Default value
          type: string
          description: The default value
      description: The set of possible default values for a `CovTermPattern`. A different
        default value can be assigned for each configured currency.
    CovTermLimits:
      title: Coverage term limits
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        defaultValue:
          title: Default value
          type: string
          description: The default value
          format: gw-bigdecimal
        maxValue:
          title: Maximum value
          type: string
          description: The maximum allowed value, inclusive
          format: gw-bigdecimal
        minValue:
          title: Minimum value
          type: string
          description: The minimum allowed value, inclusive
          format: gw-bigdecimal
      description: The minimum, maximum, and default values for a numeric coverage
        term. A different set of limits can be assigned for each configured currency.
    CovTermPattern:
      title: Coverage term pattern
      type: object
      properties:
        aggregationModel:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        choices:
          title: Choices
          type: array
          description: The list of `CovTermChoice` elements that represent the enumerated
            choices for this term. Only applicable if `covTermType` is `choice`.
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/CovTermChoice'
        covTermType:
          title: Coverage term type
          type: string
          description: The type of term. This field affects the type of value that
            this term carries.
        defaults:
          title: Defaults
          type: array
          description: The list of `CovTermDefault` elements that represent the default
            values for this term. Only applicable if `covTermType` is `choice`.
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/CovTermDefault'
        description:
          title: Description
          type: string
          description: A description of this term
        descriptionKey:
          title: Description key
          type: string
          description: The localization key that will be used to provide a localized
            description for this term (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        id:
          title: ID
          type: string
          description: The unique identifier of this element
        limits:
          title: Limits
          type: array
          description: The list of `CovTermLimit` elements that represent minimum,
            maximum, and default values for this term. Only applicable if `covTermType`
            is `direct`.
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/CovTermLimits'
        modelType:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        name:
          title: Name
          type: string
          description: The name of the term
        nameKey:
          title: Name key
          type: string
          description: The localization key that will be used to provide a localized
            name for this term (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        priority:
          title: Priority
          type: integer
          description: The priority of this term relative to other terms on the same
            clause. Used for presenting terms in sorted order.
        refCode:
          title: Reference code
          type: string
          description: An additional reference code for this term. Can be used to
            tag this term with a code that is relevant in an external system.
        required:
          title: Required
          type: boolean
          description: A `true` value indicates that this term is required and must
            be given a value, otherwise the term is considered to be optional
        restrictionModel:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        rules:
          title: Rules
          type: array
          description: The list of `RuleSet` elements that represent rules attached
            to this term
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/RuleSet'
        typefilter:
          title: TypeFilter
          type: string
          description: The `name` of the `TypeFilter` to use to further filter the
            set of possible values from the `TypeList` specified in the `typelist`
            field. Only applicable if `covTermType` is `typekey`.
        typelist:
          title: TypeList
          type: string
          description: The name of the `TypeList` to use as the list of possible values
            for this term. Only applicable if `covTermType` is `typekey`.
        valueType:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
      description: A pattern for a specific term on a coverage, condition, or exclusion
    CoverablePattern:
      title: Coverable pattern
      type: object
      properties:
        clauseAvailabilityRules:
          title: Clause availability rules
          type: array
          description: A list of `RuleSet` elements that represent rules related to
            which coverages, conditions, and exclusions are available for this risk
            (Since 1.1.0)
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/RuleSet'
          x-gw-sinceVersion: 1.1.0
        clauseParentRelationships:
          title: Clause parent relationships
          type: array
          description: A list of `ClauseHierarchy` elements that represent parent-child
            relationships between coverages, conditions, and exclusions on this risk
            (Since 1.2.0)
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ClauseHierarchy'
          x-gw-sinceVersion: 1.2.0
        coverageAvailabilityRules:
          title: Coverage availability rules
          type: array
          description: A list of `RuleSet` elements that represent rules related to
            which coverages are available for this risk
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/RuleSet'
        directChildren:
          title: Direct children
          type: array
          description: A list of the `id` values of `CoverablePattern` elements that
            are direct children of this `CoverablePattern`
          xml:
            wrapped: true
          items:
            type: string
        exposures:
          title: Exposures
          type: array
          description: A list of the `id` values of `ExposurePattern` elements that
            are children of this `CoverablePattern`
          xml:
            wrapped: true
          items:
            type: string
        fieldAvailabilityRules:
          title: Field availability rules
          type: array
          description: A list of `RuleSet` elements that represent rules related to
            fields on this risk
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/RuleSet'
        fields:
          title: Fields
          type: array
          description: A list of `MetadataField` elements that represent fields on
            this risk
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/MetadataField'
        id:
          title: ID
          type: string
          description: The unique identifier of this element
        parent:
          title: Parent
          type: string
          description: The `id` of the `CoverablePattern` that is the parent of this
            `CoverablePattern`
      description: A pattern for a covered risk on a policy
    CoverageCategory:
      title: Coverage category
      type: object
      properties:
        description:
          title: Description
          type: string
          description: The description of the category
        descriptionKey:
          title: Description key
          type: string
          description: The localization key that will be used to provide a localized
            description for this category (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        id:
          title: ID
          type: string
          description: The unique identifier of this element
        name:
          title: Name
          type: string
          description: The name of the category
        nameKey:
          title: Name key
          type: string
          description: The localization key that will be used to provide a localized
            name for this category (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        priority:
          title: Priority
          type: integer
          description: The relative priority of this category. Used to present the
            categories in sorted order.
        refCode:
          title: Reference code
          type: string
          description: An additional reference code for this category. Can be used
            to tag this category with a code that is relevant in an external system.
      description: A category used to group coverages, conditions, or exclusions
    CoveragePattern:
      title: Coverage pattern
      type: object
      properties:
        clauseType:
          title: Clause type
          type: string
          description: The type of clause, either `coverage`, `condition`, or `exclusion`
        covTerms:
          title: Coverage terms
          type: array
          description: The list of `CovTermPattern` elements that define the terms
            available on this clause
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/CovTermPattern'
        coverageCategory:
          $ref: '#/components/schemas/CoverageCategory'
        description:
          title: Description
          type: string
          description: A description of this clause
        descriptionKey:
          title: Description key
          type: string
          description: The localization key that will be used to provide a localized
            description for this clause (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        id:
          title: ID
          type: string
          description: The unique identifier of this element
        name:
          title: Name
          type: string
          description: The name of this clause
        nameKey:
          title: Name key
          type: string
          description: The localization key that will be used to provide a localized
            name for this clause (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        priority:
          title: Priority
          type: integer
          description: The priority of this clause relative to the risk that it applies
            to. Used to present the clauses in sorted order.
        refCode:
          title: Reference code
          type: string
          description: An additional reference code for this clause. Can be used to
            tag this clause with a code that is relevant in an external system.
        scheduledItemProperties:
          title: Scheduled item properties
          type: array
          description: A list of `ScheduledItemProperty` elements that define the
            properties for scheduled items on this clause, if this clause supports
            scheduled items
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ScheduledItemProperty'
        termAvailabilityRules:
          title: Term availability rules
          type: array
          description: The list of `RuleSet` elements that represent rules regarding
            term availability on this clause
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/RuleSet'
      description: A pattern for a coverage, condition, or exclusion on a policy
    Edition:
      title: Edition
      type: object
      properties:
        editionCode:
          title: Edition code
          type: string
          description: The name or code given to the edition
        effectiveDate:
          title: Effective date
          type: string
          description: The date and time this edition becomes available
          format: date-time
      description: An effective-dated version of a particular policy line (Since 1.1.0)
      x-gw-sinceVersion: 1.1.0
    ExposurePattern:
      title: Exposure pattern
      type: object
      properties:
        coverable:
          title: Coverable
          type: string
          description: The name of the type of coverable that is this exposure's parent
        fieldAvailabilityRules:
          title: Field availability rules
          type: array
          description: A list of `RuleSet` elements that represent rules related to
            fields on this exposure
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/RuleSet'
        fields:
          title: Fields
          type: array
          description: A list of `MetadataField` elements that represent fields on
            this exposure
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/MetadataField'
        id:
          title: ID
          type: string
          description: The unique identifier of this element
      description: A pattern for a specific exposure on a covered risk
    productdefinition_GenericRelation:
      title: Generic relation
      required:
      - id
      - type
      type: object
      properties:
        displayName:
          title: Display name
          type: string
          description: The formatted name of the referenced element
        id:
          title: ID
          type: string
          description: The unique identifier of the referenced element
        jsonPath:
          title: JSON path
          type: string
          description: The path to the referenced element within the overall JSON
            document
          readOnly: true
          x-gw-extensions:
            defaultViews:
            - none
        type:
          title: Type
          type: string
          description: The type of the referenced element
        uri:
          title: URI
          type: string
          description: The canonical URI for the referenced element
      description: A reference to a related element
      xml:
        name: GenericRelation
      x-gw-extensions:
        resourceReference: true
    ImportEdition:
      title: Import edition
      required:
      - editions
      type: object
      properties:
        editions:
          title: Editions
          type: array
          description: The list of `Edition` elements
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Edition'
        invalidRules:
          title: Invalid rules
          type: array
          description: A list of error messages related to any `RuleSet` elements
            with errors in the newly imported product edition
          xml:
            wrapped: true
          items:
            type: string
      description: Details of a newly imported product edition (Since 1.1.0)
      x-gw-sinceVersion: 1.1.0
    ImportTemplate:
      title: Import template
      required:
      - id
      type: object
      properties:
        id:
          title: ID
          maxLength: 64
          minLength: 1
          pattern: \S
          type: string
          description: The unique identifier of this element
      description: Details of a newly imported product template
    IndustryCode:
      title: Industry code
      type: object
      properties:
        classification:
          title: Classification
          maxLength: 1333
          minLength: 1
          pattern: \S
          type: string
          description: A short description of the industry code
        code:
          title: Code
          maxLength: 255
          minLength: 1
          pattern: \S
          type: string
          description: The standardized code
        domain:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        effectiveDate:
          title: Effective date
          type: string
          description: The start effective date and time for this `IndustryCode`
          format: date-time
        expirationDate:
          title: Expiration date
          type: string
          description: The end effective date and time for this `IndustryCode`
          format: date-time
        id:
          title: ID
          type: string
          description: The unique identifier of this element
      description: A standardized code describing a particular kind of industry or
        business operation
    productdefinition_LinkObject:
      title: Linked object
      type: object
      properties:
        href:
          title: HREF
          type: string
          description: The URL of the link
        methods:
          title: Methods
          type: array
          description: An array of HTTP method names that can be used with the link
            URL
          xml:
            wrapped: true
          items:
            type: string
      description: A standard HTTP link
      xml:
        name: LinkObject
    productdefinition_Links:
      title: Links
      type: object
      additionalProperties:
        $ref: '#/components/schemas/productdefinition_LinkObject'
      description: A set of named links
      xml:
        name: Links
    productdefinition_MetaObject:
      title: Meta object
      type: object
      properties:
        checksum:
          title: Checksum
          type: string
          description: The checksum of the element
        id:
          title: ID
          type: string
          description: The unique identifier of the element
        links:
          $ref: '#/components/schemas/productdefinition_Links'
        refid:
          title: Reference ID
          type: string
          description: A unique identifier given to the newly created element in the
            context of the current request
        related:
          $ref: '#/components/schemas/productdefinition_RelatedCollections'
        type:
          title: Type
          type: string
          description: The type of element
      description: An element
      xml:
        name: MetaObject
    MetadataField:
      title: Metadata field
      type: object
      properties:
        description:
          title: Description
          type: string
          description: A description of the field (Since 1.2.0)
          x-gw-sinceVersion: 1.2.0
        fieldProperties:
          $ref: '#/components/schemas/MetadataFieldPropertyMap'
        label:
          title: Label
          type: string
          description: A default label to use for the field in user interfaces (Since
            1.2.0)
          x-gw-sinceVersion: 1.2.0
        labelKey:
          title: Label key
          type: string
          description: The localization key that will be used to provide a localized
            label for this field (Since 1.2.0)
          x-gw-sinceVersion: 1.2.0
        name:
          title: Name
          type: string
          description: The name of the field
        referenceTable:
          title: Reference table
          type: string
          description: The name of the reference table used to select values for this
            field. Only applicable if `type` is `referenceTableEntry`.
        referencedType:
          title: Referenced type
          type: string
          description: The name of the type of element this field is a reference to.
            Only applicable if `type` is `reference` or `array`.
        rules:
          title: Rules
          type: array
          description: The list of `RuleSet` elements that represent rules related
            to this field
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/RuleSet'
        type:
          title: Type
          type: string
          description: The type of this field
        typelist:
          title: TypeList
          type: string
          description: The name of the `TypeList` that enumerates the possible values
            for this field. Only applicable if `type` is `typekey`.
      description: Metadata regarding a field on a policy line, covered risk, or exposure
    MetadataFieldProperty:
      title: Metadata field property
      type: object
      properties:
        type:
          title: Type
          type: string
          description: The type of property
        value:
          title: Value
          type: string
          description: The value of the property
      description: Additional properties of a metadata field
    MetadataFieldPropertyMap:
      title: Metadata field properties
      type: object
      additionalProperties:
        $ref: '#/components/schemas/MetadataFieldProperty'
      description: Additional metadata properties for a field
    productdefinition_MonetaryAmount:
      title: Monetary amount
      required:
      - amount
      - currency
      type: object
      properties:
        amount:
          title: Amount
          type: string
          description: The decimal amount
          format: gw-bigdecimal
        currency:
          title: Currency
          type: string
          description: The currency for the amount
          x-gw-type: typekey.Currency
      description: A monetary amount that combines a decimal amount with a currency
      xml:
        name: MonetaryAmount
    PackageTerm:
      title: Package term
      type: object
      properties:
        aggregationModel:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        id:
          title: ID
          type: string
          description: The unique identifier of this element (Since 1.5.0)
          x-gw-sinceVersion: 1.5.0
          x-gw-extensions:
            defaultViews:
            - none
        name:
          title: Name
          type: string
          description: The name of the package term
        nameKey:
          title: Name key
          type: string
          description: The localization key that will be used to provide a localized
            name for this package term (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        restrictionModel:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        value:
          title: Value
          type: string
          description: The numeric value of this package term
          format: gw-bigdecimal
        valueType:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
      description: An individual term within a package choice for a coverage term
    productdefinition_PhoneNumber:
      title: Phone number
      required:
      - countryCode
      - number
      type: object
      properties:
        countryCode:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        displayName:
          title: Display name
          type: string
          description: The phone number formatted in a standardized way
          readOnly: true
        extension:
          title: Extension
          type: string
          description: The extension for the phone number
          x-gw-nullable: true
        number:
          title: Number
          type: string
          description: The actual phone number, including area code, but excluding
            the country code and extension
      description: A phone number, with different components of the number broken
        out as separate fields
      xml:
        name: PhoneNumber
    PolicyLinePattern:
      title: Policy line pattern
      type: object
      properties:
        availableCoverageCurrencies:
          title: Available coverage currencies
          type: array
          description: The list of currencies that can be used to define the coverages
            on this line
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        clauseAvailabilityRules:
          title: Clause availability rules
          type: array
          description: A list of `RuleSet` elements that represent rules related to
            which coverages, conditions, and exclusions are available as direct children
            of this line (Since 1.1.0)
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/RuleSet'
          x-gw-sinceVersion: 1.1.0
        clauseParentRelationships:
          title: Clause parent relationships
          type: array
          description: A list of `ClauseHierarchy` elements that represent parent-child
            relationships between coverages, conditions, and exclusions that are direct
            children of this line (Since 1.2.0)
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ClauseHierarchy'
          x-gw-sinceVersion: 1.2.0
        coverageAvailabilityRules:
          title: Coverage availability rules
          type: array
          description: A list of `RuleSet` elements that represent rules related to
            which coverages are available as direct children of this line
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/RuleSet'
        coverageCategories:
          title: Coverage categories
          type: array
          description: A list of `CoverageCategory` elements that represent the coverage
            categories for this line
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/CoverageCategory'
        description:
          title: Description
          type: string
          description: A description of the line
        descriptionKey:
          title: Description key
          type: string
          description: The localization key that will be used to provide a localized
            description for this line (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        editions:
          title: Editions
          type: array
          description: A list of `Edition` elements that represent different versions
            of this line (Since 1.1.0)
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Edition'
          x-gw-sinceVersion: 1.1.0
        fieldAvailabilityRules:
          title: Field availability rules
          type: array
          description: A list of `RuleSet` elements that represent rules related to
            fields on this line
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/RuleSet'
        fields:
          title: Fields
          type: array
          description: A list of `MetadataField` elements that represent fields on
            this line
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/MetadataField'
        id:
          title: ID
          type: string
          description: The unique identifier of this element
        name:
          title: Name
          type: string
          description: The name of this line
        nameKey:
          title: Name key
          type: string
          description: The localization key that will be used to provide a localized
            name for this line (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        priority:
          title: Priority
          type: integer
          description: The priority of this line, relative to other lines on the same
            product. Used to present the lines in sorted order.
        refCode:
          title: Reference code
          type: string
          description: An additional reference code for this line. Can be used to
            tag this line with a code that is relevant in an external system.
      description: Defines the structure of a specific line of business
    PolicyLinePatternQuestion:
      title: Product policy line pattern questions
      type: object
      properties:
        questions:
          title: Questions
          type: array
          description: The list of `QuestionPattern` elements that represent questions
            applicable to this line and product
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/QuestionPattern'
      description: The list of questions for a specific policy line and product combination
    PolicyLinePatternQuestions:
      title: Policy line pattern questions
      type: object
      properties:
        products:
          $ref: '#/components/schemas/PolicyLinePatternQuestionsMap'
      description: The list of questions for a policy line, for each product that
        includes this line
    PolicyLinePatternQuestionsMap:
      title: Policy line pattern questions
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PolicyLinePatternQuestion'
      description: The set of questions for a policy line, for each product that includes
        this line
    ProductPattern:
      title: Product pattern
      type: object
      properties:
        abbreviation:
          title: Abbreviation
          type: string
          description: The abbreviation used for this product
        availableTermTypes:
          title: Available term types
          type: array
          description: The list of policy term lengths that are available for this
            product
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        defaultTermType:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        description:
          title: Description
          type: string
          description: A description of this product
        descriptionKey:
          title: Description key
          type: string
          description: The localization key that will be used to provide a localized
            description for this product (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        id:
          title: ID
          type: string
          description: The unique identifier of this element
        name:
          title: Name
          type: string
          description: The name of this product
        nameKey:
          title: Name key
          type: string
          description: The localization key that will be used to provide a localized
            name for this product (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        priority:
          title: Priority
          type: integer
          description: The priority of this product, relative to other products. Used
            to present products in sorted order.
        productAccountType:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        productType:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        refCode:
          title: Reference code
          type: string
          description: An additional reference code for this product. Can be used
            to tag this product with a code that is relevant in an external system.
        visualized:
          title: Visualized
          type: boolean
          description: A `true` value indicates that this is a visualized product
            that has not yet been installed into the system
      description: Defines the structure of an insurance product
    ProductTemplate:
      title: Product template
      type: object
      properties:
        abbreviation:
          title: Abbreviation
          maxLength: 3
          minLength: 1
          pattern: \S
          type: string
          description: The abbreviation for the product
        codeIdentifier:
          title: Code identifier
          maxLength: 64
          minLength: 1
          pattern: \S
          type: string
          description: The `id` of the `ProductPattern` produced by this template
          x-gw-extensions:
            filterable: true
            sortable: true
        description:
          title: Description
          maxLength: 255
          minLength: 1
          pattern: \S
          type: string
          description: A description of the product
        enabled:
          title: Enabled
          type: boolean
          description: A `true` value for this field indicates that this product template
            has been enabled for use with the REST APIs. If this product has also
            been installed, the APIs will reflect the visualized version of this product
            rather than the installed version.
        id:
          title: ID
          type: string
          description: The unique identifier of this element
        name:
          title: Name
          maxLength: 255
          minLength: 1
          pattern: \S
          type: string
          description: The name of the product
        productAccountType:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        productCode:
          title: Product code
          maxLength: 64
          minLength: 1
          pattern: \S
          type: string
          description: The product code
      description: A `ProductTemplate` is a template for a product created using APD
    QuestionChoice:
      title: Question choice
      type: object
      properties:
        code:
          title: Code
          type: string
          description: The code that identifies the choice
        description:
          title: Description
          type: string
          description: A description of the choice
        descriptionKey:
          title: Description key
          type: string
          description: The localization key that will be used to provide a localized
            description for this choice (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        name:
          title: Name
          type: string
          description: The name of the choice
        nameKey:
          title: Name key
          type: string
          description: The localization key that will be used to provide a localized
            name for this choice (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        priority:
          title: Priority
          type: integer
          description: The priority of the choice, relative to other choices for the
            same question. Used to present the choices in sorted order.
      description: An enumerated choice value for a question answer
    QuestionFilter:
      title: Question filter
      type: object
      properties:
        answer:
          title: Answer
          type: string
          description: The answer to the containing question that will make the `filterQuestion`
            available
        filterQuestion:
          $ref: '#/components/schemas/productdefinition_SimpleReference'
      description: A conditional filter used to make the availability of one question
        dependent upon the answer to another question
    QuestionPattern:
      title: Question pattern
      type: object
      properties:
        choices:
          title: Choices
          type: array
          description: The list of `QuestionChoice` elements that represent the enumerated
            choices for this question. Only applicable if `questionType` is `Choice`.
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/QuestionChoice'
        defaultAnswer:
          title: Default answer
          type: string
          description: The default answer for this question
        filters:
          title: Filters
          type: array
          description: The list of `QuestionFilter` elements that define other questions
            whose availability is contingent on the answer to this question
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/QuestionFilter'
        id:
          title: ID
          type: string
          description: The unique identifier of this element
        indent:
          title: Indent
          type: integer
          description: The indentation level for this question. Used to indicate that
            some questions might be sub-questions of other questions and should be
            displayed in a way that makes that relationship clear.
        priority:
          title: Priority
          type: integer
          description: The priority of this question relative to other questions on
            the same container. Used to display questions in sorted order.
        questionFormat:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        questionSet:
          $ref: '#/components/schemas/QuestionSetPattern'
        questionSetType:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        questionType:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        required:
          title: Required
          type: boolean
          description: A `true` value indicates that answering this question is required
        supplementalTexts:
          title: Supplemental texts
          type: array
          description: A list of `QuestionSupplementalText` elements that contain
            additional text that should be displayed to the user
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/QuestionSupplementalText'
        text:
          title: Text
          type: string
          description: The text of the question to present to the user
      description: Defines a question that applies to a product, line, or other part
        of the policy
    QuestionSetPattern:
      title: Question set pattern
      type: object
      properties:
        id:
          title: ID
          type: string
          description: The unique identifier of this element
        name:
          title: Name
          type: string
          description: The name of this question set
        nameKey:
          title: Name key
          type: string
          description: The localization key that will be used to provide a localized
            name for this question set (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        priority:
          title: Priority
          type: integer
          description: The priority of this question set, relative to other question
            sets on the same container. Used to present sets of questions in sorted
            order.
      description: A container for a set of `QuestionPattern` elements
    QuestionSupplementalText:
      title: Question supplemental text
      type: object
      properties:
        priority:
          title: Priority
          type: integer
          description: The priority of this supplemental text, relative to other supplemental
            texts on the same question. Used to present the text in sorted order.
        text:
          title: Text
          type: string
          description: The supplemental text to display to the user
      description: Additional text that should be displayed to a user to help them
        understand how to answer a question
    productdefinition_RelatedCollection:
      title: Related collection
      type: object
      properties:
        count:
          title: Count
          type: integer
          description: The number of elements included in the `data` array
        data:
          title: Data
          type: array
          description: The list of references to the related elements
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/productdefinition_SimpleReference'
        total:
          title: Total
          type: integer
          description: The total number of elements in the related set of elements.
            Only present if the `includeTotal` query parameter is used to request
            that the total be calculated for an included collection.
      description: A set of element references that are related to the element in
        some way. Used to link elements with their relations when a request is made
        using the `include` query parameter.
      xml:
        name: RelatedCollection
    productdefinition_RelatedCollections:
      title: Related collections
      type: object
      additionalProperties:
        $ref: '#/components/schemas/productdefinition_RelatedCollection'
      description: A set of `RelatedCollection` elements that contain references to
        elements included using the `include` query parameter on a request
      xml:
        name: RelatedCollections
    RiskClass:
      title: Risk class
      type: object
      properties:
        coveragePatternCode:
          title: Coverage pattern code
          maxLength: 64
          minLength: 1
          pattern: \S
          type: string
          description: The `id` of the `CoveragePattern` that the risk class can be
            used with
        description:
          title: Description
          maxLength: 255
          minLength: 1
          pattern: \S
          type: string
          description: A description of the risk class
        hazard:
          title: Hazard
          type: integer
          description: A numeric indicator of the level of hazard this risk class
            represents. Can be used during rating calculations.
        id:
          title: ID
          type: string
          description: The unique identifier of this element
        policyLinePatternCode:
          title: Policy line pattern code
          maxLength: 64
          minLength: 1
          pattern: \S
          type: string
          description: The `id` of the `PolicyLinePattern` that the risk class can
            be used with
      description: Classification codes used to identify a risk level for a specific
        coverage
    RuleSet:
      title: Rule set
      type: object
      properties:
        editionCode:
          title: Edition code
          type: string
          description: The `editionCode` of the `Edition` that this rule is defined
            in (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        jsonLogic:
          title: JsonLogic
          type: string
          description: The `JsonLogic` expression that corresponds to the conditional
            logic contained in this rule
        staticValue:
          title: Static value
          type: string
          description: The static value of this rule, if the rule does not have any
            conditions
      description: A set of rule conditions
    ScheduledItemProperty:
      title: Scheduled item property
      type: object
      properties:
        choices:
          title: Choices
          type: array
          description: The list of `CovTermChoice` elements that represent enumerated
            choices to use for the value of this property. Only applicable if `valueType`
            is `Choice`. (Since 1.1.0)
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/CovTermChoice'
          x-gw-sinceVersion: 1.1.0
        description:
          title: Description
          type: string
          description: A description of this property
        descriptionKey:
          title: Description key
          type: string
          description: The localization key that will be used to provide a localized
            description for this property (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        id:
          title: ID
          type: string
          description: The unique identifier of this element
        name:
          title: Name
          type: string
          description: The name of this property
        nameKey:
          title: Name key
          type: string
          description: The localization key that will be used to provide a localized
            name for this property (Since 1.1.0)
          x-gw-sinceVersion: 1.1.0
        priority:
          title: Priority
          type: integer
          description: The priority of this property relative to other scheduled item
            properties on the same clause. Used to present the properties in sorted
            order.
        valueType:
          title: Value type
          type: string
          description: The type of value for this property, such as `String` or `Decimal`
      description: Defines the metadata for a single property of a scheduled item
        on a coverage, condition, or exclusion
    productdefinition_SimpleReference:
      title: Simple reference
      type: object
      properties:
        displayName:
          title: Display name
          type: string
          description: The formatted name of the element
        id:
          title: ID
          type: string
          description: The unique identifier of the referenced element
        jsonPath:
          title: JSON path
          type: string
          description: The path to the referenced element within the overall JSON
            document (Since 1.2.0)
          readOnly: true
          x-gw-sinceVersion: 1.2.0
          x-gw-extensions:
            defaultViews:
            - none
        refid:
          title: Reference ID
          type: string
          description: A unique identifier given to the newly created element in the
            context of the current request
        type:
          title: Type
          type: string
          description: The type of the referenced element
        uri:
          title: URI
          type: string
          description: The canonical URI for the referenced element
      description: A reference to an element
      xml:
        name: SimpleReference
      x-gw-extensions:
        resourceReference: true
    productdefinition_SpatialPoint:
      title: Spatial point
      required:
      - latitude
      - longitude
      type: object
      properties:
        latitude:
          title: Latitude
          type: string
          description: The latitude of the spatial point
          format: gw-bigdecimal
        longitude:
          title: Longitude
          type: string
          description: The longitude of the spatial point
          format: gw-bigdecimal
      description: An object that combines a latitude with a longitude (Since 1.2.0)
      xml:
        name: SpatialPoint
      x-gw-sinceVersion: 1.2.0
    TaxLocation:
      title: Tax location
      type: object
      properties:
        city:
          title: City
          maxLength: 60
          minLength: 1
          pattern: \S
          type: string
          description: The city for this tax location
        code:
          title: Code
          maxLength: 10
          minLength: 1
          pattern: \S
          type: string
          description: A code assigned to this tax location
        county:
          title: County
          maxLength: 60
          minLength: 1
          pattern: \S
          type: string
          description: The county for this tax location
        description:
          title: Description
          maxLength: 255
          minLength: 1
          pattern: \S
          type: string
          description: A description of what area this tax location represents
        effectiveDate:
          title: Effective date
          type: string
          description: The start effective date and time for this `TaxLocation`
          format: date-time
        expirationDate:
          title: Expiration date
          type: string
          description: The end effective date and time for this `TaxLocation`
          format: date-time
        id:
          title: ID
          type: string
          description: The unique identifier of this element
        state:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        tlPrefix:
          title: Tax location prefix
          maxLength: 5
          minLength: 1
          pattern: \S
          type: string
          description: A prefix assigned to this tax location
      description: A specific city, county, state, or other jurisdiction that locations
        can be assigned to for tax purposes
    productdefinition_TypeKeyReference:
      title: TypeKey reference
      required:
      - code
      type: object
      properties:
        code:
          title: Code
          type: string
          description: The `code` of the `TypeKey`
        name:
          title: Name
          type: string
          description: The `name` of the `TypeKey`
      description: A reference to a `TypeKey` element that defines an enumerated value
        from a `TypeList`
      xml:
        name: TypeKeyReference
    UWIssueType:
      title: Underwriting issue type
      type: object
      properties:
        autoApprovable:
          title: Auto-approvable
          type: boolean
          description: A `true` value indicates that this type of issue will be automatically
            approved during appropriate lifecycle actions if the caller has sufficient
            authority. Issues that are not auto-approvable must be manually approved
            instead.
        blockingPoint:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        checkingSet:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        code:
          title: Code
          maxLength: 60
          minLength: 1
          pattern: \S
          type: string
          description: A short identifier of this issue type. Used to identify this
            issue type within rules.
        comparator:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        defaultApprovalBlockingPoint:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        defaultDurationType:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        defaultEditBeforeBind:
          title: Default edit before bind
          type: boolean
          description: The default value of the `canEditApprovalBeforeBind` field
            on issues
        defaultValueAssignmentType:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        defaultValueOffsetAmount:
          title: Default value offset amount
          type: string
          description: The offset amount to use when computing the default approval
            value from the issue's value. Only applicable if `defaultValueAssignmentType`
            is a type that requires a computation.
          format: gw-bigdecimal
        defaultValueOffsetCurrency:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
        description:
          title: Description
          maxLength: 1333
          minLength: 1
          pattern: \S
          type: string
          description: A description of this issue type
        name:
          title: Name
          maxLength: 255
          minLength: 1
          pattern: \S
          type: string
          description: The name of this issue type
        valueFormatterType:
          $ref: '#/components/schemas/productdefinition_TypeKeyReference'
      description: A specific type of underwriting issue that can be attached to the
        policy during underwriting evaluation (Since 1.2.0)
      x-gw-sinceVersion: 1.2.0
    WCClassCode:
      title: Workers' Comp classification code
      type: object
      properties:
        basis:
          $ref: '#/components/schemas/ClassCodeBasis'
        classIndicator:
          title: Class indicator
          maxLength: 255
          minLength: 1
          pattern: \S
          type: string
          description: The class indicator for this class code
        classification:
          title: Classification
          maxLength: 1333
          minLength: 1
          pattern: \S
          type: string
          description: A short description of this class code
        code:
          title: Code
          maxLength: 255
          minLength: 1
          pattern: \S
          type: string
          description: The standardized code assigned to this class code
        effectiveDate:
          title: Effective date
          type: string
          description: The start effective date and time for this `WCClassCode`
          format: date-time
        expirationDate:
          title: Expiration date
          type: string
          description: The end effective date and time for this `WCClassCode`
          format: date-time
        id:
          title: ID
          type: string
          description: The unique identifier of this element
        shortDesc:
          title: Short description
          maxLength: 40
          minLength: 1
          pattern: \S
          type: string
          description: A short description of this class code
        wcDomain:
          title: Domain
          maxLength: 255
          minLength: 1
          pattern: \S
          type: string
          description: The jurisdiction where this class code is applicable
      description: A classification code for use in Workers' Comp insurance products
    WCFedLiabClassCode:
      title: Workers' Comp federal liability class code
      type: object
      properties:
        id:
          title: ID
          type: string
          description: The unique identifier of this element
        mainClassCode:
          $ref: '#/components/schemas/WCClassCode'
        stateActClassCode:
          $ref: '#/components/schemas/WCClassCode'
        uslActClassCode:
          $ref: '#/components/schemas/WCClassCode'
      description: A mapping from one set of class codes to another
    ErrorCause:
      title: Error cause
      type: object
      properties:
        message:
          title: Message
          type: string
          description: The exception message
      description: Basic information of an unexpected server exception
    ErrorDetail:
      type: object
      properties:
        message:
          title: Message
          type: string
          description: A message associated with this specific error
        properties:
          title: Properties
          type: object
          properties: {}
          description: Properties of this specific error.  The specific properties
            will depend on the specific type of error.
    ErrorInfo:
      title: Error info
      type: object
      properties:
        cause:
          $ref: '#/components/schemas/ErrorCause'
        details:
          title: Details
          type: array
          description: Additional details of the error. For example, if this overall
            error response was caused by a schema validation failure, the error details
            might represent specific validation errors.
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ErrorDetail'
        developerMessage:
          title: Developer message
          type: string
          description: An error message that might be more technical than the `userMessage`
            and is more suitable for use by a developer who built the code that made
            the API call
        stackTrace:
          title: Stack trace
          type: string
          description: The stack trace associated with the error, if this error was
            caused by an internal server error.  Stack traces will not appear if the
            server is set to production mode.
        status:
          title: Status
          type: integer
          description: The HTTP status code associated with the error
        userMessage:
          title: User message
          type: string
          description: An error message suitable for displaying to an end user, such
            as someone using a UI that made the API call
      description: Generic schema that REST error responses follow
  responses:
    AuthenticationError:
      description: 401 error that is returned if the request's user cannot be authenticated
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorInfo'
    BadInput:
      description: 400 error that is returned if the input to this endpoint is not
        valid; this can happen because of missing required parameters, malformed json,
        json that does not validate against the declared schema, etc.
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorInfo'
    InternalServerError:
      description: 500 error that is returned if a server-side error prevented this
        request from being processed
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorInfo'
    NotAcceptable:
      description: 406 error that is returned if the Accept header provided by the
        client does not match any types produced by this endpoint
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorInfo'
    NotAuthorized:
      description: 403 error that is returned if the authenticated user is not authorized
        to access a given resource
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorInfo'
    NotFound:
      description: 404 error that is returned if the specified resource does not exist
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorInfo'
    OperationNotSupported:
      description: 405 error that is returned if the specified HTTP verb is not allowed
        on a given resource
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorInfo'
    ServiceUnavailable:
      description: 503 error that is returned if the server's runlevel is not adequate
        to service this request
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorInfo'
    UnsupportedContentType:
      description: 415 error that is returned if the Content-Type of the request is
        not consumable by this endpoint
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorInfo'
  parameters:
    coverableId:
      name: coverableId
      in: path
      required: true
      schema:
        type: string
    coverageId:
      name: coverageId
      in: path
      required: true
      schema:
        type: string
    enablePolymorphism:
      name: enablePolymorphism
      in: query
      description: Whether or not to use the `discriminator`/`oneOf` pattern to output
        schemas in cases where the valid set of fields can vary based on some attribute
        of the data such as the country or subtype.  Defaults to `true`. See the documentation
        for more information.
      schema:
        type: boolean
        default: true
    exposureId:
      name: exposureId
      in: path
      required: true
      schema:
        type: string
    fields:
      name: fields
      in: query
      description: Allows the caller to specify the set of fields that should be included
        on the response. This can be used to limit the set of fields returned as well
        as to include optional fields that otherwise wouldn't normally be returned.
        The parameter is either of the form `fields=<field list>` or `fields=<include>:<field
        list>`, where `<field list>` consists of a comma-separated list of field or
        field set names. See the documentation for more information.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
        x-gw-extensions:
          allowForCompositeApi: true
      x-gw-extensions:
        allowForCompositeApi: true
    filter:
      name: filter
      in: query
      description: Filters the list of results based on the specified field, operator,
        and value. The parameter is either of the form `filter=<field>:<operator>:<value>`
        or `filter=<include>:<field>:<operator>:<value>`. See the documentation for
        more information.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
        x-gw-extensions:
          allowForCompositeApi: true
      x-gw-extensions:
        allowForCompositeApi: true
    filterByUser:
      name: filterByUser
      in: query
      description: Whether or not to filter endpoints and schema properties by the
        authorization of the caller. Defaults to `false`.
      schema:
        type: boolean
        default: false
    gwLanguageHeader:
      name: GW-Language
      in: header
      description: If specified, this header will set the language used when processing
        the request
      schema:
        type: string
    gwLocaleHeader:
      name: GW-Locale
      in: header
      description: If specified, this header will set the locale used when processing
        the request
      schema:
        type: string
    gwSchemaProperty:
      name: GW-IncludeSchemaProperty
      in: header
      description: If specified and the operation returns json with a defined schema,
        this will add a property, '$GW-Schema',  with the fully qualified name of
        the object's schema.
      schema:
        type: boolean
    gwTraceability:
      name: X-Correlation-ID
      in: header
      description: 'This header permits a customer to trace a request from its initial
        reception through all of the subsequent applications that were invoked to
        handle that request. The actual traceability id present in the MDC and logs
        (and returned in the response), is dependent on the implementation of TraceabilityIDPlugin.
        The default implementation uses this value, if specified, or a generated UID.  However,
        another implementation may always generate a unique id and just log  the relationship
        between these incoming values and the generated UID. Note: that this header
        can be repeated, but the resulting string will just be the comma separated
        values.'
      schema:
        type: string
    gwTransactionID:
      name: GW-DBTransaction-ID
      in: header
      description: If specified and this operation results in a database commit, this
        header's value must not have been submitted before.  This value must be globally
        unique across all clients, apis and webservices. It is used for those transaction
        that are not idempotent. Unless this is explicitly referenced for an operation
        it is not required.
      required: true
      schema:
        type: string
    gwUnknownPropertyHeader:
      name: GW-UnknownPropertyHandling
      in: header
      description: If specified, this header will drive the behavior for unknown property
        handling
      schema:
        type: string
        enum:
        - log
        - reject
        - ignore
    gwUnknownQueryParameterHeader:
      name: GW-UnknownQueryParamHandling
      in: header
      description: If specified, this header will drive the behavior for unknown query
        parameter handling.  Default is to reject them.
      schema:
        type: string
        enum:
        - log
        - reject
        - ignore
    gwValidateResponseHandling:
      name: GW-ValidateResponseHandling
      in: header
      description: If specified, this header permits the client to override the behavior
        around validating response
      schema:
        type: boolean
    include:
      name: include
      in: query
      description: Used to request that additional resources be returned with the
        API response in the `included` section of the responses. The `include` parameter
        can appear multiple times, and is a comma-separated list of additional resources
        to include. See the documentation for more information.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    includeTotal:
      name: includeTotal
      in: query
      description: Used to request that results should include a count of the total
        number of results available, which may be more than the total number of results
        currently being returned. This parameter is of the form `includeTotal=<true|false>`
        or `includeTotal=<include>:<true|false>`. If not specified, the default is
        considered to be `false`. See the documentation for more information about
        response pagination.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
        x-gw-extensions:
          allowForCompositeApi: true
      x-gw-extensions:
        allowForCompositeApi: true
    lineId:
      name: lineId
      in: path
      required: true
      schema:
        type: string
    omitInclusions:
      name: omitInclusions
      in: query
      description: Whether or not to omit the `included` properties on request and
        response schemas.  Defaults to `false`. See the documentation for more information.
        (Since 1.4.0)
      schema:
        type: boolean
        default: false
        x-gw-sinceVersion: 1.4.0
      x-gw-sinceVersion: 1.4.0
    pageOffset:
      name: pageOffset
      in: query
      description: The offset of the first result to fetch when fetching a paginated
        set of results. The parameter is of the form `pageOffset=<number>` where the
        first result has an offset of 0. For example, `pageOffset=25` will skip the
        first 25 results in sorted order. If not specified, the default value is 0.
        See the documentation for more information about response pagination.
      schema:
        type: string
        x-gw-extensions:
          allowForCompositeApi: true
      x-gw-extensions:
        allowForCompositeApi: true
    pageSize:
      name: pageSize
      in: query
      description: The maximum number of results to return in the response. The parameter
        is of the form `pageSize=<size>` or `pageSize=<include>:<size>`. The maximum
        allowed `pageSize` and the default `pageSize` both depend on the specific
        API endpoint the request is made to. See the documentation for more information
        about response pagination.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
        x-gw-extensions:
          allowForCompositeApi: true
      x-gw-extensions:
        allowForCompositeApi: true
    prettyPrintSchema:
      name: prettyPrint
      in: query
      description: Whether or not to pretty-print the returned schema, making it larger
        but more human readable.  Defaults to `false`.
      schema:
        type: boolean
        default: false
    productId:
      name: productId
      in: path
      required: true
      schema:
        type: string
    sort:
      name: sort
      in: query
      description: Controls the sorting of elements within a response. The sort parameter
        is of the form `sort=<fields>` or `sort=<include>:<fields>`, where `<fields>`
        represents a comma-separated list of field names to sort on. Field names can
        be prefixed with `-` to request a descending sort, otherwise the sort will
        be ascending. See the documentation for more information.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
        x-gw-extensions:
          allowForCompositeApi: true
      x-gw-extensions:
        allowForCompositeApi: true
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
